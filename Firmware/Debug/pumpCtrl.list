
pumpCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800c688  0800c688  0001c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc5c  0800cc5c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc5c  0800cc5c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc5c  0800cc5c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cc5c  0800cc5c  0001cc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cc64  0800cc64  0001cc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000408  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003fc6c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a19  00000000  00000000  0005fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  000658a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f0  00000000  00000000  00066cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026175  00000000  00000000  00067fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2bf  00000000  00000000  0008e13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23df  00000000  00000000  000ab3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017d7db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f28  00000000  00000000  0017d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c66c 	.word	0x0800c66c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c66c 	.word	0x0800c66c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <_ZN6Device8getLabelB5cxx11Ev>:

#include "Device.h"

std::string Device::getLabel()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	return label;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	330c      	adds	r3, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f007 fc35 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZN6Device8hasFaultEv>:

bool Device::hasFault()
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	return fault;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_ZN7DisplayC1Ev>:
 *      Author: DD
 */

#include "Display.h"

Display::Display()
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3314      	adds	r3, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	755a      	strb	r2, [r3, #21]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	220f      	movs	r2, #15
 8000caa:	759a      	strb	r2, [r3, #22]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	221b      	movs	r2, #27
 8000cb0:	75da      	strb	r2, [r3, #23]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	221e      	movs	r2, #30
 8000cb6:	761a      	strb	r2, [r3, #24]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2206      	movs	r2, #6
 8000cbc:	765a      	strb	r2, [r3, #25]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	221b      	movs	r2, #27
 8000cc2:	775a      	strb	r2, [r3, #29]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	779a      	strb	r2, [r3, #30]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	220a      	movs	r2, #10
 8000cce:	77da      	strb	r2, [r3, #31]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	221f      	movs	r2, #31
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	221b      	movs	r2, #27
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	221e      	movs	r2, #30
 8000cec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	221b      	movs	r2, #27
 8000cf4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	220c      	movs	r2, #12
 8000d04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	332c      	adds	r3, #44	; 0x2c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2207      	movs	r2, #7
 8000d26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2207      	movs	r2, #7
 8000d36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3344      	adds	r3, #68	; 0x44
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f007 fa80 	bl	800827e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
}
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZN7Display6addLCDE19__I2C_HandleTypeDeft>:
	createChars();
}

void Display::addLCD(I2C_HandleTypeDef i2cHandler,
					uint16_t _address)
{
 8000d88:	b084      	sub	sp, #16
 8000d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8c:	b0a9      	sub	sp, #164	; 0xa4
 8000d8e:	af12      	add	r7, sp, #72	; 0x48
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	lcd = new LCD_I2C(i2cHandler, _address);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000da2:	224c      	movs	r2, #76	; 0x4c
 8000da4:	4618      	mov	r0, r3
 8000da6:	f008 fd93 	bl	80098d0 <memcpy>
 8000daa:	2050      	movs	r0, #80	; 0x50
 8000dac:	f007 f9af 	bl	800810e <_Znwj>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461e      	mov	r6, r3
 8000db4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000db8:	9310      	str	r3, [sp, #64]	; 0x40
 8000dba:	466d      	mov	r5, sp
 8000dbc:	f107 0418 	add.w	r4, r7, #24
 8000dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dda:	4630      	mov	r0, r6
 8000ddc:	f000 fbd5 	bl	800158a <_ZN7LCD_I2CC1E19__I2C_HandleTypeDeft>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611e      	str	r6, [r3, #16]
	createChars();
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f830 	bl	8000e4a <_ZN7Display11createCharsEv>
}
 8000dea:	bf00      	nop
 8000dec:	375c      	adds	r7, #92	; 0x5c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000df4:	b004      	add	sp, #16
 8000df6:	4770      	bx	lr

08000df8 <_ZN7Display5addTPEP9TurboPumpi>:

void Display::addTP(TurboPump* tp, int idx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	switch(idx)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <_ZN7Display5addTPEP9TurboPumpi+0x1a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d004      	beq.n	8000e1a <_ZN7Display5addTPEP9TurboPumpi+0x22>
	{
		case 0: tp0 = tp; break;
		case 1: tp1 = tp; break;
		default: break;
 8000e10:	e007      	b.n	8000e22 <_ZN7Display5addTPEP9TurboPumpi+0x2a>
		case 0: tp0 = tp; break;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e003      	b.n	8000e22 <_ZN7Display5addTPEP9TurboPumpi+0x2a>
		case 1: tp1 = tp; break;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	bf00      	nop
	}
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_ZN7Display5addPSEP6Pirani>:

void Display::addPS(Pirani* ps)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	pirani = ps;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	60da      	str	r2, [r3, #12]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_ZN7Display11createCharsEv>:

void Display::createChars()
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	dc10      	bgt.n	8000e7e <_ZN7Display11createCharsEv+0x34>
	{
		lcd->createChar(Fan[i], i);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6918      	ldr	r0, [r3, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3302      	adds	r3, #2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f000 fd06 	bl	8001882 <_ZN7LCD_I2C10createCharEPhc>
	for (int i = 0; i < 3; i++)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e7eb      	b.n	8000e56 <_ZN7Display11createCharsEv+0xc>
	}
	lcd->createChar(Arrow, 3);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6918      	ldr	r0, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	332c      	adds	r3, #44	; 0x2c
 8000e86:	2203      	movs	r2, #3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f000 fcfa 	bl	8001882 <_ZN7LCD_I2C10createCharEPhc>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <_ZN7Display9showPumpsEv>:

void Display::showPumps()
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b09d      	sub	sp, #116	; 0x74
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	lcd->put_cur(0, 0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fc4d 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	int idx_0 = index, idx_1 = index;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	66bb      	str	r3, [r7, #104]	; 0x68
	if (!tp0->isRunning()) idx_0 = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 f952 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f083 0301 	eor.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <_ZN7Display9showPumpsEv+0x3c>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
	lcd->printCustomChar(idx_0);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fcf4 	bl	80018cc <_ZN7LCD_I2C15printCustomCharEc>
	lcd->print((char*)tp0->getLabel().c_str());
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691c      	ldr	r4, [r3, #16]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fea7 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4618      	mov	r0, r3
 8000f00:	f007 fabc 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f000 fc3e 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 f9ba 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lcd->print3Dig((uint32_t)tp0->getValue());
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691c      	ldr	r4, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4798      	blx	r3
 8000f2c:	eef0 7a40 	vmov.f32	s15, s0
 8000f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f34:	ee17 1a90 	vmov	r1, s15
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f000 fc65 	bl	8001808 <_ZN7LCD_I2C9print3DigEm>
	lcd->print((char*)tp0->getUnit().c_str());
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691c      	ldr	r4, [r3, #16]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6859      	ldr	r1, [r3, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f107 0220 	add.w	r2, r7, #32
 8000f54:	4610      	mov	r0, r2
 8000f56:	4798      	blx	r3
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f007 fa8d 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f000 fc0f 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 f98b 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if(tp0->hasFault())
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe73 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <_ZN7Display9showPumpsEv+0xfc>
	{
		lcd->print((char*)(" Err"));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	4960      	ldr	r1, [pc, #384]	; (800110c <_ZN7Display9showPumpsEv+0x274>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fbfc 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8000f92:	e005      	b.n	8000fa0 <_ZN7Display9showPumpsEv+0x108>
	}
	else
	{
		lcd->print((char*)("     "));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	495d      	ldr	r1, [pc, #372]	; (8001110 <_ZN7Display9showPumpsEv+0x278>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fbf5 	bl	800178a <_ZN7LCD_I2C5printEPc>
	}
	lcd->put_cur(1, 0);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fbcd 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	if (!tp1->isRunning()) idx_1 = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f8d8 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f083 0301 	eor.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZN7Display9showPumpsEv+0x130>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	66bb      	str	r3, [r7, #104]	; 0x68
	lcd->printCustomChar(idx_1);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fc7a 	bl	80018cc <_ZN7LCD_I2C15printCustomCharEc>
	lcd->print((char*)tp1->getLabel().c_str());
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691c      	ldr	r4, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe2d 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
 8000fee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f007 fa42 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f000 fbc4 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8001002:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001006:	4618      	mov	r0, r3
 8001008:	f007 f940 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lcd->print3Dig((uint32_t)tp1->getValue());
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691c      	ldr	r4, [r3, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4610      	mov	r0, r2
 800101e:	4798      	blx	r3
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 1a90 	vmov	r1, s15
 800102c:	4620      	mov	r0, r4
 800102e:	f000 fbeb 	bl	8001808 <_ZN7LCD_I2C9print3DigEm>
	lcd->print((char*)tp1->getUnit().c_str());
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691c      	ldr	r4, [r3, #16]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6899      	ldr	r1, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001048:	4610      	mov	r0, r2
 800104a:	4798      	blx	r3
 800104c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001050:	4618      	mov	r0, r3
 8001052:	f007 fa13 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	4620      	mov	r0, r4
 800105c:	f000 fb95 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8001060:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001064:	4618      	mov	r0, r3
 8001066:	f007 f911 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if(tp1->hasFault())
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fdf9 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <_ZN7Display9showPumpsEv+0x1f0>
	{
		lcd->print((char*)(" Err"));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4923      	ldr	r1, [pc, #140]	; (800110c <_ZN7Display9showPumpsEv+0x274>)
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fb82 	bl	800178a <_ZN7LCD_I2C5printEPc>
 8001086:	e005      	b.n	8001094 <_ZN7Display9showPumpsEv+0x1fc>
	}
	else
	{
		lcd->print((char*)("     "));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4920      	ldr	r1, [pc, #128]	; (8001110 <_ZN7Display9showPumpsEv+0x278>)
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fb7b 	bl	800178a <_ZN7LCD_I2C5printEPc>
	}
	index++;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
	if(index == 3)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d102      	bne.n	80010ac <_ZN7Display9showPumpsEv+0x214>
	{
		index = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// If in edit mode then show the arrow

	if (editMode)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d018      	beq.n	80010e8 <_ZN7Display9showPumpsEv+0x250>
	{
		lcd->put_cur(lineIdx, 15);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6918      	ldr	r0, [r3, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	220f      	movs	r2, #15
 80010c0:	4619      	mov	r1, r3
 80010c2:	f000 fb41 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
		lcd->printCustomChar(3);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2103      	movs	r1, #3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fbfd 	bl	80018cc <_ZN7LCD_I2C15printCustomCharEc>
		lcd->printBlank(1-lineIdx, 15);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6918      	ldr	r0, [r3, #16]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010da:	f1c3 0301 	rsb	r3, r3, #1
 80010de:	220f      	movs	r2, #15
 80010e0:	4619      	mov	r1, r3
 80010e2:	f000 fb68 	bl	80017b6 <_ZN7LCD_I2C10printBlankEii>
		lcd->printBlank(1, 15);
		lcd->printBlank(0, 15);
	}


}
 80010e6:	e00d      	b.n	8001104 <_ZN7Display9showPumpsEv+0x26c>
		lcd->printBlank(1, 15);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	220f      	movs	r2, #15
 80010ee:	2101      	movs	r1, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fb60 	bl	80017b6 <_ZN7LCD_I2C10printBlankEii>
		lcd->printBlank(0, 15);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	220f      	movs	r2, #15
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fb59 	bl	80017b6 <_ZN7LCD_I2C10printBlankEii>
}
 8001104:	bf00      	nop
 8001106:	3774      	adds	r7, #116	; 0x74
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	0800c688 	.word	0x0800c688
 8001110:	0800c690 	.word	0x0800c690

08001114 <_ZN7Display8showPresEv>:
void Display::showPres()
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (editMode) editMode = false;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <_ZN7Display8showPresEv+0x1a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	lcd->put_cur(0, 0);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fb06 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	lcd->print((char*)("  Fore Vacuum:"));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4928      	ldr	r1, [pc, #160]	; (80011e4 <_ZN7Display8showPresEv+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fb21 	bl	800178a <_ZN7LCD_I2C5printEPc>
	lcd->put_cur(1, 0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2200      	movs	r2, #0
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f000 faf9 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	if (pirani->hasFault())
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fd83 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <_ZN7Display8showPresEv+0x60>
	{
		lcd->print((char*)("     Error     "));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	491f      	ldr	r1, [pc, #124]	; (80011e8 <_ZN7Display8showPresEv+0xd4>)
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fb0c 	bl	800178a <_ZN7LCD_I2C5printEPc>
		lcd->print((char*)("  "));
		lcd->print(pirani->getValue());
		lcd->print((char*)pirani->getUnit().c_str());
	}

}
 8001172:	e033      	b.n	80011dc <_ZN7Display8showPresEv+0xc8>
		lcd->print((char*)("  "));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	491c      	ldr	r1, [pc, #112]	; (80011ec <_ZN7Display8showPresEv+0xd8>)
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fb05 	bl	800178a <_ZN7LCD_I2C5printEPc>
		lcd->print(pirani->getValue());
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691c      	ldr	r4, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
 8001194:	eef0 7a40 	vmov.f32	s15, s0
 8001198:	2103      	movs	r1, #3
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	4620      	mov	r0, r4
 80011a0:	f000 fb56 	bl	8001850 <_ZN7LCD_I2C5printEfi>
		lcd->print((char*)pirani->getUnit().c_str());
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691c      	ldr	r4, [r3, #16]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f107 0208 	add.w	r2, r7, #8
 80011ba:	4610      	mov	r0, r2
 80011bc:	4798      	blx	r3
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f007 f95a 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fadc 	bl	800178a <_ZN7LCD_I2C5printEPc>
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 f858 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80011dc:	bf00      	nop
 80011de:	3724      	adds	r7, #36	; 0x24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	0800c698 	.word	0x0800c698
 80011e8:	0800c6a8 	.word	0x0800c6a8
 80011ec:	0800c6b8 	.word	0x0800c6b8

080011f0 <_ZN7Display9showFaultEv>:

void Display::showFault()
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	lcd->put_cur(0, 0);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f000 faa1 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	lcd->print((char*)("   "));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4913      	ldr	r1, [pc, #76]	; (8001258 <_ZN7Display9showFaultEv+0x68>)
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fabc 	bl	800178a <_ZN7LCD_I2C5printEPc>
	lcd->print((char*)faultLabel.c_str());
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691c      	ldr	r4, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3344      	adds	r3, #68	; 0x44
 800121a:	4618      	mov	r0, r3
 800121c:	f007 f92e 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	4620      	mov	r0, r4
 8001226:	f000 fab0 	bl	800178a <_ZN7LCD_I2C5printEPc>
	lcd->print((char*)(" Fault!"));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <_ZN7Display9showFaultEv+0x6c>)
 8001230:	4618      	mov	r0, r3
 8001232:	f000 faaa 	bl	800178a <_ZN7LCD_I2C5printEPc>
	lcd->put_cur(1, 0);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2200      	movs	r2, #0
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fa82 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	lcd->print((char*)("Press to dismiss"));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4905      	ldr	r1, [pc, #20]	; (8001260 <_ZN7Display9showFaultEv+0x70>)
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fa9d 	bl	800178a <_ZN7LCD_I2C5printEPc>
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	0800c6bc 	.word	0x0800c6bc
 800125c:	0800c6c0 	.word	0x0800c6c0
 8001260:	0800c6c8 	.word	0x0800c6c8

08001264 <_ZN7Display2upEv>:

void Display::up()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if (editMode)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <_ZN7Display2upEv+0x34>
	{
		// Change the line
		lineIdx--;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
		if (lineIdx < 0)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001284:	2b00      	cmp	r3, #0
 8001286:	da1a      	bge.n	80012be <_ZN7Display2upEv+0x5a>
		{
			lineIdx = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	63da      	str	r2, [r3, #60]	; 0x3c
			editMode = false;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		{
			pageIdx = 0;
		}
		lcd->clear();
	}
}
 8001296:	e012      	b.n	80012be <_ZN7Display2upEv+0x5a>
		pageIdx++;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
		if (pageIdx >= pages)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	db02      	blt.n	80012b4 <_ZN7Display2upEv+0x50>
			pageIdx = 0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
		lcd->clear();
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fa2e 	bl	800171a <_ZN7LCD_I2C5clearEv>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_ZN7Display4downEv>:

void Display::down()
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]

	if (editMode)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d010      	beq.n	80012fa <_ZN7Display4downEv+0x34>
	{
		// Change the line
		lineIdx++;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c
		if (lineIdx > 1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	dd1a      	ble.n	8001320 <_ZN7Display4downEv+0x5a>
		{
			lineIdx = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c
			editMode = false;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pageIdx = pages - 1;
		}
		lcd->clear();
	}

}
 80012f8:	e012      	b.n	8001320 <_ZN7Display4downEv+0x5a>
		pageIdx--;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
		if (pageIdx < 0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	2b00      	cmp	r3, #0
 800130a:	da04      	bge.n	8001316 <_ZN7Display4downEv+0x50>
			pageIdx = pages - 1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
		lcd->clear();
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f9fd 	bl	800171a <_ZN7LCD_I2C5clearEv>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN7Display8pushDownEv>:

void Display::pushDown()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	// Clear the fault
	if (fault && !override)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001336:	2b00      	cmp	r3, #0
 8001338:	d011      	beq.n	800135e <_ZN7Display8pushDownEv+0x36>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <_ZN7Display8pushDownEv+0x36>
	{
		override = true;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		lcd->clear();
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f9df 	bl	800171a <_ZN7LCD_I2C5clearEv>
		return;
 800135c:	e043      	b.n	80013e6 <_ZN7Display8pushDownEv+0xbe>
	}

	if (!editMode)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001364:	f083 0301 	eor.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <_ZN7Display8pushDownEv+0x50>
	{
		// Only go in the edit mode on the first page
		editMode = true;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001376:	e036      	b.n	80013e6 <_ZN7Display8pushDownEv+0xbe>
	}
	else
	{
		switch (lineIdx)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <_ZN7Display8pushDownEv+0x5e>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d018      	beq.n	80013b6 <_ZN7Display8pushDownEv+0x8e>
 8001384:	e02f      	b.n	80013e6 <_ZN7Display8pushDownEv+0xbe>
		{
		case 0:
		{
			if (tp0->isRunning())
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 feec 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <_ZN7Display8pushDownEv+0x7a>
			{
				tp0->stop();
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 feab 	bl	80020f6 <_ZN9TurboPump4stopEv>
 80013a0:	e004      	b.n	80013ac <_ZN7Display8pushDownEv+0x84>
			}
			else
			{
				tp0->start();
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe66 	bl	8002078 <_ZN9TurboPump5startEv>
			}
			editMode = false;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

			break;
 80013b4:	e017      	b.n	80013e6 <_ZN7Display8pushDownEv+0xbe>
		}
		case 1:
		{
			if (tp1->isRunning())
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fed4 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <_ZN7Display8pushDownEv+0xaa>
			{
				tp1->stop();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fe93 	bl	80020f6 <_ZN9TurboPump4stopEv>
 80013d0:	e004      	b.n	80013dc <_ZN7Display8pushDownEv+0xb4>
			}
			else
			{
				tp1->start();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fe4e 	bl	8002078 <_ZN9TurboPump5startEv>
			}
			editMode = false;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			break;
 80013e4:	bf00      	nop
		}

		}
	}
}
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZN7Display7displayEv>:

void Display::display()
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b095      	sub	sp, #84	; 0x54
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	// Check for faults
	fault = false;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (tp0->hasFault())
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fc30 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01a      	beq.n	8001442 <_ZN7Display7displayEv+0x56>
	{
		fault = true;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		faultLabel = tp0->getLabel();
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc0e 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4620      	mov	r0, r4
 8001434:	f006 ff30 	bl	8008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f006 ff25 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	if (tp1->hasFault())
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc0d 	bl	8000c66 <_ZN6Device8hasFaultEv>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <_ZN7Display7displayEv+0x9c>
	{
		fault = true;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		faultLabel = tp1->getLabel();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	461a      	mov	r2, r3
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fbeb 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f006 ff0d 	bl	8008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4618      	mov	r0, r3
 8001484:	f006 ff02 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	if (pirani->hasFault())
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbea 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01a      	beq.n	80014ce <_ZN7Display7displayEv+0xe2>
	{
		fault = true;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		faultLabel = pirani->getLabel();
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f103 0444 	add.w	r4, r3, #68	; 0x44
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	461a      	mov	r2, r3
 80014ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fbc8 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
 80014b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014bc:	4619      	mov	r1, r3
 80014be:	4620      	mov	r0, r4
 80014c0:	f006 feea 	bl	8008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80014c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c8:	4618      	mov	r0, r3
 80014ca:	f006 fedf 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}

	if (!fault && override)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d4:	f083 0301 	eor.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <_ZN7Display7displayEv+0x104>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <_ZN7Display7displayEv+0x104>
	{
		override = false;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
	// Show the fault screen
	if (fault && !override)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <_ZN7Display7displayEv+0x126>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <_ZN7Display7displayEv+0x126>
	{
		showFault();
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fe70 	bl	80011f0 <_ZN7Display9showFaultEv>
		return;
 8001510:	e00e      	b.n	8001530 <_ZN7Display7displayEv+0x144>
	}
	// Show normal screens
	switch(pageIdx)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <_ZN7Display7displayEv+0x134>
 800151a:	2b01      	cmp	r3, #1
 800151c:	d004      	beq.n	8001528 <_ZN7Display7displayEv+0x13c>
 800151e:	e007      	b.n	8001530 <_ZN7Display7displayEv+0x144>
	{
		case 0: showPumps(); break;
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fcb9 	bl	8000e98 <_ZN7Display9showPumpsEv>
 8001526:	e003      	b.n	8001530 <_ZN7Display7displayEv+0x144>
		case 1: showPres();	break;
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fdf3 	bl	8001114 <_ZN7Display8showPresEv>
 800152e:	bf00      	nop
	}
}
 8001530:	3754      	adds	r7, #84	; 0x54
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN7Display8hasFaultEv>:

bool Display::hasFault()
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return fault && !override;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001544:	2b00      	cmp	r3, #0
 8001546:	d009      	beq.n	800155c <_ZN7Display8hasFaultEv+0x26>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800154e:	f083 0301 	eor.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZN7Display8hasFaultEv+0x26>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <_ZN7Display8hasFaultEv+0x28>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZSt5log10f>:
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	ed87 0a01 	vstr	s0, [r7, #4]
 8001574:	ed97 0a01 	vldr	s0, [r7, #4]
 8001578:	f007 f8c4 	bl	8008704 <log10f>
 800157c:	eef0 7a40 	vmov.f32	s15, s0
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_ZN7LCD_I2CC1E19__I2C_HandleTypeDeft>:

#include "LCDI2C.h"

#include <stdlib.h>

LCD_I2C::LCD_I2C(I2C_HandleTypeDef i2cHandler, uint16_t _address)
 800158a:	b084      	sub	sp, #16
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	f107 0014 	add.w	r0, r7, #20
 8001598:	e880 000e 	stmia.w	r0, {r1, r2, r3}
{
	handler = i2cHandler;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	224c      	movs	r2, #76	; 0x4c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f008 f992 	bl	80098d0 <memcpy>
	address = _address;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80015b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	init();
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f86e 	bl	8001698 <_ZN7LCD_I2C4initEv>
	clear();
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8ac 	bl	800171a <_ZN7LCD_I2C5clearEv>

}
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ce:	b004      	add	sp, #16
 80015d0:	4770      	bx	lr

080015d2 <_ZN7LCD_I2C8send_cmdEc>:

void LCD_I2C::send_cmd(char cmd)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f043 030c 	orr.w	r3, r3, #12
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	f043 030c 	orr.w	r3, r3, #12
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&handler, address,(uint8_t *)data_t, 4, 100);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800161c:	f107 0208 	add.w	r2, r7, #8
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2304      	movs	r3, #4
 8001626:	f003 fceb 	bl	8005000 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800162a:	2014      	movs	r0, #20
 800162c:	f002 f898 	bl	8003760 <HAL_Delay>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN7LCD_I2C9send_dataEc>:

void LCD_I2C::send_data(char data)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	f023 030f 	bic.w	r3, r3, #15
 800164a:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f043 030d 	orr.w	r3, r3, #13
 8001658:	b2db      	uxtb	r3, r3
 800165a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f043 0309 	orr.w	r3, r3, #9
 8001662:	b2db      	uxtb	r3, r3
 8001664:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	f043 030d 	orr.w	r3, r3, #13
 800166c:	b2db      	uxtb	r3, r3
 800166e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	f043 0309 	orr.w	r3, r3, #9
 8001676:	b2db      	uxtb	r3, r3
 8001678:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&handler, address,(uint8_t *)data_t, 4, 100);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2304      	movs	r3, #4
 800168c:	f003 fcb8 	bl	8005000 <HAL_I2C_Master_Transmit>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN7LCD_I2C4initEv>:

void LCD_I2C::init()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	send_data(0x00);
 80016a0:	2100      	movs	r1, #0
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffc8 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
	HAL_Delay(150);
 80016a8:	2096      	movs	r0, #150	; 0x96
 80016aa:	f002 f859 	bl	8003760 <HAL_Delay>
	send_cmd(0x03);
 80016ae:	2103      	movs	r1, #3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff8e 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	HAL_Delay(5);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f002 f852 	bl	8003760 <HAL_Delay>
	send_cmd(0x03);
 80016bc:	2103      	movs	r1, #3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff87 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	HAL_Delay(150);
 80016c4:	2096      	movs	r0, #150	; 0x96
 80016c6:	f002 f84b 	bl	8003760 <HAL_Delay>
	send_cmd(0x02);
 80016ca:	2102      	movs	r1, #2
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff80 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x02);
 80016d2:	2102      	movs	r1, #2
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff7c 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x08);
 80016da:	2108      	movs	r1, #8
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff78 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff74 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x0C);
 80016ea:	210c      	movs	r1, #12
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff70 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x00);
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff6c 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x06);
 80016fa:	2106      	movs	r1, #6
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff68 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x00);
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff64 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(0x01);
 800170a:	2101      	movs	r1, #1
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff60 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZN7LCD_I2C5clearEv>:

void LCD_I2C::clear()
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	send_cmd(0);
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff54 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	send_cmd(1);
 800172a:	2101      	movs	r1, #1
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff50 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
    HAL_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f002 f814 	bl	8003760 <HAL_Delay>
    send_cmd(0x0C);
 8001738:	210c      	movs	r1, #12
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff49 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN7LCD_I2C7put_curEii>:

void LCD_I2C::put_cur(int row, int col)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
    switch (row)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <_ZN7LCD_I2C7put_curEii+0x1a>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d005      	beq.n	800176c <_ZN7LCD_I2C7put_curEii+0x24>
 8001760:	e009      	b.n	8001776 <_ZN7LCD_I2C7put_curEii+0x2e>
    {
        case 0:
            col |= 0x80;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	607b      	str	r3, [r7, #4]
            break;
 800176a:	e004      	b.n	8001776 <_ZN7LCD_I2C7put_curEii+0x2e>
        case 1:
            col |= 0xC0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001772:	607b      	str	r3, [r7, #4]
            break;
 8001774:	bf00      	nop
    }

    send_cmd (col);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff ff28 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_ZN7LCD_I2C5printEPc>:

void LCD_I2C::print (char *str)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	while (*str) send_data (*str++);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <_ZN7LCD_I2C5printEPc+0x24>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	603a      	str	r2, [r7, #0]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff46 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
 80017ac:	e7f2      	b.n	8001794 <_ZN7LCD_I2C5printEPc+0xa>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZN7LCD_I2C10printBlankEii>:
{
	send_data(chr);
}

void LCD_I2C::printBlank(int row, int col)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
	put_cur(row, col);
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff ffbe 	bl	8001748 <_ZN7LCD_I2C7put_curEii>
	send_data(' ');
 80017cc:	2120      	movs	r1, #32
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff ff32 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZN7LCD_I2C5printEm>:

void LCD_I2C::print (uint32_t number)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	char buff[20];
	itoa(number, buff, 10);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f107 010c 	add.w	r1, r7, #12
 80017ec:	220a      	movs	r2, #10
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 f85c 	bl	80098ac <itoa>
	print(buff);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffc5 	bl	800178a <_ZN7LCD_I2C5printEPc>

}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZN7LCD_I2C9print3DigEm>:

void LCD_I2C::print3Dig(uint32_t number)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	uint32_t temp = 1000;
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	60fb      	str	r3, [r7, #12]
	while(number < temp && number >= 0
			&& temp > 1)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d20d      	bcs.n	800183c <_ZN7LCD_I2C9print3DigEm+0x34>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d90a      	bls.n	800183c <_ZN7LCD_I2C9print3DigEm+0x34>
	{
		send_data(' ');
 8001826:	2120      	movs	r1, #32
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff05 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
		temp /= 10;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <_ZN7LCD_I2C9print3DigEm+0x44>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	60fb      	str	r3, [r7, #12]
	while(number < temp && number >= 0
 800183a:	e7ed      	b.n	8001818 <_ZN7LCD_I2C9print3DigEm+0x10>
	}
	print(number);
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffcc 	bl	80017dc <_ZN7LCD_I2C5printEm>

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	cccccccd 	.word	0xcccccccd

08001850 <_ZN7LCD_I2C5printEfi>:

void LCD_I2C::print (float number, int dec)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	ed87 0a02 	vstr	s0, [r7, #8]
 800185c:	6079      	str	r1, [r7, #4]
	char buff[20];
    ftoa(number, buff);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	ed97 0a02 	vldr	s0, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f8d3 	bl	8001a14 <_ZN7LCD_I2C4ftoaEfPc>
	print(buff);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff ff88 	bl	800178a <_ZN7LCD_I2C5printEPc>

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZN7LCD_I2C10createCharEPhc>:
void LCD_I2C::createChar(unsigned char *character, const char idx)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4613      	mov	r3, r2
 800188e:	71fb      	strb	r3, [r7, #7]
	send_cmd(0x40 + (idx * 8));
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	3308      	adds	r3, #8
 8001894:	b2db      	uxtb	r3, r3
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fe98 	bl	80015d2 <_ZN7LCD_I2C8send_cmdEc>
	for (int i = 0; i < 8; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	dc0b      	bgt.n	80018c4 <_ZN7LCD_I2C10createCharEPhc+0x42>
		send_data(character[i]);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff febe 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
	for (int i = 0; i < 8; i++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e7f0      	b.n	80018a6 <_ZN7LCD_I2C10createCharEPhc+0x24>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZN7LCD_I2C15printCustomCharEc>:

void LCD_I2C::printCustomChar(const char idx)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
     send_data(idx);
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff feab 	bl	8001638 <_ZN7LCD_I2C9send_dataEc>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_ZN7LCD_I2C7reverseEPci>:

void LCD_I2C::reverse(char* str, int len)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b089      	sub	sp, #36	; 0x24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
    int i = 0, j = len - 1, temp;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
    while (i < j) {
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	429a      	cmp	r2, r3
 8001906:	da19      	bge.n	800193c <_ZN7LCD_I2C7reverseEPci+0x52>
        temp = str[i];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	617b      	str	r3, [r7, #20]
        str[i] = str[j];
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	441a      	add	r2, r3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	440b      	add	r3, r1
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
        i++;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
        j--;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3b01      	subs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
    while (i < j) {
 800193a:	e7e1      	b.n	8001900 <_ZN7LCD_I2C7reverseEPci+0x16>
    }
}
 800193c:	bf00      	nop
 800193e:	3724      	adds	r7, #36	; 0x24
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZN7LCD_I2C8intToStrEiPci>:
int LCD_I2C::intToStr(int x, char str[], int d)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
    int i = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
    bool neg = false;
 800195a:	2300      	movs	r3, #0
 800195c:	74fb      	strb	r3, [r7, #19]
    if (x < 0)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da0c      	bge.n	800197e <_ZN7LCD_I2C8intToStrEiPci+0x36>
    {
    	str[i++] = '-';
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	617a      	str	r2, [r7, #20]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	222d      	movs	r2, #45	; 0x2d
 8001972:	701a      	strb	r2, [r3, #0]
    	x *= -1;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	425b      	negs	r3, r3
 8001978:	60bb      	str	r3, [r7, #8]
    	neg = true;
 800197a:	2301      	movs	r3, #1
 800197c:	74fb      	strb	r3, [r7, #19]
    }
    while (x) {
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01e      	beq.n	80019c2 <_ZN7LCD_I2C8intToStrEiPci+0x7a>
        str[i++] = (x % 10) + '0';
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <_ZN7LCD_I2C8intToStrEiPci+0xc8>)
 8001988:	fb83 1302 	smull	r1, r3, r3, r2
 800198c:	1099      	asrs	r1, r3, #2
 800198e:	17d3      	asrs	r3, r2, #31
 8001990:	1ac9      	subs	r1, r1, r3
 8001992:	460b      	mov	r3, r1
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	1ad1      	subs	r1, r2, r3
 800199c:	b2ca      	uxtb	r2, r1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	6179      	str	r1, [r7, #20]
 80019a4:	4619      	mov	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	440b      	add	r3, r1
 80019aa:	3230      	adds	r2, #48	; 0x30
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <_ZN7LCD_I2C8intToStrEiPci+0xc8>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1092      	asrs	r2, r2, #2
 80019ba:	17db      	asrs	r3, r3, #31
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	60bb      	str	r3, [r7, #8]
    while (x) {
 80019c0:	e7dd      	b.n	800197e <_ZN7LCD_I2C8intToStrEiPci+0x36>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	da08      	bge.n	80019dc <_ZN7LCD_I2C8intToStrEiPci+0x94>
        str[i++] = '0';
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	461a      	mov	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80019da:	e7f2      	b.n	80019c2 <_ZN7LCD_I2C8intToStrEiPci+0x7a>

    if(neg)
 80019dc:	7cfb      	ldrb	r3, [r7, #19]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <_ZN7LCD_I2C8intToStrEiPci+0xaa>
    {
        reverse(str+1, i);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4619      	mov	r1, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff7d 	bl	80018ea <_ZN7LCD_I2C7reverseEPci>
 80019f0:	e004      	b.n	80019fc <_ZN7LCD_I2C8intToStrEiPci+0xb4>
    }
    else
    {
        reverse(str, i);
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff ff77 	bl	80018ea <_ZN7LCD_I2C7reverseEPci>
    }
    str[i] = '\0';
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
    return i;
 8001a06:	697b      	ldr	r3, [r7, #20]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	66666667 	.word	0x66666667

08001a14 <_ZN7LCD_I2C4ftoaEfPc>:


void LCD_I2C::ftoa(float n, char* res)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a20:	6079      	str	r1, [r7, #4]
	int exp;
	if(n == 0) n = 1e-9;
 8001a22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d101      	bne.n	8001a34 <_ZN7LCD_I2C4ftoaEfPc+0x20>
 8001a30:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <_ZN7LCD_I2C4ftoaEfPc+0x1a8>)
 8001a32:	60bb      	str	r3, [r7, #8]
	float f_exp = log10(n);
 8001a34:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a38:	f7ff fd97 	bl	800156a <_ZSt5log10f>
 8001a3c:	ed87 0a08 	vstr	s0, [r7, #32]

	exp = (int)(f_exp - 0.5);
 8001a40:	6a38      	ldr	r0, [r7, #32]
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <_ZN7LCD_I2C4ftoaEfPc+0x1ac>)
 8001a4c:	f7fe fc1c 	bl	8000288 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f87e 	bl	8000b58 <__aeabi_d2iz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24


	n /= pow(10, exp);
 8001a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a62:	200a      	movs	r0, #10
 8001a64:	f000 f8ae 	bl	8001bc4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a68:	ec55 4b10 	vmov	r4, r5, d0
 8001a6c:	68b8      	ldr	r0, [r7, #8]
 8001a6e:	f7fe fd6b 	bl	8000548 <__aeabi_f2d>
 8001a72:	4622      	mov	r2, r4
 8001a74:	462b      	mov	r3, r5
 8001a76:	f7fe fee9 	bl	800084c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f891 	bl	8000ba8 <__aeabi_d2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	60bb      	str	r3, [r7, #8]

	if (n < 1)
 8001a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d50b      	bpl.n	8001ab4 <_ZN7LCD_I2C4ftoaEfPc+0xa0>
	{
		n *= 10;
 8001a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	edc7 7a02 	vstr	s15, [r7, #8]
		exp--;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e013      	b.n	8001adc <_ZN7LCD_I2C4ftoaEfPc+0xc8>
	}
	else if (n >= 10)
 8001ab4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	db0a      	blt.n	8001adc <_ZN7LCD_I2C4ftoaEfPc+0xc8>
	{
		n /= 10;
 8001ac6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001aca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad2:	edc7 7a02 	vstr	s15, [r7, #8]
		exp++;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
	}
    // Extract integer part
    int ipart = (int)n;
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae4:	ee17 3a90 	vmov	r3, s15
 8001ae8:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afc:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 1);
 8001b00:	2301      	movs	r3, #1
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	69f9      	ldr	r1, [r7, #28]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff ff1e 	bl	8001948 <_ZN7LCD_I2C8intToStrEiPci>
 8001b0c:	6178      	str	r0, [r7, #20]

    // check for display option after point

    res[i] = '.'; // add dot
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	222e      	movs	r2, #46	; 0x2e
 8001b16:	701a      	strb	r2, [r3, #0]

    fpart = fpart * pow(10, 2);
 8001b18:	69b8      	ldr	r0, [r7, #24]
 8001b1a:	f7fe fd15 	bl	8000548 <__aeabi_f2d>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	460d      	mov	r5, r1
 8001b22:	2102      	movs	r1, #2
 8001b24:	200a      	movs	r0, #10
 8001b26:	f000 f84d 	bl	8001bc4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fd61 	bl	80005f8 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f833 	bl	8000ba8 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	61bb      	str	r3, [r7, #24]

    i += intToStr((int)fpart, res + i + 1, 2);
 8001b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	441a      	add	r2, r3
 8001b56:	2302      	movs	r3, #2
 8001b58:	ee17 1a90 	vmov	r1, s15
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fef3 	bl	8001948 <_ZN7LCD_I2C8intToStrEiPci>
 8001b62:	4602      	mov	r2, r0
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
    res[++i] = 'E';
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	2245      	movs	r2, #69	; 0x45
 8001b78:	701a      	strb	r2, [r3, #0]
    i++;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
    if (exp < 0)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da08      	bge.n	8001b98 <_ZN7LCD_I2C4ftoaEfPc+0x184>
    {
    	res[i] = '-';
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	222d      	movs	r2, #45	; 0x2d
 8001b8e:	701a      	strb	r2, [r3, #0]
    	exp *= -1;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	425b      	negs	r3, r3
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	e004      	b.n	8001ba2 <_ZN7LCD_I2C4ftoaEfPc+0x18e>
    }
    else
    {
    	res[i] = '+';
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	222b      	movs	r2, #43	; 0x2b
 8001ba0:	701a      	strb	r2, [r3, #0]
    }
    intToStr(exp, res + i + 1, 1);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	441a      	add	r2, r3
 8001baa:	2301      	movs	r3, #1
 8001bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff feca 	bl	8001948 <_ZN7LCD_I2C8intToStrEiPci>


}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	3089705f 	.word	0x3089705f
 8001bc0:	3fe00000 	.word	0x3fe00000

08001bc4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fca8 	bl	8000524 <__aeabi_i2d>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7fe fca3 	bl	8000524 <__aeabi_i2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ec43 2b11 	vmov	d1, r2, r3
 8001be6:	ec45 4b10 	vmov	d0, r4, r5
 8001bea:	f006 fcdd 	bl	80085a8 <pow>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfa:	eef0 0a67 	vmov.f32	s1, s15
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}

08001c04 <_ZN3PinC1Ev>:
 *  Created on: Aug 8, 2021
 *      Author: DD
 */

#include "Pin.h"
Pin::Pin()
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
{

}
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>:
void Pin::set(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	4613      	mov	r3, r2
 8001c26:	80fb      	strh	r3, [r7, #6]
	port_n = GPIOx;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	601a      	str	r2, [r3, #0]
	pin_n = GPIO_Pin;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	809a      	strh	r2, [r3, #4]

}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_ZN3Pin4portEv>:
GPIO_TypeDef* Pin::port()
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	return port_n;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZN3Pin3pinEv>:
uint16_t Pin::pin()
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return pin_n;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	889b      	ldrh	r3, [r3, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_ZN6DeviceC1Ev>:

#pragma once
#include <string>

class Device {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <_ZN6DeviceC1Ev+0x3c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f006 faf7 	bl	800827e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	0800c748 	.word	0x0800c748

08001cb0 <_ZN6PiraniC1Ef>:
#include "Pirani.h"
#include "math.h"
#include <stdlib.h>


Pirani::Pirani(float _coef)
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	ed87 0a00 	vstr	s0, [r7]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffd6 	bl	8001c70 <_ZN6DeviceC1Ev>
 8001cc4:	4a09      	ldr	r2, [pc, #36]	; (8001cec <_ZN6PiraniC1Ef+0x3c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <_ZN6PiraniC1Ef+0x40>)
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
{
	coef = _coef;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]
	label = "FV ";
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <_ZN6PiraniC1Ef+0x44>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 fb90 	bl	8008402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0800c734 	.word	0x0800c734
 8001cf0:	40b00000 	.word	0x40b00000
 8001cf4:	0800c6dc 	.word	0x0800c6dc

08001cf8 <_ZN6Pirani6updateEf>:

void Pirani::update(float _voltage)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	ed87 0a00 	vstr	s0, [r7]
	voltage = coef * _voltage;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d0a:	edd7 7a00 	vldr	s15, [r7]
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = pow(10, voltage - c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f000 f857 	bl	8001de0 <_ZSt3powIifEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d32:	ec53 2b10 	vmov	r2, r3, d0
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff35 	bl	8000ba8 <__aeabi_d2f>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (voltage <= 0.5 || voltage >= 9.5)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d909      	bls.n	8001d6c <_ZN6Pirani6updateEf+0x74>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d5e:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	db04      	blt.n	8001d76 <_ZN6Pirani6updateEf+0x7e>
	{
		fault = true;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d74:	e004      	b.n	8001d80 <_ZN6Pirani6updateEf+0x88>
	}
	else
	{
		fault = false;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN6Pirani8getValueEv>:

float Pirani::getValue()
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	return pressure;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <_ZN6Pirani7getUnitB5cxx11Ev>:

std::string Pirani::getUnit()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	return " mbar";
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	4618      	mov	r0, r3
 8001db8:	f006 f9bd 	bl	8008136 <_ZNSaIcEC1Ev>
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4906      	ldr	r1, [pc, #24]	; (8001ddc <_ZN6Pirani7getUnitB5cxx11Ev+0x34>)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f006 fbb3 	bl	8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 f9b2 	bl	8008138 <_ZNSaIcED1Ev>
}
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0800c6e0 	.word	0x0800c6e0

08001de0 <_ZSt3powIifEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	ed87 0a00 	vstr	s0, [r7]
      return pow(__type(__x), __type(__y));
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	ec43 2b11 	vmov	d1, r2, r3
 8001e04:	ec45 4b10 	vmov	d0, r4, r5
 8001e08:	f006 fbce 	bl	80085a8 <pow>
 8001e0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e10:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001e14:	eeb0 0a47 	vmov.f32	s0, s14
 8001e18:	eef0 0a67 	vmov.f32	s1, s15
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e24 <_ZN9TurboPumpC1Ev>:
 */

#include "TurboPump.h"
#include "stm32f3xx_hal.h"

TurboPump::TurboPump()
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff1e 	bl	8001c70 <_ZN6DeviceC1Ev>
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <_ZN9TurboPumpC1Ev+0x50>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <_ZN9TurboPumpC1Ev+0x54>)
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3330      	adds	r3, #48	; 0x30
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fedd 	bl	8001c04 <_ZN3PinC1Ev>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3338      	adds	r3, #56	; 0x38
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fed8 	bl	8001c04 <_ZN3PinC1Ev>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
{
	label = "TP ";
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	4906      	ldr	r1, [pc, #24]	; (8001e7c <_ZN9TurboPumpC1Ev+0x58>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f006 facd 	bl	8008402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	0800c75c 	.word	0x0800c75c
 8001e78:	3f4ccccd 	.word	0x3f4ccccd
 8001e7c:	0800c6e8 	.word	0x0800c6e8

08001e80 <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani>:

TurboPump::TurboPump(Pin _startPin, Pin _faultPin, float _coef,
 8001e80:	b082      	sub	sp, #8
 8001e82:	b590      	push	{r4, r7, lr}
 8001e84:	b08d      	sub	sp, #52	; 0x34
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6178      	str	r0, [r7, #20]
 8001e8a:	f107 000c 	add.w	r0, r7, #12
 8001e8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
 8001e94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e98:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e9c:	ed87 1a00 	vstr	s2, [r7]
		float _maxFreq, float _maxVolt, std::string lbl, Pirani* _gauge)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fee4 	bl	8001c70 <_ZN6DeviceC1Ev>
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani+0xc4>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani+0xc8>)
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3330      	adds	r3, #48	; 0x30
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fea3 	bl	8001c04 <_ZN3PinC1Ev>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3338      	adds	r3, #56	; 0x38
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe9e 	bl	8001c04 <_ZN3PinC1Ev>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
{
	startPin = _startPin;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3330      	adds	r3, #48	; 0x30
 8001ed4:	f107 020c 	add.w	r2, r7, #12
 8001ed8:	6810      	ldr	r0, [r2, #0]
 8001eda:	6018      	str	r0, [r3, #0]
 8001edc:	8892      	ldrh	r2, [r2, #4]
 8001ede:	809a      	strh	r2, [r3, #4]
	faultPin = _faultPin;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3338      	adds	r3, #56	; 0x38
 8001ee4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001ee8:	6810      	ldr	r0, [r2, #0]
 8001eea:	6018      	str	r0, [r3, #0]
 8001eec:	8892      	ldrh	r2, [r2, #4]
 8001eee:	809a      	strh	r2, [r3, #4]
	coef = _coef;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	609a      	str	r2, [r3, #8]
	maxFreq = _maxFreq;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
	maxVoltage = _maxVolt;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	649a      	str	r2, [r3, #72]	; 0x48
	label = lbl + " ";
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f103 040c 	add.w	r4, r3, #12
 8001f08:	f107 0318 	add.w	r3, r7, #24
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani+0xcc>)
 8001f0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f936 	bl	8002182 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f006 f9bb 	bl	8008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f006 f9b0 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	pirani = _gauge;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4618      	mov	r0, r3
 8001f36:	3734      	adds	r7, #52	; 0x34
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f3e:	b002      	add	sp, #8
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	0800c75c 	.word	0x0800c75c
 8001f48:	3f4ccccd 	.word	0x3f4ccccd
 8001f4c:	0800c6ec 	.word	0x0800c6ec

08001f50 <_ZN9TurboPump6updateEf>:
{
	pirani = _gauge;
}

void TurboPump::update(float _voltage)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	ed87 0a00 	vstr	s0, [r7]
	voltage = _voltage * coef;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f62:	edd7 7a00 	vldr	s15, [r7]
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = maxFreq * voltage / maxVoltage;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f7c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	checkFault();
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f823 	bl	8001fdc <_ZN9TurboPump10checkFaultEv>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <_ZN9TurboPump8getValueEv>:

float TurboPump::getValue()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if (frequency < 50)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001fae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001fd8 <_ZN9TurboPump8getValueEv+0x38>
 8001fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	d502      	bpl.n	8001fc2 <_ZN9TurboPump8getValueEv+0x22>
	{
		return 0;
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e001      	b.n	8001fc6 <_ZN9TurboPump8getValueEv+0x26>
	}
	return frequency;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	ee07 3a90 	vmov	s15, r3
}
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	42480000 	.word	0x42480000

08001fdc <_ZN9TurboPump10checkFaultEv>:


void TurboPump::checkFault()
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(faultPin.port(), faultPin.pin()) == GPIO_PIN_SET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3338      	adds	r3, #56	; 0x38
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe29 	bl	8001c40 <_ZN3Pin4portEv>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3338      	adds	r3, #56	; 0x38
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe2f 	bl	8001c58 <_ZN3Pin3pinEv>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4620      	mov	r0, r4
 8002000:	f002 ff0c 	bl	8004e1c <HAL_GPIO_ReadPin>
 8002004:	4603      	mov	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	bf0c      	ite	eq
 800200a:	2301      	moveq	r3, #1
 800200c:	2300      	movne	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <_ZN9TurboPump10checkFaultEv+0x48>
	{
		fault = true;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		stop();
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f86a 	bl	80020f6 <_ZN9TurboPump4stopEv>
 8002022:	e003      	b.n	800202c <_ZN9TurboPump10checkFaultEv+0x50>
	}
	else
	{
		fault = false;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (pirani->getValue() > thres_press ||
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4610      	mov	r0, r2
 800203a:	4798      	blx	r3
 800203c:	eeb0 7a40 	vmov.f32	s14, s0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	dc07      	bgt.n	8002060 <_ZN9TurboPump10checkFaultEv+0x84>
				pirani->hasFault())
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fe06 	bl	8000c66 <_ZN6Device8hasFaultEv>
 800205a:	4603      	mov	r3, r0
	if (pirani->getValue() > thres_press ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <_ZN9TurboPump10checkFaultEv+0x88>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <_ZN9TurboPump10checkFaultEv+0x8a>
 8002064:	2300      	movs	r3, #0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <_ZN9TurboPump10checkFaultEv+0x94>
	{
		stop();
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f843 	bl	80020f6 <_ZN9TurboPump4stopEv>
	}
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}

08002078 <_ZN9TurboPump5startEv>:
void TurboPump::start()
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if (pirani->getValue() <= thres_press &&
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4610      	mov	r0, r2
 800208e:	4798      	blx	r3
 8002090:	eeb0 7a40 	vmov.f32	s14, s0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800209a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	d80c      	bhi.n	80020be <_ZN9TurboPump5startEv+0x46>
			!pirani->hasFault())
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fddc 	bl	8000c66 <_ZN6Device8hasFaultEv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
	if (pirani->getValue() <= thres_press &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <_ZN9TurboPump5startEv+0x46>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <_ZN9TurboPump5startEv+0x48>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d014      	beq.n	80020ee <_ZN9TurboPump5startEv+0x76>
	{
		running = true;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		HAL_GPIO_WritePin(startPin.port(), startPin.pin(), GPIO_PIN_SET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3330      	adds	r3, #48	; 0x30
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdb5 	bl	8001c40 <_ZN3Pin4portEv>
 80020d6:	4604      	mov	r4, r0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3330      	adds	r3, #48	; 0x30
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fdbb 	bl	8001c58 <_ZN3Pin3pinEv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2201      	movs	r2, #1
 80020e6:	4619      	mov	r1, r3
 80020e8:	4620      	mov	r0, r4
 80020ea:	f002 feaf 	bl	8004e4c <HAL_GPIO_WritePin>
	}
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}

080020f6 <_ZN9TurboPump4stopEv>:


void TurboPump::stop()
{
 80020f6:	b590      	push	{r4, r7, lr}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	running = false;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	HAL_GPIO_WritePin(startPin.port(), startPin.pin(), GPIO_PIN_RESET);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3330      	adds	r3, #48	; 0x30
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fd98 	bl	8001c40 <_ZN3Pin4portEv>
 8002110:	4604      	mov	r4, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3330      	adds	r3, #48	; 0x30
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fd9e 	bl	8001c58 <_ZN3Pin3pinEv>
 800211c:	4603      	mov	r3, r0
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4620      	mov	r0, r4
 8002124:	f002 fe92 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <_ZN9TurboPump7getUnitB5cxx11Ev>:

std::string TurboPump::getUnit()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	return "Hz";
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f005 fff9 	bl	8008136 <_ZNSaIcEC1Ev>
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	461a      	mov	r2, r3
 800214a:	4906      	ldr	r1, [pc, #24]	; (8002164 <_ZN9TurboPump7getUnitB5cxx11Ev+0x34>)
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f006 f9ef 	bl	8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4618      	mov	r0, r3
 8002158:	f005 ffee 	bl	8008138 <_ZNSaIcED1Ev>
}
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	0800c6f0 	.word	0x0800c6f0

08002168 <_ZN9TurboPump9isRunningEv>:

bool TurboPump::isRunning()
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	return running;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f006 f999 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f006 f959 	bl	8008450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800219e:	bf00      	nop
    }
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZN6DeviceD1Ev>:

#pragma once
#include <string>

class Device {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <_ZN6DeviceD1Ev+0x24>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	330c      	adds	r3, #12
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 f866 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800c748 	.word	0x0800c748

080021d0 <_ZN9TurboPumpD1Ev>:
#include <string>
#include "Pin.h"
#include "Device.h"
#include "Pirani.h"

class TurboPump : public Device
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_ZN9TurboPumpD1Ev+0x20>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ffe1 	bl	80021a8 <_ZN6DeviceD1Ev>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	0800c75c 	.word	0x0800c75c

080021f4 <_ZN6DeviceaSEOS_>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 020c 	add.w	r2, r3, #12
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f006 f83c 	bl	8008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZN9TurboPumpaSEOS_>:
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ffce 	bl	80021f4 <_ZN6DeviceaSEOS_>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	3330      	adds	r3, #48	; 0x30
 800226e:	3230      	adds	r2, #48	; 0x30
 8002270:	6811      	ldr	r1, [r2, #0]
 8002272:	6019      	str	r1, [r3, #0]
 8002274:	8892      	ldrh	r2, [r2, #4]
 8002276:	809a      	strh	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	3338      	adds	r3, #56	; 0x38
 800227e:	3238      	adds	r2, #56	; 0x38
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	6019      	str	r1, [r3, #0]
 8002284:	8892      	ldrh	r2, [r2, #4]
 8002286:	809a      	strh	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	649a      	str	r2, [r3, #72]	; 0x48
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <main>:
volatile bool state = true;

char buffer[128];

int main(void)
{
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022bc:	b0fd      	sub	sp, #500	; 0x1f4
 80022be:	af12      	add	r7, sp, #72	; 0x48
  HAL_Init();
 80022c0:	f001 f9e8 	bl	8003694 <HAL_Init>
  SystemClock_Config();
 80022c4:	f000 fb98 	bl	80029f8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80022c8:	f000 fe02 	bl	8002ed0 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80022cc:	f000 fcbc 	bl	8002c48 <_ZL12MX_I2C1_Initv>
  MX_TIM4_Init();
 80022d0:	f000 fd6a 	bl	8002da8 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 80022d4:	f000 fd06 	bl	8002ce4 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 80022d8:	f000 fbfc 	bl	8002ad4 <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 80022dc:	f000 fdc4 	bl	8002e68 <_ZL19MX_USART1_UART_Initv>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022e0:	213c      	movs	r1, #60	; 0x3c
 80022e2:	489c      	ldr	r0, [pc, #624]	; (8002554 <main+0x29c>)
 80022e4:	f004 fe21 	bl	8006f2a <HAL_TIM_Encoder_Start>

  start0.set(GPIOD, GPIO_PIN_0);
 80022e8:	2201      	movs	r2, #1
 80022ea:	499b      	ldr	r1, [pc, #620]	; (8002558 <main+0x2a0>)
 80022ec:	489b      	ldr	r0, [pc, #620]	; (800255c <main+0x2a4>)
 80022ee:	f7ff fc94 	bl	8001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>
  fault0.set(GPIOC, GPIO_PIN_0);
 80022f2:	2201      	movs	r2, #1
 80022f4:	499a      	ldr	r1, [pc, #616]	; (8002560 <main+0x2a8>)
 80022f6:	489b      	ldr	r0, [pc, #620]	; (8002564 <main+0x2ac>)
 80022f8:	f7ff fc8f 	bl	8001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>
  start1.set(GPIOD, GPIO_PIN_1);
 80022fc:	2202      	movs	r2, #2
 80022fe:	4996      	ldr	r1, [pc, #600]	; (8002558 <main+0x2a0>)
 8002300:	4899      	ldr	r0, [pc, #612]	; (8002568 <main+0x2b0>)
 8002302:	f7ff fc8a 	bl	8001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>
  fault1.set(GPIOC, GPIO_PIN_1);
 8002306:	2202      	movs	r2, #2
 8002308:	4995      	ldr	r1, [pc, #596]	; (8002560 <main+0x2a8>)
 800230a:	4898      	ldr	r0, [pc, #608]	; (800256c <main+0x2b4>)
 800230c:	f7ff fc85 	bl	8001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>
  buzzer.set(GPIOE, GPIO_PIN_2);
 8002310:	2204      	movs	r2, #4
 8002312:	4997      	ldr	r1, [pc, #604]	; (8002570 <main+0x2b8>)
 8002314:	4897      	ldr	r0, [pc, #604]	; (8002574 <main+0x2bc>)
 8002316:	f7ff fc80 	bl	8001c1a <_ZN3Pin3setEP12GPIO_TypeDeft>
  // Varian TV301
  tphv = TurboPump(start0, fault0, 4.3, 960, 10, "P0", &pirani);
 800231a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800231e:	4618      	mov	r0, r3
 8002320:	f005 ff09 	bl	8008136 <_ZNSaIcEC1Ev>
 8002324:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002328:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800232c:	4992      	ldr	r1, [pc, #584]	; (8002578 <main+0x2c0>)
 800232e:	4618      	mov	r0, r3
 8002330:	f006 f8fe 	bl	8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002334:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <main+0x2ac>)
 8002336:	4989      	ldr	r1, [pc, #548]	; (800255c <main+0x2a4>)
 8002338:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800233c:	4a8f      	ldr	r2, [pc, #572]	; (800257c <main+0x2c4>)
 800233e:	9202      	str	r2, [sp, #8]
 8002340:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8002350:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8002580 <main+0x2c8>
 8002354:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8002584 <main+0x2cc>
 8002358:	c906      	ldmia	r1, {r1, r2}
 800235a:	f7ff fd91 	bl	8001e80 <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani>
 800235e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002362:	4619      	mov	r1, r3
 8002364:	4888      	ldr	r0, [pc, #544]	; (8002588 <main+0x2d0>)
 8002366:	f7ff ff6c 	bl	8002242 <_ZN9TurboPumpaSEOS_>
 800236a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff2e 	bl	80021d0 <_ZN9TurboPumpD1Ev>
 8002374:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002378:	4618      	mov	r0, r3
 800237a:	f005 ff87 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800237e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002382:	4618      	mov	r0, r3
 8002384:	f005 fed8 	bl	8008138 <_ZNSaIcED1Ev>

  // Turbovac
  tpuhv = TurboPump(start1, fault1, 4.3, 1200, 10, "P1", &pirani);
 8002388:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800238c:	4618      	mov	r0, r3
 800238e:	f005 fed2 	bl	8008136 <_ZNSaIcEC1Ev>
 8002392:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8002396:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239a:	497c      	ldr	r1, [pc, #496]	; (800258c <main+0x2d4>)
 800239c:	4618      	mov	r0, r3
 800239e:	f006 f8c7 	bl	8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <main+0x2b4>)
 80023a4:	4970      	ldr	r1, [pc, #448]	; (8002568 <main+0x2b0>)
 80023a6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80023aa:	4a74      	ldr	r2, [pc, #464]	; (800257c <main+0x2c4>)
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80023b2:	9201      	str	r2, [sp, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023be:	eddf 0a74 	vldr	s1, [pc, #464]	; 8002590 <main+0x2d8>
 80023c2:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002584 <main+0x2cc>
 80023c6:	c906      	ldmia	r1, {r1, r2}
 80023c8:	f7ff fd5a 	bl	8001e80 <_ZN9TurboPumpC1E3PinS0_fffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6Pirani>
 80023cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023d0:	4619      	mov	r1, r3
 80023d2:	4870      	ldr	r0, [pc, #448]	; (8002594 <main+0x2dc>)
 80023d4:	f7ff ff35 	bl	8002242 <_ZN9TurboPumpaSEOS_>
 80023d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fef7 	bl	80021d0 <_ZN9TurboPumpD1Ev>
 80023e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 ff50 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 fea1 	bl	8008138 <_ZNSaIcED1Ev>

  display.addLCD(hi2c1, 0x4E);
 80023f6:	4e68      	ldr	r6, [pc, #416]	; (8002598 <main+0x2e0>)
 80023f8:	234e      	movs	r3, #78	; 0x4e
 80023fa:	9310      	str	r3, [sp, #64]	; 0x40
 80023fc:	466d      	mov	r5, sp
 80023fe:	f106 040c 	add.w	r4, r6, #12
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002412:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002416:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800241a:	4860      	ldr	r0, [pc, #384]	; (800259c <main+0x2e4>)
 800241c:	f7fe fcb4 	bl	8000d88 <_ZN7Display6addLCDE19__I2C_HandleTypeDeft>
  display.addTP(&tphv, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	4959      	ldr	r1, [pc, #356]	; (8002588 <main+0x2d0>)
 8002424:	485d      	ldr	r0, [pc, #372]	; (800259c <main+0x2e4>)
 8002426:	f7fe fce7 	bl	8000df8 <_ZN7Display5addTPEP9TurboPumpi>
  display.addTP(&tpuhv, 1);
 800242a:	2201      	movs	r2, #1
 800242c:	4959      	ldr	r1, [pc, #356]	; (8002594 <main+0x2dc>)
 800242e:	485b      	ldr	r0, [pc, #364]	; (800259c <main+0x2e4>)
 8002430:	f7fe fce2 	bl	8000df8 <_ZN7Display5addTPEP9TurboPumpi>
  display.addPS(&pirani);
 8002434:	4951      	ldr	r1, [pc, #324]	; (800257c <main+0x2c4>)
 8002436:	4859      	ldr	r0, [pc, #356]	; (800259c <main+0x2e4>)
 8002438:	f7fe fcf9 	bl	8000e2e <_ZN7Display5addPSEP6Pirani>

  uint32_t lastVal, curVal = 200;
 800243c:	23c8      	movs	r3, #200	; 0xc8
 800243e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  TIM4->CNT = 200;
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <main+0x2e8>)
 8002444:	22c8      	movs	r2, #200	; 0xc8
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
  lastVal = curVal;
 8002448:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800244c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

  while (1)
  {
	  uint32_t currentTick = HAL_GetTick();
 8002450:	f001 f97a 	bl	8003748 <HAL_GetTick>
 8002454:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

	  // Get the ADC values
  	  if (fabsf(currentTick - lastADC) > 50)
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <main+0x2ec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80025a8 <main+0x2f0>
 800246e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	f340 80cb 	ble.w	8002610 <main+0x358>
  	  {
  		  for (int i = 0; i < 4; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002480:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002484:	2b03      	cmp	r3, #3
 8002486:	dc1b      	bgt.n	80024c0 <main+0x208>
  		  {
  			   HAL_ADC_Start(&hadc1);
 8002488:	4848      	ldr	r0, [pc, #288]	; (80025ac <main+0x2f4>)
 800248a:	f001 fb6d 	bl	8003b68 <HAL_ADC_Start>
  			   HAL_ADC_PollForConversion(&hadc1, 1);
 800248e:	2101      	movs	r1, #1
 8002490:	4846      	ldr	r0, [pc, #280]	; (80025ac <main+0x2f4>)
 8002492:	f001 fc7f 	bl	8003d94 <HAL_ADC_PollForConversion>
  			   adc_value[i] += HAL_ADC_GetValue(&hadc1);
 8002496:	4845      	ldr	r0, [pc, #276]	; (80025ac <main+0x2f4>)
 8002498:	f001 fd7e 	bl	8003f98 <HAL_ADC_GetValue>
 800249c:	4602      	mov	r2, r0
 800249e:	4944      	ldr	r1, [pc, #272]	; (80025b0 <main+0x2f8>)
 80024a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024a8:	441a      	add	r2, r3
 80024aa:	4941      	ldr	r1, [pc, #260]	; (80025b0 <main+0x2f8>)
 80024ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		  for (int i = 0; i < 4; i++)
 80024b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024b8:	3301      	adds	r3, #1
 80024ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024be:	e7df      	b.n	8002480 <main+0x1c8>
  		  }

  		  lastADC = currentTick;
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <main+0x2ec>)
 80024c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024c6:	6013      	str	r3, [r2, #0]
  		  averages++;
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <main+0x2fc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <main+0x2fc>)
 80024d0:	6013      	str	r3, [r2, #0]
  		  if (averages == AVG)
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <main+0x2fc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	f040 809a 	bne.w	8002610 <main+0x358>
  		  {
  			  for (int i = 0; i < 3; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	dc21      	bgt.n	800252e <main+0x276>
  			  {
  				  voltage_value[i] = ConvertToVoltage(adc_value[i] / AVG, adc_value[3] / AVG);
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <main+0x2f8>)
 80024ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <main+0x300>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	089a      	lsrs	r2, r3, #2
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <main+0x2f8>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	492d      	ldr	r1, [pc, #180]	; (80025b8 <main+0x300>)
 8002502:	fba1 1303 	umull	r1, r3, r1, r3
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 f9f4 	bl	80028f8 <_ZL16ConvertToVoltagemm>
 8002510:	eef0 7a40 	vmov.f32	s15, s0
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <main+0x304>)
 8002516:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	edc3 7a00 	vstr	s15, [r3]
  			  for (int i = 0; i < 3; i++)
 8002522:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002526:	3301      	adds	r3, #1
 8002528:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800252c:	e7d9      	b.n	80024e2 <main+0x22a>
  			  }
  			  for (int i = 0; i < 4; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002534:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002538:	2b03      	cmp	r3, #3
 800253a:	dc41      	bgt.n	80025c0 <main+0x308>
  			  {
  				  adc_value[i] = 0;
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <main+0x2f8>)
 800253e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002542:	2100      	movs	r1, #0
 8002544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			  for (int i = 0; i < 4; i++)
 8002548:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800254c:	3301      	adds	r3, #1
 800254e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002552:	e7ef      	b.n	8002534 <main+0x27c>
 8002554:	200002a0 	.word	0x200002a0
 8002558:	48000c00 	.word	0x48000c00
 800255c:	200003c4 	.word	0x200003c4
 8002560:	48000800 	.word	0x48000800
 8002564:	200003cc 	.word	0x200003cc
 8002568:	200003d4 	.word	0x200003d4
 800256c:	200003dc 	.word	0x200003dc
 8002570:	48001000 	.word	0x48001000
 8002574:	200003e4 	.word	0x200003e4
 8002578:	0800c6f4 	.word	0x0800c6f4
 800257c:	200003ec 	.word	0x200003ec
 8002580:	44700000 	.word	0x44700000
 8002584:	4089999a 	.word	0x4089999a
 8002588:	2000041c 	.word	0x2000041c
 800258c:	0800c6f8 	.word	0x0800c6f8
 8002590:	44960000 	.word	0x44960000
 8002594:	2000046c 	.word	0x2000046c
 8002598:	20000254 	.word	0x20000254
 800259c:	200004ec 	.word	0x200004ec
 80025a0:	40000800 	.word	0x40000800
 80025a4:	200004dc 	.word	0x200004dc
 80025a8:	42480000 	.word	0x42480000
 80025ac:	20000204 	.word	0x20000204
 80025b0:	200004bc 	.word	0x200004bc
 80025b4:	200004cc 	.word	0x200004cc
 80025b8:	cccccccd 	.word	0xcccccccd
 80025bc:	200004d0 	.word	0x200004d0
  			  }
  			  averages = 0;
 80025c0:	4bb8      	ldr	r3, [pc, #736]	; (80028a4 <main+0x5ec>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

  			  pirani.update(voltage_value[0]);
 80025c6:	4bb8      	ldr	r3, [pc, #736]	; (80028a8 <main+0x5f0>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	48b6      	ldr	r0, [pc, #728]	; (80028ac <main+0x5f4>)
 80025d2:	f7ff fb91 	bl	8001cf8 <_ZN6Pirani6updateEf>
  			  tphv.update(voltage_value[1]);
 80025d6:	4bb4      	ldr	r3, [pc, #720]	; (80028a8 <main+0x5f0>)
 80025d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	48b3      	ldr	r0, [pc, #716]	; (80028b0 <main+0x5f8>)
 80025e2:	f7ff fcb5 	bl	8001f50 <_ZN9TurboPump6updateEf>
  			  tpuhv.update(voltage_value[2]);
 80025e6:	4bb0      	ldr	r3, [pc, #704]	; (80028a8 <main+0x5f0>)
 80025e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ec:	eeb0 0a67 	vmov.f32	s0, s15
 80025f0:	48b0      	ldr	r0, [pc, #704]	; (80028b4 <main+0x5fc>)
 80025f2:	f7ff fcad 	bl	8001f50 <_ZN9TurboPump6updateEf>
  			  // Start the pumps if the pressure allows it
  			  if (starting)
 80025f6:	4bb0      	ldr	r3, [pc, #704]	; (80028b8 <main+0x600>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <main+0x358>
  			  {
  				  tphv.start();
 80025fe:	48ac      	ldr	r0, [pc, #688]	; (80028b0 <main+0x5f8>)
 8002600:	f7ff fd3a 	bl	8002078 <_ZN9TurboPump5startEv>
  				  tpuhv.start();
 8002604:	48ab      	ldr	r0, [pc, #684]	; (80028b4 <main+0x5fc>)
 8002606:	f7ff fd37 	bl	8002078 <_ZN9TurboPump5startEv>
  				  starting = false;
 800260a:	4bab      	ldr	r3, [pc, #684]	; (80028b8 <main+0x600>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]

  		  }
  	  }

  	  // Update the display 5 times per second
  	  if (fabsf(currentTick - lastLCD) > 200)
 8002610:	4baa      	ldr	r3, [pc, #680]	; (80028bc <main+0x604>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80028c0 <main+0x608>
 8002626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	dd06      	ble.n	800263e <main+0x386>
  	  {
  		  display.display();
 8002630:	48a4      	ldr	r0, [pc, #656]	; (80028c4 <main+0x60c>)
 8002632:	f7fe fedb 	bl	80013ec <_ZN7Display7displayEv>
  		  lastLCD = currentTick;
 8002636:	4aa1      	ldr	r2, [pc, #644]	; (80028bc <main+0x604>)
 8002638:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800263c:	6013      	str	r3, [r2, #0]
  	  }

  	  // Check for faults
  	  fault = display.hasFault();
 800263e:	48a1      	ldr	r0, [pc, #644]	; (80028c4 <main+0x60c>)
 8002640:	f7fe ff79 	bl	8001536 <_ZN7Display8hasFaultEv>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b9f      	ldr	r3, [pc, #636]	; (80028c8 <main+0x610>)
 800264a:	701a      	strb	r2, [r3, #0]
  	  // Deal with the buzzer
  	  if (fault)
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <main+0x610>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <main+0x3de>
  	  {
  		  if(fabsf(currentTick - lastBuzzer) > 1000)
 8002654:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <main+0x614>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80028d0 <main+0x618>
 800266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	dd1d      	ble.n	80026b0 <main+0x3f8>
  		  {
  			  HAL_GPIO_TogglePin(buzzer.port(), buzzer.pin());
 8002674:	4897      	ldr	r0, [pc, #604]	; (80028d4 <main+0x61c>)
 8002676:	f7ff fae3 	bl	8001c40 <_ZN3Pin4portEv>
 800267a:	4604      	mov	r4, r0
 800267c:	4895      	ldr	r0, [pc, #596]	; (80028d4 <main+0x61c>)
 800267e:	f7ff faeb 	bl	8001c58 <_ZN3Pin3pinEv>
 8002682:	4603      	mov	r3, r0
 8002684:	4619      	mov	r1, r3
 8002686:	4620      	mov	r0, r4
 8002688:	f002 fbf8 	bl	8004e7c <HAL_GPIO_TogglePin>
  			  lastBuzzer = currentTick;
 800268c:	4a8f      	ldr	r2, [pc, #572]	; (80028cc <main+0x614>)
 800268e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e00c      	b.n	80026b0 <main+0x3f8>
  		  }
  	  }
  	  else
  	  {
  		  HAL_GPIO_WritePin(buzzer.port(),
 8002696:	488f      	ldr	r0, [pc, #572]	; (80028d4 <main+0x61c>)
 8002698:	f7ff fad2 	bl	8001c40 <_ZN3Pin4portEv>
 800269c:	4604      	mov	r4, r0
 800269e:	488d      	ldr	r0, [pc, #564]	; (80028d4 <main+0x61c>)
 80026a0:	f7ff fada 	bl	8001c58 <_ZN3Pin3pinEv>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2200      	movs	r2, #0
 80026a8:	4619      	mov	r1, r3
 80026aa:	4620      	mov	r0, r4
 80026ac:	f002 fbce 	bl	8004e4c <HAL_GPIO_WritePin>
  				  	  	  	  buzzer.pin(), GPIO_PIN_RESET);
  	  }

  	  // Rotary encoder
  	  curVal = TIM4->CNT;
 80026b0:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <main+0x620>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  	  if (curVal > lastVal)
 80026b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d907      	bls.n	80026d4 <main+0x41c>
	  {
  		  display.up();
 80026c4:	487f      	ldr	r0, [pc, #508]	; (80028c4 <main+0x60c>)
 80026c6:	f7fe fdcd 	bl	8001264 <_ZN7Display2upEv>
  		  lastVal = curVal;
 80026ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026d2:	e00c      	b.n	80026ee <main+0x436>
	  }
  	  else if (curVal < lastVal)
 80026d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026dc:	429a      	cmp	r2, r3
 80026de:	d206      	bcs.n	80026ee <main+0x436>
      {
  		  display.down();
 80026e0:	4878      	ldr	r0, [pc, #480]	; (80028c4 <main+0x60c>)
 80026e2:	f7fe fdf0 	bl	80012c6 <_ZN7Display4downEv>
  		  lastVal = curVal;
 80026e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  	  }

  	  // Push button
	  if (counter != lastCounter)
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <main+0x624>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <main+0x628>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d006      	beq.n	8002708 <main+0x450>
	  {
		 display.pushDown();
 80026fa:	4872      	ldr	r0, [pc, #456]	; (80028c4 <main+0x60c>)
 80026fc:	f7fe fe14 	bl	8001328 <_ZN7Display8pushDownEv>
		 lastCounter = counter;
 8002700:	4b76      	ldr	r3, [pc, #472]	; (80028dc <main+0x624>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a76      	ldr	r2, [pc, #472]	; (80028e0 <main+0x628>)
 8002706:	6013      	str	r3, [r2, #0]
	  }

	  // Send the status by serial
	  if (fabsf(currentTick - lastSerial) > TRANSMIT_INT)
 8002708:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <main+0x62c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80028e8 <main+0x630>
 800271e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	f340 80bc 	ble.w	80028a2 <main+0x5ea>
	  {
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
			pirani.getLabel().c_str(), !pirani.hasFault(),
 800272a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800272e:	495f      	ldr	r1, [pc, #380]	; (80028ac <main+0x5f4>)
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fa89 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 8002736:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fe9e 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002740:	61f8      	str	r0, [r7, #28]
			pirani.getLabel().c_str(), !pirani.hasFault(),
 8002742:	485a      	ldr	r0, [pc, #360]	; (80028ac <main+0x5f4>)
 8002744:	f7fe fa8f 	bl	8000c66 <_ZN6Device8hasFaultEv>
 8002748:	4603      	mov	r3, r0
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 8002750:	61bb      	str	r3, [r7, #24]
			pirani.getValue(), pirani.getUnit().c_str(),
 8002752:	4856      	ldr	r0, [pc, #344]	; (80028ac <main+0x5f4>)
 8002754:	f7ff fb18 	bl	8001d88 <_ZN6Pirani8getValueEv>
 8002758:	ee10 3a10 	vmov	r3, s0
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	4680      	mov	r8, r0
 8002764:	4689      	mov	r9, r1
			pirani.getValue(), pirani.getUnit().c_str(),
 8002766:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800276a:	4950      	ldr	r1, [pc, #320]	; (80028ac <main+0x5f4>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb1b 	bl	8001da8 <_ZN6Pirani7getUnitB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 8002772:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002776:	4618      	mov	r0, r3
 8002778:	f005 fe80 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800277c:	6178      	str	r0, [r7, #20]
			tphv.getLabel().c_str(), tphv.isRunning(),
 800277e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002782:	494b      	ldr	r1, [pc, #300]	; (80028b0 <main+0x5f8>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fa5f 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 800278a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fe74 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002794:	6138      	str	r0, [r7, #16]
			tphv.getLabel().c_str(), tphv.isRunning(),
 8002796:	4846      	ldr	r0, [pc, #280]	; (80028b0 <main+0x5f8>)
 8002798:	f7ff fce6 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 800279c:	4603      	mov	r3, r0
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 800279e:	60fb      	str	r3, [r7, #12]
			tphv.getValue(),tphv.getUnit().c_str(),
 80027a0:	4843      	ldr	r0, [pc, #268]	; (80028b0 <main+0x5f8>)
 80027a2:	f7ff fbfd 	bl	8001fa0 <_ZN9TurboPump8getValueEv>
 80027a6:	ee10 3a10 	vmov	r3, s0
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fecc 	bl	8000548 <__aeabi_f2d>
 80027b0:	4682      	mov	sl, r0
 80027b2:	468b      	mov	fp, r1
			tphv.getValue(),tphv.getUnit().c_str(),
 80027b4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80027b8:	493d      	ldr	r1, [pc, #244]	; (80028b0 <main+0x5f8>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fcb8 	bl	8002130 <_ZN9TurboPump7getUnitB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 80027c0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80027c4:	4618      	mov	r0, r3
 80027c6:	f005 fe59 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80027ca:	60b8      	str	r0, [r7, #8]
			tpuhv.getLabel().c_str(), tpuhv.isRunning(),
 80027cc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80027d0:	4938      	ldr	r1, [pc, #224]	; (80028b4 <main+0x5fc>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fa38 	bl	8000c48 <_ZN6Device8getLabelB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 80027d8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 fe4d 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80027e2:	4606      	mov	r6, r0
			tpuhv.getLabel().c_str(), tpuhv.isRunning(),
 80027e4:	4833      	ldr	r0, [pc, #204]	; (80028b4 <main+0x5fc>)
 80027e6:	f7ff fcbf 	bl	8002168 <_ZN9TurboPump9isRunningEv>
 80027ea:	4603      	mov	r3, r0
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 80027ec:	607b      	str	r3, [r7, #4]
			tpuhv.getValue(), tpuhv.getUnit().c_str());
 80027ee:	4831      	ldr	r0, [pc, #196]	; (80028b4 <main+0x5fc>)
 80027f0:	f7ff fbd6 	bl	8001fa0 <_ZN9TurboPump8getValueEv>
 80027f4:	ee10 3a10 	vmov	r3, s0
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fea5 	bl	8000548 <__aeabi_f2d>
 80027fe:	4604      	mov	r4, r0
 8002800:	460d      	mov	r5, r1
			tpuhv.getValue(), tpuhv.getUnit().c_str());
 8002802:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002806:	492b      	ldr	r1, [pc, #172]	; (80028b4 <main+0x5fc>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fc91 	bl	8002130 <_ZN9TurboPump7getUnitB5cxx11Ev>
		  int size = sprintf(buffer, "%s-%d: %.5f %s, %s-%d %.1f %s, %s-%d: %.1f %s\r\n",
 800280e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002812:	4618      	mov	r0, r3
 8002814:	f005 fe32 	bl	800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002818:	4603      	mov	r3, r0
 800281a:	930e      	str	r3, [sp, #56]	; 0x38
 800281c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	910a      	str	r1, [sp, #40]	; 0x28
 8002824:	9609      	str	r6, [sp, #36]	; 0x24
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	9108      	str	r1, [sp, #32]
 800282a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	9104      	str	r1, [sp, #16]
 8002832:	6939      	ldr	r1, [r7, #16]
 8002834:	9103      	str	r1, [sp, #12]
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	9102      	str	r1, [sp, #8]
 800283a:	e9cd 8900 	strd	r8, r9, [sp]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	492a      	ldr	r1, [pc, #168]	; (80028ec <main+0x634>)
 8002844:	482a      	ldr	r0, [pc, #168]	; (80028f0 <main+0x638>)
 8002846:	f007 fddb 	bl	800a400 <siprintf>
 800284a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			tpuhv.getValue(), tpuhv.getUnit().c_str());
 800284e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002852:	4618      	mov	r0, r3
 8002854:	f005 fd1a 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			tpuhv.getLabel().c_str(), tpuhv.isRunning(),
 8002858:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800285c:	4618      	mov	r0, r3
 800285e:	f005 fd15 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			tphv.getValue(),tphv.getUnit().c_str(),
 8002862:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002866:	4618      	mov	r0, r3
 8002868:	f005 fd10 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			tphv.getLabel().c_str(), tphv.isRunning(),
 800286c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002870:	4618      	mov	r0, r3
 8002872:	f005 fd0b 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			pirani.getValue(), pirani.getUnit().c_str(),
 8002876:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800287a:	4618      	mov	r0, r3
 800287c:	f005 fd06 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			pirani.getLabel().c_str(), !pirani.hasFault(),
 8002880:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002884:	4618      	mov	r0, r3
 8002886:	f005 fd01 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, size, 100);
 800288a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800288e:	b29a      	uxth	r2, r3
 8002890:	2364      	movs	r3, #100	; 0x64
 8002892:	4917      	ldr	r1, [pc, #92]	; (80028f0 <main+0x638>)
 8002894:	4817      	ldr	r0, [pc, #92]	; (80028f4 <main+0x63c>)
 8002896:	f005 f823 	bl	80078e0 <HAL_UART_Transmit>
		  lastSerial = currentTick;
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <main+0x62c>)
 800289c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028a0:	6013      	str	r3, [r2, #0]
	  }

   }
 80028a2:	e5d5      	b.n	8002450 <main+0x198>
 80028a4:	200004cc 	.word	0x200004cc
 80028a8:	200004d0 	.word	0x200004d0
 80028ac:	200003ec 	.word	0x200003ec
 80028b0:	2000041c 	.word	0x2000041c
 80028b4:	2000046c 	.word	0x2000046c
 80028b8:	20000000 	.word	0x20000000
 80028bc:	200004e0 	.word	0x200004e0
 80028c0:	43480000 	.word	0x43480000
 80028c4:	200004ec 	.word	0x200004ec
 80028c8:	20000548 	.word	0x20000548
 80028cc:	200004e8 	.word	0x200004e8
 80028d0:	447a0000 	.word	0x447a0000
 80028d4:	200003e4 	.word	0x200003e4
 80028d8:	40000800 	.word	0x40000800
 80028dc:	200003bc 	.word	0x200003bc
 80028e0:	200003c0 	.word	0x200003c0
 80028e4:	200004e4 	.word	0x200004e4
 80028e8:	44fa0000 	.word	0x44fa0000
 80028ec:	0800c6fc 	.word	0x0800c6fc
 80028f0:	2000054c 	.word	0x2000054c
 80028f4:	20000338 	.word	0x20000338

080028f8 <_ZL16ConvertToVoltagemm>:
}

float ConvertToVoltage(uint32_t adc_value, uint32_t cal_value)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
	// Convert the ADC to a voltage using the voltage reference
	return VREF * (float)(adc_value) / cal_value;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290c:	ee17 0a90 	vmov	r0, s15
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	a310      	add	r3, pc, #64	; (adr r3, 8002958 <_ZL16ConvertToVoltagemm+0x60>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fe6d 	bl	80005f8 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f7fd fdec 	bl	8000504 <__aeabi_ui2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd ff8a 	bl	800084c <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f932 	bl	8000ba8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	ee07 3a90 	vmov	s15, r3
}
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bdb0      	pop	{r4, r5, r7, pc}
 8002954:	f3af 8000 	nop.w
 8002958:	f5c28f5c 	.word	0xf5c28f5c
 800295c:	40035c28 	.word	0x40035c28

08002960 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
	// When the button is pressed start the timer to debounce it
	if(GPIO_Pin == GPIO_PIN_14 && state)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002970:	d106      	bne.n	8002980 <HAL_GPIO_EXTI_Callback+0x20>
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_GPIO_EXTI_Callback+0x20>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_EXTI_Callback+0x22>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_GPIO_EXTI_Callback+0x34>
    {
		HAL_TIM_Base_Start_IT(&htim1);
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002988:	f004 f990 	bl	8006cac <HAL_TIM_Base_Start_IT>
		state = false;
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP();
  	}
}
 8002992:	e000      	b.n	8002996 <HAL_GPIO_EXTI_Callback+0x36>
		__NOP();
 8002994:	bf00      	nop
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000001 	.word	0x20000001
 80029a4:	200002ec 	.word	0x200002ec

080029a8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	// Increment the counter for the button
	UNUSED(htim);
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET)
 80029b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029b6:	f002 fa31 	bl	8004e1c <HAL_GPIO_ReadPin>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		counter++;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029d2:	6013      	str	r3, [r2, #0]
		state = true;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029dc:	f004 f9d0 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
	}
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	48000c00 	.word	0x48000c00
 80029ec:	200003bc 	.word	0x200003bc
 80029f0:	20000001 	.word	0x20000001
 80029f4:	200002ec 	.word	0x200002ec

080029f8 <_Z18SystemClock_Configv>:
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09e      	sub	sp, #120	; 0x78
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a02:	2228      	movs	r2, #40	; 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 ff8a 	bl	8009920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 ff7c 	bl	8009920 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a30:	2310      	movs	r3, #16
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a34:	2302      	movs	r3, #2
 8002a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002a3c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002a40:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fdea 	bl	8005620 <HAL_RCC_OscConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8002a5c:	f000 fac8 	bl	8002ff0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a60:	230f      	movs	r3, #15
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a64:	2302      	movs	r3, #2
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fcd7 	bl	8006430 <HAL_RCC_ClockConfig>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002a92:	f000 faad 	bl	8002ff0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002a96:	f241 03a1 	movw	r3, #4257	; 0x10a1
 8002a9a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aae:	463b      	mov	r3, r7
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fef3 	bl	800689c <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8002ac6:	f000 fa93 	bl	8002ff0 <Error_Handler>
  }
}
 8002aca:	bf00      	nop
 8002acc:	3778      	adds	r7, #120	; 0x78
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <_ZL12MX_ADC1_Initv>:



static void MX_ADC1_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0

  ADC_MultiModeTypeDef multimode = {0};
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
 8002af4:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002af8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002afc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b30:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b44:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b50:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b56:	483b      	ldr	r0, [pc, #236]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b58:	f000 fe26 	bl	80037a8 <HAL_ADC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8002b6c:	f000 fa40 	bl	8002ff0 <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4832      	ldr	r0, [pc, #200]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002b7c:	f001 fd06 	bl	800458c <HAL_ADCEx_MultiModeConfigChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8002b90:	f000 fa2e 	bl	8002ff0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4824      	ldr	r0, [pc, #144]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002bb2:	f001 f9ff 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8002bc6:	f000 fa13 	bl	8002ff0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_2;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481b      	ldr	r0, [pc, #108]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002bd8:	f001 f9ec 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8002bec:	f000 fa00 	bl	8002ff0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4811      	ldr	r0, [pc, #68]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002bfe:	f001 f9d9 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <_ZL12MX_ADC1_Initv+0x142>
  {
    Error_Handler();
 8002c12:	f000 f9ed 	bl	8002ff0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_4;
 8002c16:	2304      	movs	r3, #4
 8002c18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4808      	ldr	r0, [pc, #32]	; (8002c44 <_ZL12MX_ADC1_Initv+0x170>)
 8002c24:	f001 f9c6 	bl	8003fb4 <HAL_ADC_ConfigChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <_ZL12MX_ADC1_Initv+0x168>
  {
    Error_Handler();
 8002c38:	f000 f9da 	bl	8002ff0 <Error_Handler>
  }

}
 8002c3c:	bf00      	nop
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000204 	.word	0x20000204

08002c48 <_ZL12MX_I2C1_Initv>:

static void MX_I2C1_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <_ZL12MX_I2C1_Initv+0x94>)
 8002c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <_ZL12MX_I2C1_Initv+0x98>)
 8002c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002c84:	f002 f92c 	bl	8004ee0 <HAL_I2C_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002c98:	f000 f9aa 	bl	8002ff0 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002ca0:	f002 fc26 	bl	80054f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002cb4:	f000 f99c 	bl	8002ff0 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <_ZL12MX_I2C1_Initv+0x90>)
 8002cbc:	f002 fc63 	bl	8005586 <HAL_I2CEx_ConfigDigitalFilter>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002cd0:	f000 f98e 	bl	8002ff0 <Error_Handler>
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000254 	.word	0x20000254
 8002cdc:	40005400 	.word	0x40005400
 8002ce0:	2000090e 	.word	0x2000090e

08002ce4 <_ZL12MX_TIM1_Initv>:

static void MX_TIM1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]


  htim1.Instance = TIM1;
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <_ZL12MX_TIM1_Initv+0xc0>)
 8002d06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d0a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30;
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d18:	221e      	movs	r2, #30
 8002d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d2e:	481c      	ldr	r0, [pc, #112]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d30:	f003 ff64 	bl	8006bfc <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002d44:	f000 f954 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4619      	mov	r1, r3
 8002d54:	4812      	ldr	r0, [pc, #72]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d56:	f004 fa95 	bl	8007284 <HAL_TIM_ConfigClockSource>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8002d6a:	f000 f941 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002d80:	f004 fcc2 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002d94:	f000 f92c 	bl	8002ff0 <Error_Handler>
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200002ec 	.word	0x200002ec
 8002da4:	40012c00 	.word	0x40012c00

08002da8 <_ZL12MX_TIM4_Initv>:

static void MX_TIM4_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 fdb2 	bl	8009920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <_ZL12MX_TIM4_Initv+0xbc>)
 8002dca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002df0:	2302      	movs	r3, #2
 8002df2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002df4:	2301      	movs	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002e00:	2302      	movs	r3, #2
 8002e02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e04:	2301      	movs	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002e0c:	230a      	movs	r3, #10
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	4812      	ldr	r0, [pc, #72]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002e18:	f003 ffe1 	bl	8006dde <HAL_TIM_Encoder_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8002e2c:	f000 f8e0 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4808      	ldr	r0, [pc, #32]	; (8002e60 <_ZL12MX_TIM4_Initv+0xb8>)
 8002e3e:	f004 fc63 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8002e52:	f000 f8cd 	bl	8002ff0 <Error_Handler>
  }


}
 8002e56:	bf00      	nop
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200002a0 	.word	0x200002a0
 8002e64:	40000800 	.word	0x40000800

08002e68 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <_ZL19MX_USART1_UART_Initv+0x64>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eaa:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002eac:	f004 fcca 	bl	8007844 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002ec0:	f000 f896 	bl	8002ff0 <Error_Handler>
  }

}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000338 	.word	0x20000338
 8002ecc:	40013800 	.word	0x40013800

08002ed0 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ef0:	6153      	str	r3, [r2, #20]
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f08:	6153      	str	r3, [r2, #20]
 8002f0a:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4a31      	ldr	r2, [pc, #196]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f20:	6153      	str	r3, [r2, #20]
 8002f22:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f38:	6153      	str	r3, [r2, #20]
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <_ZL12MX_GPIO_Initv+0x110>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2104      	movs	r1, #4
 8002f4a:	4826      	ldr	r0, [pc, #152]	; (8002fe4 <_ZL12MX_GPIO_Initv+0x114>)
 8002f4c:	f001 ff7e 	bl	8004e4c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOD, PUMP0_START_Pin|PUMP1_START_Pin, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2103      	movs	r1, #3
 8002f54:	4824      	ldr	r0, [pc, #144]	; (8002fe8 <_ZL12MX_GPIO_Initv+0x118>)
 8002f56:	f001 ff79 	bl	8004e4c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4619      	mov	r1, r3
 8002f70:	481c      	ldr	r0, [pc, #112]	; (8002fe4 <_ZL12MX_GPIO_Initv+0x114>)
 8002f72:	f001 fdd9 	bl	8004b28 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = PUM0_FAULT_Pin|PUMP1_FAULT_Pin;
 8002f76:	2303      	movs	r3, #3
 8002f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4818      	ldr	r0, [pc, #96]	; (8002fec <_ZL12MX_GPIO_Initv+0x11c>)
 8002f8a:	f001 fdcd 	bl	8004b28 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4810      	ldr	r0, [pc, #64]	; (8002fe8 <_ZL12MX_GPIO_Initv+0x118>)
 8002fa6:	f001 fdbf 	bl	8004b28 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = PUMP0_START_Pin|PUMP1_START_Pin;
 8002faa:	2303      	movs	r3, #3
 8002fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <_ZL12MX_GPIO_Initv+0x118>)
 8002fc2:	f001 fdb1 	bl	8004b28 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2028      	movs	r0, #40	; 0x28
 8002fcc:	f001 fd75 	bl	8004aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fd0:	2028      	movs	r0, #40	; 0x28
 8002fd2:	f001 fd8e 	bl	8004af2 <HAL_NVIC_EnableIRQ>

}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	48001000 	.word	0x48001000
 8002fe8:	48000c00 	.word	0x48000c00
 8002fec:	48000800 	.word	0x48000800

08002ff0 <Error_Handler>:


void Error_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff4:	b672      	cpsid	i
}
 8002ff6:	bf00      	nop

  __disable_irq();
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <Error_Handler+0x8>

08002ffa <_ZN7DisplayD1Ev>:
#pragma once
#include "TurboPump.h"
#include "Pirani.h"
#include "LCDI2C.h"

class Display
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3344      	adds	r3, #68	; 0x44
 8003006:	4618      	mov	r0, r3
 8003008:	f005 f940 	bl	800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <_ZN6PiraniD1Ev>:
 */

#pragma once
#include "Device.h"

class Pirani : public Device
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_ZN6PiraniD1Ev+0x20>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f8bd 	bl	80021a8 <_ZN6DeviceD1Ev>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800c734 	.word	0x0800c734

0800303c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }

}
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d121      	bne.n	8003090 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d11c      	bne.n	8003090 <_Z41__static_initialization_and_destruction_0ii+0x54>
Pin start0, fault0, start1, fault1, buzzer;
 8003056:	481a      	ldr	r0, [pc, #104]	; (80030c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003058:	f7fe fdd4 	bl	8001c04 <_ZN3PinC1Ev>
 800305c:	4819      	ldr	r0, [pc, #100]	; (80030c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800305e:	f7fe fdd1 	bl	8001c04 <_ZN3PinC1Ev>
 8003062:	4819      	ldr	r0, [pc, #100]	; (80030c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003064:	f7fe fdce 	bl	8001c04 <_ZN3PinC1Ev>
 8003068:	4818      	ldr	r0, [pc, #96]	; (80030cc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800306a:	f7fe fdcb 	bl	8001c04 <_ZN3PinC1Ev>
 800306e:	4818      	ldr	r0, [pc, #96]	; (80030d0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003070:	f7fe fdc8 	bl	8001c04 <_ZN3PinC1Ev>
Pirani pirani(4.49);
 8003074:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80030d4 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8003078:	4817      	ldr	r0, [pc, #92]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800307a:	f7fe fe19 	bl	8001cb0 <_ZN6PiraniC1Ef>
TurboPump tphv, tpuhv;
 800307e:	4817      	ldr	r0, [pc, #92]	; (80030dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003080:	f7fe fed0 	bl	8001e24 <_ZN9TurboPumpC1Ev>
 8003084:	4816      	ldr	r0, [pc, #88]	; (80030e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003086:	f7fe fecd 	bl	8001e24 <_ZN9TurboPumpC1Ev>
Display display;
 800308a:	4816      	ldr	r0, [pc, #88]	; (80030e4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800308c:	f7fd fdf8 	bl	8000c80 <_ZN7DisplayC1Ev>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d110      	bne.n	80030b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309c:	4293      	cmp	r3, r2
 800309e:	d10b      	bne.n	80030b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 80030a0:	4810      	ldr	r0, [pc, #64]	; (80030e4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80030a2:	f7ff ffaa 	bl	8002ffa <_ZN7DisplayD1Ev>
TurboPump tphv, tpuhv;
 80030a6:	480e      	ldr	r0, [pc, #56]	; (80030e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80030a8:	f7ff f892 	bl	80021d0 <_ZN9TurboPumpD1Ev>
 80030ac:	480b      	ldr	r0, [pc, #44]	; (80030dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80030ae:	f7ff f88f 	bl	80021d0 <_ZN9TurboPumpD1Ev>
Pirani pirani(4.49);
 80030b2:	4809      	ldr	r0, [pc, #36]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80030b4:	f7ff ffb0 	bl	8003018 <_ZN6PiraniD1Ev>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200003c4 	.word	0x200003c4
 80030c4:	200003cc 	.word	0x200003cc
 80030c8:	200003d4 	.word	0x200003d4
 80030cc:	200003dc 	.word	0x200003dc
 80030d0:	200003e4 	.word	0x200003e4
 80030d4:	408fae14 	.word	0x408fae14
 80030d8:	200003ec 	.word	0x200003ec
 80030dc:	2000041c 	.word	0x2000041c
 80030e0:	2000046c 	.word	0x2000046c
 80030e4:	200004ec 	.word	0x200004ec

080030e8 <_GLOBAL__sub_I_hadc1>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff ffa3 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_GLOBAL__sub_D_hadc1>:
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff ff9b 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_MspInit+0x44>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_MspInit+0x44>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6193      	str	r3, [r2, #24]
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_MspInit+0x44>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_MspInit+0x44>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_MspInit+0x44>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	61d3      	str	r3, [r2, #28]
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_MspInit+0x44>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003170:	d124      	bne.n	80031bc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6153      	str	r3, [r2, #20]
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	6153      	str	r3, [r2, #20]
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_ADC_MspInit+0x74>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Pressure_Pin|PUMP_0_Pin|PUMP_1_Pin|VREF_Pin;
 80031a2:	230f      	movs	r3, #15
 80031a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031a6:	2303      	movs	r3, #3
 80031a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b8:	f001 fcb6 	bl	8004b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000

080031c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_I2C_MspInit+0x80>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d129      	bne.n	800323e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_I2C_MspInit+0x84>)
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_I2C_MspInit+0x84>)
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	6153      	str	r3, [r2, #20]
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_I2C_MspInit+0x84>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003202:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003208:	2312      	movs	r3, #18
 800320a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003214:	2304      	movs	r3, #4
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003222:	f001 fc81 	bl	8004b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_I2C_MspInit+0x84>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_I2C_MspInit+0x84>)
 800322c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_I2C_MspInit+0x84>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40005400 	.word	0x40005400
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_TIM_Base_MspInit+0x74>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_TIM_Base_MspInit+0x78>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_TIM_Base_MspInit+0x78>)
 8003268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800326c:	6193      	str	r3, [r2, #24]
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_TIM_Base_MspInit+0x78>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	2018      	movs	r0, #24
 8003280:	f001 fc1b 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003284:	2018      	movs	r0, #24
 8003286:	f001 fc34 	bl	8004af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	2019      	movs	r0, #25
 8003290:	f001 fc13 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003294:	2019      	movs	r0, #25
 8003296:	f001 fc2c 	bl	8004af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	201a      	movs	r0, #26
 80032a0:	f001 fc0b 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80032a4:	201a      	movs	r0, #26
 80032a6:	f001 fc24 	bl	8004af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	201b      	movs	r0, #27
 80032b0:	f001 fc03 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032b4:	201b      	movs	r0, #27
 80032b6:	f001 fc1c 	bl	8004af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_TIM_Encoder_MspInit+0x7c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d128      	bne.n	8003340 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	61d3      	str	r3, [r2, #28]
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 800330c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003310:	6153      	str	r3, [r2, #20]
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_TIM_Encoder_MspInit+0x80>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_B_Pin|ENCODER_A_Pin;
 800331e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003330:	2302      	movs	r3, #2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <HAL_TIM_Encoder_MspInit+0x84>)
 800333c:	f001 fbf4 	bl	8004b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003340:	bf00      	nop
 8003342:	3728      	adds	r7, #40	; 0x28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40000800 	.word	0x40000800
 800334c:	40021000 	.word	0x40021000
 8003350:	48000c00 	.word	0x48000c00

08003354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_UART_MspInit+0x7c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d127      	bne.n	80033c6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_UART_MspInit+0x80>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_UART_MspInit+0x80>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6193      	str	r3, [r2, #24]
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_UART_MspInit+0x80>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_UART_MspInit+0x80>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_UART_MspInit+0x80>)
 8003394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003398:	6153      	str	r3, [r2, #20]
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_UART_MspInit+0x80>)
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033a6:	2330      	movs	r3, #48	; 0x30
 80033a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b2:	2303      	movs	r3, #3
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033b6:	2307      	movs	r3, #7
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ba:	f107 0314 	add.w	r3, r7, #20
 80033be:	4619      	mov	r1, r3
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <HAL_UART_MspInit+0x84>)
 80033c2:	f001 fbb1 	bl	8004b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033c6:	bf00      	nop
 80033c8:	3728      	adds	r7, #40	; 0x28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40021000 	.word	0x40021000
 80033d8:	48000800 	.word	0x48000800

080033dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <NMI_Handler+0x4>

080033e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <HardFault_Handler+0x4>

080033e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <MemManage_Handler+0x4>

080033ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <BusFault_Handler+0x4>

080033f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <UsageFault_Handler+0x4>

080033fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003428:	f000 f97a 	bl	8003720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}

08003430 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003436:	f003 fe06 	bl	8007046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200002ec 	.word	0x200002ec

08003444 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800344a:	f003 fdfc 	bl	8007046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200002ec 	.word	0x200002ec

08003458 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800345e:	f003 fdf2 	bl	8007046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200002ec 	.word	0x200002ec

0800346c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <TIM1_CC_IRQHandler+0x10>)
 8003472:	f003 fde8 	bl	8007046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200002ec 	.word	0x200002ec

08003480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003488:	f001 fd12 	bl	8004eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}

08003490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	return 1;
 8003494:	2301      	movs	r3, #1
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_kill>:

int _kill(int pid, int sig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034aa:	f006 f9bd 	bl	8009828 <__errno>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2216      	movs	r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
	return -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_exit>:

void _exit (int status)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffe7 	bl	80034a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034d2:	e7fe      	b.n	80034d2 <_exit+0x12>

080034d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e00a      	b.n	80034fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034e6:	f3af 8000 	nop.w
 80034ea:	4601      	mov	r1, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	60ba      	str	r2, [r7, #8]
 80034f2:	b2ca      	uxtb	r2, r1
 80034f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	dbf0      	blt.n	80034e6 <_read+0x12>
	}

return len;
 8003504:	687b      	ldr	r3, [r7, #4]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e009      	b.n	8003534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	60ba      	str	r2, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	dbf1      	blt.n	8003520 <_write+0x12>
	}
	return len;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <_close>:

int _close(int file)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	return -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800356e:	605a      	str	r2, [r3, #4]
	return 0;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <_isatty>:

int _isatty(int file)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
	return 1;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
	return 0;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <_sbrk+0x5c>)
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <_sbrk+0x60>)
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <_sbrk+0x64>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <_sbrk+0x68>)
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e0:	f006 f922 	bl	8009828 <__errno>
 80035e4:	4603      	mov	r3, r0
 80035e6:	220c      	movs	r2, #12
 80035e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ee:	e009      	b.n	8003604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <_sbrk+0x64>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <_sbrk+0x64>)
 8003600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000a000 	.word	0x2000a000
 8003610:	00000400 	.word	0x00000400
 8003614:	200005cc 	.word	0x200005cc
 8003618:	200005f0 	.word	0x200005f0

0800361c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <SystemInit+0x20>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <SystemInit+0x20>)
 8003628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800362c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003678 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003644:	480d      	ldr	r0, [pc, #52]	; (800367c <LoopForever+0x6>)
  ldr r1, =_edata
 8003646:	490e      	ldr	r1, [pc, #56]	; (8003680 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003648:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <LoopForever+0xe>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800364c:	e002      	b.n	8003654 <LoopCopyDataInit>

0800364e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003652:	3304      	adds	r3, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003658:	d3f9      	bcc.n	800364e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365a:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <LoopForever+0x12>)
  ldr r4, =_ebss
 800365c:	4c0b      	ldr	r4, [pc, #44]	; (800368c <LoopForever+0x16>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003660:	e001      	b.n	8003666 <LoopFillZerobss>

08003662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003664:	3204      	adds	r2, #4

08003666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003668:	d3fb      	bcc.n	8003662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800366a:	f7ff ffd7 	bl	800361c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800366e:	f006 f8e1 	bl	8009834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003672:	f7fe fe21 	bl	80022b8 <main>

08003676 <LoopForever>:

LoopForever:
    b LoopForever
 8003676:	e7fe      	b.n	8003676 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003678:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003684:	0800cc6c 	.word	0x0800cc6c
  ldr r2, =_sbss
 8003688:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800368c:	200005f0 	.word	0x200005f0

08003690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC1_2_IRQHandler>
	...

08003694 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_Init+0x28>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <HAL_Init+0x28>)
 800369e:	f043 0310 	orr.w	r3, r3, #16
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a4:	2003      	movs	r0, #3
 80036a6:	f001 f9fd 	bl	8004aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036aa:	200f      	movs	r0, #15
 80036ac:	f000 f808 	bl	80036c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b0:	f7ff fd2a 	bl	8003108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_InitTick+0x54>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x58>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fa15 	bl	8004b0e <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00e      	b.n	800370c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d80a      	bhi.n	800370a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fc:	f001 f9dd 	bl	8004aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_InitTick+0x5c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000004 	.word	0x20000004
 8003718:	2000000c 	.word	0x2000000c
 800371c:	20000008 	.word	0x20000008

08003720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000000c 	.word	0x2000000c
 8003744:	200005dc 	.word	0x200005dc

08003748 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;  
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200005dc 	.word	0x200005dc

08003760 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff ffee 	bl	8003748 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffde 	bl	8003748 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09a      	sub	sp, #104	; 0x68
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e1c9      	b.n	8003b5c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d176      	bne.n	80038c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d152      	bne.n	8003888 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fca7 	bl	8003150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d13b      	bne.n	8003888 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f001 f811 	bl	8004838 <ADC_Disable>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d12f      	bne.n	8003888 <HAL_ADC_Init+0xe0>
 8003828:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12b      	bne.n	8003888 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	f043 0202 	orr.w	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003852:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003862:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003864:	4b86      	ldr	r3, [pc, #536]	; (8003a80 <HAL_ADC_Init+0x2d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a86      	ldr	r2, [pc, #536]	; (8003a84 <HAL_ADC_Init+0x2dc>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	0c9a      	lsrs	r2, r3, #18
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800387a:	e002      	b.n	8003882 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3b01      	subs	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d110      	bne.n	80038c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f023 0312 	bic.w	r3, r3, #18
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8136 	bne.w	8003b42 <HAL_ADC_Init+0x39a>
 80038d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 8131 	bne.w	8003b42 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8129 	bne.w	8003b42 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003908:	d004      	beq.n	8003914 <HAL_ADC_Init+0x16c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <HAL_ADC_Init+0x2e0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_Init+0x170>
 8003914:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <HAL_ADC_Init+0x2e4>)
 8003916:	e000      	b.n	800391a <HAL_ADC_Init+0x172>
 8003918:	4b5d      	ldr	r3, [pc, #372]	; (8003a90 <HAL_ADC_Init+0x2e8>)
 800391a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003924:	d102      	bne.n	800392c <HAL_ADC_Init+0x184>
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_ADC_Init+0x2e0>)
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e01a      	b.n	8003962 <HAL_ADC_Init+0x1ba>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_ADC_Init+0x2e0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d103      	bne.n	800393e <HAL_ADC_Init+0x196>
 8003936:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e011      	b.n	8003962 <HAL_ADC_Init+0x1ba>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <HAL_ADC_Init+0x2ec>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d102      	bne.n	800394e <HAL_ADC_Init+0x1a6>
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_ADC_Init+0x2f0>)
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e009      	b.n	8003962 <HAL_ADC_Init+0x1ba>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a51      	ldr	r2, [pc, #324]	; (8003a98 <HAL_ADC_Init+0x2f0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d102      	bne.n	800395e <HAL_ADC_Init+0x1b6>
 8003958:	4b4e      	ldr	r3, [pc, #312]	; (8003a94 <HAL_ADC_Init+0x2ec>)
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e001      	b.n	8003962 <HAL_ADC_Init+0x1ba>
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d108      	bne.n	8003982 <HAL_ADC_Init+0x1da>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Init+0x1da>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_ADC_Init+0x1dc>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11c      	bne.n	80039c2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003988:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d010      	beq.n	80039b0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_ADC_Init+0x202>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Init+0x202>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_ADC_Init+0x204>
 80039aa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80039b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	431a      	orrs	r2, r3
 80039be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7e5b      	ldrb	r3, [r3, #25]
 80039c6:	035b      	lsls	r3, r3, #13
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039cc:	2a01      	cmp	r2, #1
 80039ce:	d002      	beq.n	80039d6 <HAL_ADC_Init+0x22e>
 80039d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_Init+0x230>
 80039d6:	2200      	movs	r2, #0
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e8:	4313      	orrs	r3, r2
 80039ea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d11b      	bne.n	8003a2e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7e5b      	ldrb	r3, [r3, #25]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	3b01      	subs	r3, #1
 8003a04:	045a      	lsls	r2, r3, #17
 8003a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a10:	e00d      	b.n	8003a2e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d03a      	beq.n	8003aac <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_ADC_Init+0x2ec>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_ADC_Init+0x2a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_ADC_Init+0x2f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d128      	bne.n	8003a9c <HAL_ADC_Init+0x2f4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003a52:	d012      	beq.n	8003a7a <HAL_ADC_Init+0x2d2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5c:	d00a      	beq.n	8003a74 <HAL_ADC_Init+0x2cc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003a66:	d002      	beq.n	8003a6e <HAL_ADC_Init+0x2c6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	e018      	b.n	8003aa0 <HAL_ADC_Init+0x2f8>
 8003a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a72:	e015      	b.n	8003aa0 <HAL_ADC_Init+0x2f8>
 8003a74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003a78:	e012      	b.n	8003aa0 <HAL_ADC_Init+0x2f8>
 8003a7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003a7e:	e00f      	b.n	8003aa0 <HAL_ADC_Init+0x2f8>
 8003a80:	20000004 	.word	0x20000004
 8003a84:	431bde83 	.word	0x431bde83
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	50000700 	.word	0x50000700
 8003a94:	50000400 	.word	0x50000400
 8003a98:	50000500 	.word	0x50000500
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d114      	bne.n	8003ae4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac8:	f023 0302 	bic.w	r3, r3, #2
 8003acc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7e1b      	ldrb	r3, [r3, #24]
 8003ad2:	039a      	lsls	r2, r3, #14
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_ADC_Init+0x3bc>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003af4:	430b      	orrs	r3, r1
 8003af6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f023 010f 	bic.w	r1, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	1e5a      	subs	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
 8003b18:	e007      	b.n	8003b2a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 020f 	bic.w	r2, r2, #15
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f023 0303 	bic.w	r3, r3, #3
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b40:	e00a      	b.n	8003b58 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f023 0312 	bic.w	r3, r3, #18
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003b58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3768      	adds	r7, #104	; 0x68
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	fff0c007 	.word	0xfff0c007

08003b68 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 80f9 	bne.w	8003d76 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_Start+0x2a>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0f4      	b.n	8003d7c <HAL_ADC_Start+0x214>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fde8 	bl	8004770 <ADC_Enable>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 80e0 	bne.w	8003d6c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc8:	d004      	beq.n	8003bd4 <HAL_ADC_Start+0x6c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6d      	ldr	r2, [pc, #436]	; (8003d84 <HAL_ADC_Start+0x21c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d106      	bne.n	8003be2 <HAL_ADC_Start+0x7a>
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_ADC_Start+0x220>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_ADC_Start+0x9a>
 8003be0:	e005      	b.n	8003bee <HAL_ADC_Start+0x86>
 8003be2:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_ADC_Start+0x224>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_ADC_Start+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf6:	d004      	beq.n	8003c02 <HAL_ADC_Start+0x9a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a64      	ldr	r2, [pc, #400]	; (8003d90 <HAL_ADC_Start+0x228>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d115      	bne.n	8003c2e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d036      	beq.n	8003c8a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c2c:	e02d      	b.n	8003c8a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_Start+0xe6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <HAL_ADC_Start+0x21c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10a      	bne.n	8003c64 <HAL_ADC_Start+0xfc>
 8003c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e008      	b.n	8003c76 <HAL_ADC_Start+0x10e>
 8003c64:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_ADC_Start+0x228>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d106      	bne.n	8003ca6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f023 0206 	bic.w	r2, r3, #6
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca4:	e002      	b.n	8003cac <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	221c      	movs	r2, #28
 8003cba:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc4:	d004      	beq.n	8003cd0 <HAL_ADC_Start+0x168>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <HAL_ADC_Start+0x21c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d106      	bne.n	8003cde <HAL_ADC_Start+0x176>
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_ADC_Start+0x220>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03e      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003cdc:	e005      	b.n	8003cea <HAL_ADC_Start+0x182>
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_ADC_Start+0x224>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d037      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf2:	d004      	beq.n	8003cfe <HAL_ADC_Start+0x196>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_ADC_Start+0x21c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d106      	bne.n	8003d0c <HAL_ADC_Start+0x1a4>
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_ADC_Start+0x220>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d027      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003d0a:	e005      	b.n	8003d18 <HAL_ADC_Start+0x1b0>
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_ADC_Start+0x224>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d020      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d20:	d004      	beq.n	8003d2c <HAL_ADC_Start+0x1c4>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_ADC_Start+0x21c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d106      	bne.n	8003d3a <HAL_ADC_Start+0x1d2>
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_ADC_Start+0x220>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	d010      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003d38:	e005      	b.n	8003d46 <HAL_ADC_Start+0x1de>
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_ADC_Start+0x224>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2b09      	cmp	r3, #9
 8003d44:	d009      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4e:	d004      	beq.n	8003d5a <HAL_ADC_Start+0x1f2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_ADC_Start+0x228>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10f      	bne.n	8003d7a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0204 	orr.w	r2, r2, #4
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	e006      	b.n	8003d7a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d74:	e001      	b.n	8003d7a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
 8003d78:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	50000100 	.word	0x50000100
 8003d88:	50000300 	.word	0x50000300
 8003d8c:	50000700 	.word	0x50000700
 8003d90:	50000400 	.word	0x50000400

08003d94 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d102      	bne.n	8003db0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003daa:	2308      	movs	r3, #8
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e03a      	b.n	8003e26 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADC_PollForConversion+0x30>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a72      	ldr	r2, [pc, #456]	; (8003f88 <HAL_ADC_PollForConversion+0x1f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_PollForConversion+0x34>
 8003dc4:	4b71      	ldr	r3, [pc, #452]	; (8003f8c <HAL_ADC_PollForConversion+0x1f8>)
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_PollForConversion+0x36>
 8003dc8:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <HAL_ADC_PollForConversion+0x1fc>)
 8003dca:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d112      	bne.n	8003dfe <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11d      	bne.n	8003e22 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0bf      	b.n	8003f7e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0ad      	b.n	8003f7e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003e22:	230c      	movs	r3, #12
 8003e24:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2e:	d004      	beq.n	8003e3a <HAL_ADC_PollForConversion+0xa6>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_ADC_PollForConversion+0x1f4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d106      	bne.n	8003e48 <HAL_ADC_PollForConversion+0xb4>
 8003e3a:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <HAL_ADC_PollForConversion+0x1f8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <HAL_ADC_PollForConversion+0xd4>
 8003e46:	e005      	b.n	8003e54 <HAL_ADC_PollForConversion+0xc0>
 8003e48:	4b51      	ldr	r3, [pc, #324]	; (8003f90 <HAL_ADC_PollForConversion+0x1fc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_ADC_PollForConversion+0xd4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5c:	d004      	beq.n	8003e68 <HAL_ADC_PollForConversion+0xd4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a4c      	ldr	r2, [pc, #304]	; (8003f94 <HAL_ADC_PollForConversion+0x200>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d104      	bne.n	8003e72 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e00f      	b.n	8003e92 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7a:	d004      	beq.n	8003e86 <HAL_ADC_PollForConversion+0xf2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a41      	ldr	r2, [pc, #260]	; (8003f88 <HAL_ADC_PollForConversion+0x1f4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d102      	bne.n	8003e8c <HAL_ADC_PollForConversion+0xf8>
 8003e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e8a:	e000      	b.n	8003e8e <HAL_ADC_PollForConversion+0xfa>
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_ADC_PollForConversion+0x200>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003e92:	f7ff fc59 	bl	8003748 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003e98:	e021      	b.n	8003ede <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea0:	d01d      	beq.n	8003ede <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_ADC_PollForConversion+0x124>
 8003ea8:	f7ff fc4e 	bl	8003748 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d212      	bcs.n	8003ede <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04f      	b.n	8003f7e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0d6      	beq.n	8003e9a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d131      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d12c      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d125      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d112      	bne.n	8003f52 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d112      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f50:	e00b      	b.n	8003f6a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	50000100 	.word	0x50000100
 8003f8c:	50000300 	.word	0x50000300
 8003f90:	50000700 	.word	0x50000700
 8003f94:	50000400 	.word	0x50000400

08003f98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b09b      	sub	sp, #108	; 0x6c
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x22>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e2cb      	b.n	800456e <HAL_ADC_ConfigChannel+0x5ba>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 82af 	bne.w	800454c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d81c      	bhi.n	8004030 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	461a      	mov	r2, r3
 800400a:	231f      	movs	r3, #31
 800400c:	4093      	lsls	r3, r2
 800400e:	43db      	mvns	r3, r3
 8004010:	4019      	ands	r1, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa00 f203 	lsl.w	r2, r0, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
 800402e:	e063      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d81e      	bhi.n	8004076 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	3b1e      	subs	r3, #30
 800404c:	221f      	movs	r2, #31
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	4019      	ands	r1, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	3b1e      	subs	r3, #30
 8004068:	fa00 f203 	lsl.w	r2, r0, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	635a      	str	r2, [r3, #52]	; 0x34
 8004074:	e040      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b0e      	cmp	r3, #14
 800407c:	d81e      	bhi.n	80040bc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	3b3c      	subs	r3, #60	; 0x3c
 8004092:	221f      	movs	r2, #31
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	4019      	ands	r1, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	3b3c      	subs	r3, #60	; 0x3c
 80040ae:	fa00 f203 	lsl.w	r2, r0, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
 80040ba:	e01d      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	3b5a      	subs	r3, #90	; 0x5a
 80040d0:	221f      	movs	r2, #31
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	4019      	ands	r1, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	3b5a      	subs	r3, #90	; 0x5a
 80040ec:	fa00 f203 	lsl.w	r2, r0, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 80e5 	bne.w	80042d2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b09      	cmp	r3, #9
 800410e:	d91c      	bls.n	800414a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	3b1e      	subs	r3, #30
 8004122:	2207      	movs	r2, #7
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	4019      	ands	r1, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6898      	ldr	r0, [r3, #8]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	3b1e      	subs	r3, #30
 800413c:	fa00 f203 	lsl.w	r2, r0, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	e019      	b.n	800417e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6959      	ldr	r1, [r3, #20]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	2207      	movs	r2, #7
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	4019      	ands	r1, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6898      	ldr	r0, [r3, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	fa00 f203 	lsl.w	r2, r0, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	08db      	lsrs	r3, r3, #3
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	2b03      	cmp	r3, #3
 800419e:	d84f      	bhi.n	8004240 <HAL_ADC_ConfigChannel+0x28c>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_ADC_ConfigChannel+0x1f4>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041fd 	.word	0x080041fd
 80041b4:	0800421f 	.word	0x0800421f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041be:	4b9f      	ldr	r3, [pc, #636]	; (800443c <HAL_ADC_ConfigChannel+0x488>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	0691      	lsls	r1, r2, #26
 80041c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ca:	430a      	orrs	r2, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041d8:	e07e      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041e0:	4b96      	ldr	r3, [pc, #600]	; (800443c <HAL_ADC_ConfigChannel+0x488>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	0691      	lsls	r1, r2, #26
 80041ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ec:	430a      	orrs	r2, r1
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041f8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041fa:	e06d      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004202:	4b8e      	ldr	r3, [pc, #568]	; (800443c <HAL_ADC_ConfigChannel+0x488>)
 8004204:	4013      	ands	r3, r2
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	0691      	lsls	r1, r2, #26
 800420c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800420e:	430a      	orrs	r2, r1
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800421a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800421c:	e05c      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004224:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_ADC_ConfigChannel+0x488>)
 8004226:	4013      	ands	r3, r2
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	0691      	lsls	r1, r2, #26
 800422e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004230:	430a      	orrs	r2, r1
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800423c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800423e:	e04b      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	069b      	lsls	r3, r3, #26
 8004250:	429a      	cmp	r2, r3
 8004252:	d107      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	429a      	cmp	r2, r3
 8004276:	d107      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004286:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	069b      	lsls	r3, r3, #26
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	429a      	cmp	r2, r3
 80042be:	d10a      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042ce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80042d0:	e001      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80042d6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d108      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x344>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x344>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_ADC_ConfigChannel+0x346>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 8131 	bne.w	8004562 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d00f      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43da      	mvns	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	400a      	ands	r2, r1
 8004322:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004326:	e049      	b.n	80043bc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	409a      	lsls	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b09      	cmp	r3, #9
 8004348:	d91c      	bls.n	8004384 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6999      	ldr	r1, [r3, #24]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	3b1b      	subs	r3, #27
 800435c:	2207      	movs	r2, #7
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	4019      	ands	r1, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6898      	ldr	r0, [r3, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	3b1b      	subs	r3, #27
 8004376:	fa00 f203 	lsl.w	r2, r0, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	e01b      	b.n	80043bc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6959      	ldr	r1, [r3, #20]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	2207      	movs	r2, #7
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	4019      	ands	r1, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6898      	ldr	r0, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	fa00 f203 	lsl.w	r2, r0, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c4:	d004      	beq.n	80043d0 <HAL_ADC_ConfigChannel+0x41c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <HAL_ADC_ConfigChannel+0x48c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x420>
 80043d0:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <HAL_ADC_ConfigChannel+0x490>)
 80043d2:	e000      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x422>
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_ADC_ConfigChannel+0x494>)
 80043d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d105      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043f0:	2b11      	cmp	r3, #17
 80043f2:	d105      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004404:	2b12      	cmp	r3, #18
 8004406:	f040 80ac 	bne.w	8004562 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 80a5 	bne.w	8004562 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004420:	d102      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x474>
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <HAL_ADC_ConfigChannel+0x48c>)
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e023      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4bc>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_ADC_ConfigChannel+0x48c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_ADC_ConfigChannel+0x498>
 8004432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e01a      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4bc>
 800443a:	bf00      	nop
 800443c:	83fff000 	.word	0x83fff000
 8004440:	50000100 	.word	0x50000100
 8004444:	50000300 	.word	0x50000300
 8004448:	50000700 	.word	0x50000700
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a4a      	ldr	r2, [pc, #296]	; (800457c <HAL_ADC_ConfigChannel+0x5c8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d102      	bne.n	800445c <HAL_ADC_ConfigChannel+0x4a8>
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_ADC_ConfigChannel+0x5cc>)
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e009      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4bc>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a47      	ldr	r2, [pc, #284]	; (8004580 <HAL_ADC_ConfigChannel+0x5cc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d102      	bne.n	800446c <HAL_ADC_ConfigChannel+0x4b8>
 8004466:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_ADC_ConfigChannel+0x5c8>)
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e001      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4bc>
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x4dc>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x4dc>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_ADC_ConfigChannel+0x4de>
 8004490:	2300      	movs	r3, #0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d150      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004496:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x504>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x504>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_ADC_ConfigChannel+0x506>
 80044b8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13c      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d11d      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x54e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ce:	d118      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80044d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044da:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044dc:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_ADC_ConfigChannel+0x5d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_ADC_ConfigChannel+0x5d4>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0c9a      	lsrs	r2, r3, #18
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044f2:	e002      	b.n	80044fa <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f9      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004500:	e02e      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b11      	cmp	r3, #17
 8004508:	d10b      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x56e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004512:	d106      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800451c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800451e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004520:	e01e      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b12      	cmp	r3, #18
 8004528:	d11a      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004534:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004536:	e013      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800454a:	e00a      	b.n	8004562 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800455e:	e000      	b.n	8004562 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004560:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800456a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800456e:	4618      	mov	r0, r3
 8004570:	376c      	adds	r7, #108	; 0x6c
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	50000400 	.word	0x50000400
 8004580:	50000500 	.word	0x50000500
 8004584:	20000004 	.word	0x20000004
 8004588:	431bde83 	.word	0x431bde83

0800458c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800458c:	b480      	push	{r7}
 800458e:	b099      	sub	sp, #100	; 0x64
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a4:	d102      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80045a6:	4b6d      	ldr	r3, [pc, #436]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	e01a      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d103      	bne.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80045b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	e011      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a67      	ldr	r2, [pc, #412]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d102      	bne.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045c8:	4b66      	ldr	r3, [pc, #408]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	e009      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a64      	ldr	r2, [pc, #400]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d102      	bne.n	80045de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	e001      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b0      	b.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0a9      	b.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 808d 	bne.w	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 8086 	bne.w	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004628:	d004      	beq.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4b      	ldr	r2, [pc, #300]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004636:	e000      	b.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d040      	beq.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004656:	035b      	lsls	r3, r3, #13
 8004658:	430b      	orrs	r3, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800465e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d108      	bne.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15c      	bne.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80046a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d14b      	bne.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80046a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046b0:	f023 030f 	bic.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	6811      	ldr	r1, [r2, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	6892      	ldr	r2, [r2, #8]
 80046bc:	430a      	orrs	r2, r1
 80046be:	431a      	orrs	r2, r3
 80046c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c4:	e03c      	b.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d123      	bne.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004714:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004716:	2b00      	cmp	r3, #0
 8004718:	d112      	bne.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800471a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004722:	f023 030f 	bic.w	r3, r3, #15
 8004726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004728:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800472a:	e009      	b.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800473e:	e000      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004740:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800474a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800474e:	4618      	mov	r0, r3
 8004750:	3764      	adds	r7, #100	; 0x64
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	50000100 	.word	0x50000100
 8004760:	50000400 	.word	0x50000400
 8004764:	50000500 	.word	0x50000500
 8004768:	50000300 	.word	0x50000300
 800476c:	50000700 	.word	0x50000700

08004770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d108      	bne.n	800479c <ADC_Enable+0x2c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <ADC_Enable+0x2c>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <ADC_Enable+0x2e>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d143      	bne.n	800482a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <ADC_Enable+0xc4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0210 	orr.w	r2, r3, #16
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0201 	orr.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e02f      	b.n	800482c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80047dc:	f7fe ffb4 	bl	8003748 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047e2:	e01b      	b.n	800481c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047e4:	f7fe ffb0 	bl	8003748 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d914      	bls.n	800481c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d00d      	beq.n	800481c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d1dc      	bne.n	80047e4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	8000003f 	.word	0x8000003f

08004838 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <ADC_Disable+0x2c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <ADC_Disable+0x2c>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <ADC_Disable+0x2e>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d047      	beq.n	80048fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030d 	and.w	r3, r3, #13
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10f      	bne.n	8004898 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0202 	orr.w	r2, r2, #2
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2203      	movs	r2, #3
 800488e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004890:	f7fe ff5a 	bl	8003748 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004896:	e029      	b.n	80048ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e023      	b.n	80048fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048b4:	f7fe ff48 	bl	8003748 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d914      	bls.n	80048ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10d      	bne.n	80048ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d0dc      	beq.n	80048b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004920:	4013      	ands	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800492c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <__NVIC_SetPriorityGrouping+0x44>)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	60d3      	str	r3, [r2, #12]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__NVIC_GetPriorityGrouping+0x18>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	f003 0307 	and.w	r3, r3, #7
}
 800495a:	4618      	mov	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	2b00      	cmp	r3, #0
 8004978:	db0b      	blt.n	8004992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f003 021f 	and.w	r2, r3, #31
 8004980:	4907      	ldr	r1, [pc, #28]	; (80049a0 <__NVIC_EnableIRQ+0x38>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2001      	movs	r0, #1
 800498a:	fa00 f202 	lsl.w	r2, r0, r2
 800498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e100 	.word	0xe000e100

080049a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	6039      	str	r1, [r7, #0]
 80049ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	db0a      	blt.n	80049ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	490c      	ldr	r1, [pc, #48]	; (80049f0 <__NVIC_SetPriority+0x4c>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049cc:	e00a      	b.n	80049e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	; (80049f4 <__NVIC_SetPriority+0x50>)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	3b04      	subs	r3, #4
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	761a      	strb	r2, [r3, #24]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	; 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0307 	rsb	r3, r3, #7
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf28      	it	cs
 8004a16:	2304      	movcs	r3, #4
 8004a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d902      	bls.n	8004a28 <NVIC_EncodePriority+0x30>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3b03      	subs	r3, #3
 8004a26:	e000      	b.n	8004a2a <NVIC_EncodePriority+0x32>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43d9      	mvns	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	4313      	orrs	r3, r2
         );
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3724      	adds	r7, #36	; 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a70:	d301      	bcc.n	8004a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00f      	b.n	8004a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <SysTick_Config+0x40>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a7e:	210f      	movs	r1, #15
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a84:	f7ff ff8e 	bl	80049a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <SysTick_Config+0x40>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <SysTick_Config+0x40>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010

08004aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff29 	bl	8004904 <__NVIC_SetPriorityGrouping>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004acc:	f7ff ff3e 	bl	800494c <__NVIC_GetPriorityGrouping>
 8004ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff ff8e 	bl	80049f8 <NVIC_EncodePriority>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff5d 	bl	80049a4 <__NVIC_SetPriority>
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff31 	bl	8004968 <__NVIC_EnableIRQ>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffa2 	bl	8004a60 <SysTick_Config>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b36:	e154      	b.n	8004de2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8146 	beq.w	8004ddc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d005      	beq.n	8004b68 <HAL_GPIO_Init+0x40>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d130      	bne.n	8004bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 0201 	and.w	r2, r3, #1
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d017      	beq.n	8004c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	2203      	movs	r2, #3
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d123      	bne.n	8004c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	08da      	lsrs	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3208      	adds	r2, #8
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	220f      	movs	r2, #15
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	08da      	lsrs	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3208      	adds	r2, #8
 8004c54:	6939      	ldr	r1, [r7, #16]
 8004c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	2203      	movs	r2, #3
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80a0 	beq.w	8004ddc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9c:	4b58      	ldr	r3, [pc, #352]	; (8004e00 <HAL_GPIO_Init+0x2d8>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_GPIO_Init+0x2d8>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6193      	str	r3, [r2, #24]
 8004ca8:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <HAL_GPIO_Init+0x2d8>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cb4:	4a53      	ldr	r2, [pc, #332]	; (8004e04 <HAL_GPIO_Init+0x2dc>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	3302      	adds	r3, #2
 8004cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	220f      	movs	r2, #15
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cde:	d019      	beq.n	8004d14 <HAL_GPIO_Init+0x1ec>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a49      	ldr	r2, [pc, #292]	; (8004e08 <HAL_GPIO_Init+0x2e0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_GPIO_Init+0x1e8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a48      	ldr	r2, [pc, #288]	; (8004e0c <HAL_GPIO_Init+0x2e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00d      	beq.n	8004d0c <HAL_GPIO_Init+0x1e4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a47      	ldr	r2, [pc, #284]	; (8004e10 <HAL_GPIO_Init+0x2e8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <HAL_GPIO_Init+0x1e0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <HAL_GPIO_Init+0x2ec>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <HAL_GPIO_Init+0x1dc>
 8004d00:	2304      	movs	r3, #4
 8004d02:	e008      	b.n	8004d16 <HAL_GPIO_Init+0x1ee>
 8004d04:	2305      	movs	r3, #5
 8004d06:	e006      	b.n	8004d16 <HAL_GPIO_Init+0x1ee>
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e004      	b.n	8004d16 <HAL_GPIO_Init+0x1ee>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e002      	b.n	8004d16 <HAL_GPIO_Init+0x1ee>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_GPIO_Init+0x1ee>
 8004d14:	2300      	movs	r3, #0
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	f002 0203 	and.w	r2, r2, #3
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	4093      	lsls	r3, r2
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d26:	4937      	ldr	r1, [pc, #220]	; (8004e04 <HAL_GPIO_Init+0x2dc>)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	089b      	lsrs	r3, r3, #2
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d34:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d58:	4a2f      	ldr	r2, [pc, #188]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d82:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db2:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <HAL_GPIO_Init+0x2f0>)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f aea3 	bne.w	8004b38 <HAL_GPIO_Init+0x10>
  }
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40010000 	.word	0x40010000
 8004e08:	48000400 	.word	0x48000400
 8004e0c:	48000800 	.word	0x48000800
 8004e10:	48000c00 	.word	0x48000c00
 8004e14:	48001000 	.word	0x48001000
 8004e18:	40010400 	.word	0x40010400

08004e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
 8004e38:	e001      	b.n	8004e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4013      	ands	r3, r2
 8004e94:	041a      	lsls	r2, r3, #16
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43d9      	mvns	r1, r3
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004eba:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fd46 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40010400 	.word	0x40010400

08004ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e081      	b.n	8004ff6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fe f95e 	bl	80031c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2224      	movs	r2, #36	; 0x24
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d107      	bne.n	8004f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e006      	b.n	8004f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d104      	bne.n	8004f7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69d9      	ldr	r1, [r3, #28]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
 8005010:	4613      	mov	r3, r2
 8005012:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	f040 80da 	bne.w	80051d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2C_Master_Transmit+0x30>
 800502c:	2302      	movs	r3, #2
 800502e:	e0d3      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005038:	f7fe fb86 	bl	8003748 <HAL_GetTick>
 800503c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2319      	movs	r3, #25
 8005044:	2201      	movs	r2, #1
 8005046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f8f0 	bl	8005230 <I2C_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0be      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2210      	movs	r2, #16
 8005066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	893a      	ldrh	r2, [r7, #8]
 800507a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2bff      	cmp	r3, #255	; 0xff
 800508a:	d90e      	bls.n	80050aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f9f6 	bl	8005494 <I2C_TransferConfig>
 80050a8:	e06c      	b.n	8005184 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	8979      	ldrh	r1, [r7, #10]
 80050bc:	4b48      	ldr	r3, [pc, #288]	; (80051e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f9e5 	bl	8005494 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050ca:	e05b      	b.n	8005184 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f8ed 	bl	80052b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e07b      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d034      	beq.n	8005184 <HAL_I2C_Master_Transmit+0x184>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d130      	bne.n	8005184 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	2200      	movs	r2, #0
 800512a:	2180      	movs	r1, #128	; 0x80
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f87f 	bl	8005230 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e04d      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2bff      	cmp	r3, #255	; 0xff
 8005144:	d90e      	bls.n	8005164 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	b2da      	uxtb	r2, r3
 8005152:	8979      	ldrh	r1, [r7, #10]
 8005154:	2300      	movs	r3, #0
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f999 	bl	8005494 <I2C_TransferConfig>
 8005162:	e00f      	b.n	8005184 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005172:	b2da      	uxtb	r2, r3
 8005174:	8979      	ldrh	r1, [r7, #10]
 8005176:	2300      	movs	r3, #0
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f988 	bl	8005494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d19e      	bne.n	80050cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	6a39      	ldr	r1, [r7, #32]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f8cc 	bl	8005330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e01a      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2220      	movs	r2, #32
 80051a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80051b6:	400b      	ands	r3, r1
 80051b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	80002000 	.word	0x80002000
 80051e4:	fe00e800 	.word	0xfe00e800

080051e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d103      	bne.n	8005206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d007      	beq.n	8005224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	619a      	str	r2, [r3, #24]
  }
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005240:	e022      	b.n	8005288 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005248:	d01e      	beq.n	8005288 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fe fa7d 	bl	8003748 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d113      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e00f      	b.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d0cd      	beq.n	8005242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052bc:	e02c      	b.n	8005318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f870 	bl	80053a8 <I2C_IsAcknowledgeFailed>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e02a      	b.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d8:	d01e      	beq.n	8005318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe fa35 	bl	8003748 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d1cb      	bne.n	80052be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800533c:	e028      	b.n	8005390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f830 	bl	80053a8 <I2C_IsAcknowledgeFailed>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e026      	b.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fe f9f9 	bl	8003748 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d113      	bne.n	8005390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f043 0220 	orr.w	r2, r3, #32
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e007      	b.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b20      	cmp	r3, #32
 800539c:	d1cf      	bne.n	800533e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d161      	bne.n	8005486 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d0:	d02b      	beq.n	800542a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053e2:	e022      	b.n	800542a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ea:	d01e      	beq.n	800542a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ec:	f7fe f9ac 	bl	8003748 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <I2C_IsAcknowledgeFailed+0x5a>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d113      	bne.n	800542a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e02e      	b.n	8005488 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d1d5      	bne.n	80053e4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2220      	movs	r2, #32
 8005446:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fecd 	bl	80051e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <I2C_IsAcknowledgeFailed+0xe8>)
 800545a:	400b      	ands	r3, r1
 800545c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	4613      	mov	r3, r2
 80054a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	0d5b      	lsrs	r3, r3, #21
 80054b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <I2C_TransferConfig+0x58>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	43db      	mvns	r3, r3
 80054ba:	ea02 0103 	and.w	r1, r2, r3
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054c4:	7a7b      	ldrb	r3, [r7, #9]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	03ff63ff 	.word	0x03ff63ff

080054f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	d138      	bne.n	8005578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005510:	2302      	movs	r3, #2
 8005512:	e032      	b.n	800557a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6819      	ldr	r1, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b20      	cmp	r3, #32
 800559a:	d139      	bne.n	8005610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e033      	b.n	8005612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	; 0x24
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005626:	af00      	add	r7, sp, #0
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f000 bef4 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 816a 	beq.w	800591e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800564a:	4bb3      	ldr	r3, [pc, #716]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d00c      	beq.n	8005670 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005656:	4bb0      	ldr	r3, [pc, #704]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b08      	cmp	r3, #8
 8005660:	d159      	bne.n	8005716 <HAL_RCC_OscConfig+0xf6>
 8005662:	4bad      	ldr	r3, [pc, #692]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566e:	d152      	bne.n	8005716 <HAL_RCC_OscConfig+0xf6>
 8005670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005674:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005678:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800567c:	fa93 f3a3 	rbit	r3, r3
 8005680:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005684:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005688:	fab3 f383 	clz	r3, r3
 800568c:	b2db      	uxtb	r3, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_OscConfig+0x82>
 800569c:	4b9e      	ldr	r3, [pc, #632]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	e015      	b.n	80056ce <HAL_RCC_OscConfig+0xae>
 80056a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80056b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80056be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80056ca:	4b93      	ldr	r3, [pc, #588]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80056d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80056da:	fa92 f2a2 	rbit	r2, r2
 80056de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80056e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80056e6:	fab2 f282 	clz	r2, r2
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	f042 0220 	orr.w	r2, r2, #32
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	f002 021f 	and.w	r2, r2, #31
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f202 	lsl.w	r2, r1, r2
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 810c 	beq.w	800591c <HAL_RCC_OscConfig+0x2fc>
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 8106 	bne.w	800591c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	f000 be86 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d106      	bne.n	8005730 <HAL_RCC_OscConfig+0x110>
 8005722:	4b7d      	ldr	r3, [pc, #500]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a7c      	ldr	r2, [pc, #496]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e030      	b.n	8005792 <HAL_RCC_OscConfig+0x172>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x134>
 800573a:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a76      	ldr	r2, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b74      	ldr	r3, [pc, #464]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a73      	ldr	r2, [pc, #460]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800574c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e01e      	b.n	8005792 <HAL_RCC_OscConfig+0x172>
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800575e:	d10c      	bne.n	800577a <HAL_RCC_OscConfig+0x15a>
 8005760:	4b6d      	ldr	r3, [pc, #436]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a6c      	ldr	r2, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	4b6a      	ldr	r3, [pc, #424]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a69      	ldr	r2, [pc, #420]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	e00b      	b.n	8005792 <HAL_RCC_OscConfig+0x172>
 800577a:	4b67      	ldr	r3, [pc, #412]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a66      	ldr	r2, [pc, #408]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b64      	ldr	r3, [pc, #400]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a63      	ldr	r2, [pc, #396]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800578c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005790:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005792:	4b61      	ldr	r3, [pc, #388]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f023 020f 	bic.w	r2, r3, #15
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	495d      	ldr	r1, [pc, #372]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d059      	beq.n	8005864 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b0:	f7fd ffca 	bl	8003748 <HAL_GetTick>
 80057b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ba:	f7fd ffc5 	bl	8003748 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d902      	bls.n	80057d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	f000 be29 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
 80057d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80057e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e8:	fab3 f383 	clz	r3, r3
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <HAL_RCC_OscConfig+0x1e2>
 80057fc:	4b46      	ldr	r3, [pc, #280]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	e015      	b.n	800582e <HAL_RCC_OscConfig+0x20e>
 8005802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005806:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800580e:	fa93 f3a3 	rbit	r3, r3
 8005812:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800581a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800581e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005832:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005836:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800583a:	fa92 f2a2 	rbit	r2, r2
 800583e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005842:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005846:	fab2 f282 	clz	r2, r2
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f042 0220 	orr.w	r2, r2, #32
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	f002 021f 	and.w	r2, r2, #31
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f202 	lsl.w	r2, r1, r2
 800585c:	4013      	ands	r3, r2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ab      	beq.n	80057ba <HAL_RCC_OscConfig+0x19a>
 8005862:	e05c      	b.n	800591e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fd ff70 	bl	8003748 <HAL_GetTick>
 8005868:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586c:	e00a      	b.n	8005884 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586e:	f7fd ff6b 	bl	8003748 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d902      	bls.n	8005884 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	f000 bdcf 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
 8005884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005888:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005890:	fa93 f3a3 	rbit	r3, r3
 8005894:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005898:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d102      	bne.n	80058b6 <HAL_RCC_OscConfig+0x296>
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	e015      	b.n	80058e2 <HAL_RCC_OscConfig+0x2c2>
 80058b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80058ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80058d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80058de:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <HAL_RCC_OscConfig+0x2f8>)
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80058ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80058ee:	fa92 f2a2 	rbit	r2, r2
 80058f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80058f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80058fa:	fab2 f282 	clz	r2, r2
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	f042 0220 	orr.w	r2, r2, #32
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	f002 021f 	and.w	r2, r2, #31
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f202 	lsl.w	r2, r1, r2
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ab      	bne.n	800586e <HAL_RCC_OscConfig+0x24e>
 8005916:	e002      	b.n	800591e <HAL_RCC_OscConfig+0x2fe>
 8005918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 816f 	beq.w	8005c0c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800592e:	4bd0      	ldr	r3, [pc, #832]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800593a:	4bcd      	ldr	r3, [pc, #820]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b08      	cmp	r3, #8
 8005944:	d16c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x400>
 8005946:	4bca      	ldr	r3, [pc, #808]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d166      	bne.n	8005a20 <HAL_RCC_OscConfig+0x400>
 8005952:	2302      	movs	r3, #2
 8005954:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005964:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005968:	fab3 f383 	clz	r3, r3
 800596c:	b2db      	uxtb	r3, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_RCC_OscConfig+0x362>
 800597c:	4bbc      	ldr	r3, [pc, #752]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	e013      	b.n	80059aa <HAL_RCC_OscConfig+0x38a>
 8005982:	2302      	movs	r3, #2
 8005984:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005994:	2302      	movs	r3, #2
 8005996:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800599a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80059a6:	4bb2      	ldr	r3, [pc, #712]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2202      	movs	r2, #2
 80059ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80059b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80059b4:	fa92 f2a2 	rbit	r2, r2
 80059b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80059bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80059c0:	fab2 f282 	clz	r2, r2
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	f042 0220 	orr.w	r2, r2, #32
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	f002 021f 	and.w	r2, r2, #31
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f202 	lsl.w	r2, r1, r2
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_RCC_OscConfig+0x3cc>
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d002      	beq.n	80059ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f000 bd1b 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ec:	4ba0      	ldr	r3, [pc, #640]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	21f8      	movs	r1, #248	; 0xf8
 80059fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a00:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005a04:	fa91 f1a1 	rbit	r1, r1
 8005a08:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005a0c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005a10:	fab1 f181 	clz	r1, r1
 8005a14:	b2c9      	uxtb	r1, r1
 8005a16:	408b      	lsls	r3, r1
 8005a18:	4995      	ldr	r1, [pc, #596]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1e:	e0f5      	b.n	8005c0c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8085 	beq.w	8005b36 <HAL_RCC_OscConfig+0x516>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005a3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a42:	fab3 f383 	clz	r3, r3
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	461a      	mov	r2, r3
 8005a54:	2301      	movs	r3, #1
 8005a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd fe76 	bl	8003748 <HAL_GetTick>
 8005a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a62:	f7fd fe71 	bl	8003748 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d902      	bls.n	8005a78 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	f000 bcd5 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005a8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8e:	fab3 f383 	clz	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d102      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x488>
 8005aa2:	4b73      	ldr	r3, [pc, #460]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	e013      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4b0>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005aba:	2302      	movs	r3, #2
 8005abc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005ac0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005acc:	4b68      	ldr	r3, [pc, #416]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005ad6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005ada:	fa92 f2a2 	rbit	r2, r2
 8005ade:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005ae2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005ae6:	fab2 f282 	clz	r2, r2
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	f042 0220 	orr.w	r2, r2, #32
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f002 021f 	and.w	r2, r2, #31
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f202 	lsl.w	r2, r1, r2
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0af      	beq.n	8005a62 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b02:	4b5b      	ldr	r3, [pc, #364]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	21f8      	movs	r1, #248	; 0xf8
 8005b12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005b1a:	fa91 f1a1 	rbit	r1, r1
 8005b1e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005b22:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005b26:	fab1 f181 	clz	r1, r1
 8005b2a:	b2c9      	uxtb	r1, r1
 8005b2c:	408b      	lsls	r3, r1
 8005b2e:	4950      	ldr	r1, [pc, #320]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
 8005b34:	e06a      	b.n	8005c0c <HAL_RCC_OscConfig+0x5ec>
 8005b36:	2301      	movs	r3, #1
 8005b38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005b48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4c:	fab3 f383 	clz	r3, r3
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fd fdf1 	bl	8003748 <HAL_GetTick>
 8005b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fd fdec 	bl	8003748 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	f000 bc50 	b.w	8006422 <HAL_RCC_OscConfig+0xe02>
 8005b82:	2302      	movs	r3, #2
 8005b84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b8c:	fa93 f3a3 	rbit	r3, r3
 8005b90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b98:	fab3 f383 	clz	r3, r3
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x592>
 8005bac:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	e013      	b.n	8005bda <HAL_RCC_OscConfig+0x5ba>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bbc:	fa93 f3a3 	rbit	r3, r3
 8005bc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bce:	fa93 f3a3 	rbit	r3, r3
 8005bd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_OscConfig+0x650>)
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005be0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005be4:	fa92 f2a2 	rbit	r2, r2
 8005be8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005bec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005bf0:	fab2 f282 	clz	r2, r2
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	f042 0220 	orr.w	r2, r2, #32
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	f002 021f 	and.w	r2, r2, #31
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1af      	bne.n	8005b6c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80da 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c1c:	1d3b      	adds	r3, r7, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d069      	beq.n	8005cfa <HAL_RCC_OscConfig+0x6da>
 8005c26:	2301      	movs	r3, #1
 8005c28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c30:	fa93 f3a3 	rbit	r3, r3
 8005c34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3c:	fab3 f383 	clz	r3, r3
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_OscConfig+0x654>)
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c50:	f7fd fd7a 	bl	8003748 <HAL_GetTick>
 8005c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c58:	e00e      	b.n	8005c78 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fd fd75 	bl	8003748 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d906      	bls.n	8005c78 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e3d9      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	10908120 	.word	0x10908120
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c8e:	2202      	movs	r2, #2
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	fa93 f2a3 	rbit	r2, r3
 8005c9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	fa93 f2a3 	rbit	r2, r3
 8005cb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005cb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cba:	4ba5      	ldr	r3, [pc, #660]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	6019      	str	r1, [r3, #0]
 8005cc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	fa93 f1a3 	rbit	r1, r3
 8005cd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005cd4:	6019      	str	r1, [r3, #0]
  return result;
 8005cd6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	fab3 f383 	clz	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	2101      	movs	r1, #1
 8005cee:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0b0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x63a>
 8005cf8:	e06a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x7b0>
 8005cfa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fa93 f2a3 	rbit	r2, r3
 8005d0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d10:	601a      	str	r2, [r3, #0]
  return result;
 8005d12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4b8c      	ldr	r3, [pc, #560]	; (8005f54 <HAL_RCC_OscConfig+0x934>)
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2c:	f7fd fd0c 	bl	8003748 <HAL_GetTick>
 8005d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d34:	e009      	b.n	8005d4a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d36:	f7fd fd07 	bl	8003748 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e36b      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8005d4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d4e:	2202      	movs	r2, #2
 8005d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	fa93 f2a3 	rbit	r2, r3
 8005d5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d66:	2202      	movs	r2, #2
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	fa93 f2a3 	rbit	r2, r3
 8005d74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d7e:	2202      	movs	r2, #2
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	fa93 f2a3 	rbit	r2, r3
 8005d8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d92:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	6019      	str	r1, [r3, #0]
 8005d9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fa93 f1a3 	rbit	r1, r3
 8005da8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005dac:	6019      	str	r1, [r3, #0]
  return result;
 8005dae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	fab3 f383 	clz	r3, r3
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b2      	bne.n	8005d36 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8158 	beq.w	8006090 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de6:	4b5a      	ldr	r3, [pc, #360]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d112      	bne.n	8005e18 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df2:	4b57      	ldr	r3, [pc, #348]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4a56      	ldr	r2, [pc, #344]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	61d3      	str	r3, [r2, #28]
 8005dfe:	4b54      	ldr	r3, [pc, #336]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b4f      	ldr	r3, [pc, #316]	; (8005f58 <HAL_RCC_OscConfig+0x938>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11a      	bne.n	8005e5a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e24:	4b4c      	ldr	r3, [pc, #304]	; (8005f58 <HAL_RCC_OscConfig+0x938>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4b      	ldr	r2, [pc, #300]	; (8005f58 <HAL_RCC_OscConfig+0x938>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e30:	f7fd fc8a 	bl	8003748 <HAL_GetTick>
 8005e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e38:	e009      	b.n	8005e4e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fd fc85 	bl	8003748 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e2e9      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4e:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <HAL_RCC_OscConfig+0x938>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ef      	beq.n	8005e3a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d106      	bne.n	8005e72 <HAL_RCC_OscConfig+0x852>
 8005e64:	4b3a      	ldr	r3, [pc, #232]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	6213      	str	r3, [r2, #32]
 8005e70:	e02f      	b.n	8005ed2 <HAL_RCC_OscConfig+0x8b2>
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10c      	bne.n	8005e96 <HAL_RCC_OscConfig+0x876>
 8005e7c:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e82:	f023 0301 	bic.w	r3, r3, #1
 8005e86:	6213      	str	r3, [r2, #32]
 8005e88:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005e8e:	f023 0304 	bic.w	r3, r3, #4
 8005e92:	6213      	str	r3, [r2, #32]
 8005e94:	e01d      	b.n	8005ed2 <HAL_RCC_OscConfig+0x8b2>
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCC_OscConfig+0x89a>
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	6213      	str	r3, [r2, #32]
 8005eac:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	6213      	str	r3, [r2, #32]
 8005eb8:	e00b      	b.n	8005ed2 <HAL_RCC_OscConfig+0x8b2>
 8005eba:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	4a24      	ldr	r2, [pc, #144]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6213      	str	r3, [r2, #32]
 8005ec6:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005ecc:	f023 0304 	bic.w	r3, r3, #4
 8005ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d06b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005edc:	f7fd fc34 	bl	8003748 <HAL_GetTick>
 8005ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee4:	e00b      	b.n	8005efe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee6:	f7fd fc2f 	bl	8003748 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e291      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8005efe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f02:	2202      	movs	r2, #2
 8005f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	fa93 f2a3 	rbit	r2, r3
 8005f10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	fa93 f2a3 	rbit	r2, r3
 8005f28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f2c:	601a      	str	r2, [r3, #0]
  return result;
 8005f2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f34:	fab3 f383 	clz	r3, r3
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d109      	bne.n	8005f5c <HAL_RCC_OscConfig+0x93c>
 8005f48:	4b01      	ldr	r3, [pc, #4]	; (8005f50 <HAL_RCC_OscConfig+0x930>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	e014      	b.n	8005f78 <HAL_RCC_OscConfig+0x958>
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000
 8005f54:	10908120 	.word	0x10908120
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f60:	2202      	movs	r2, #2
 8005f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	fa93 f2a3 	rbit	r2, r3
 8005f6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	4bbb      	ldr	r3, [pc, #748]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f7c:	2102      	movs	r1, #2
 8005f7e:	6011      	str	r1, [r2, #0]
 8005f80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	fa92 f1a2 	rbit	r1, r2
 8005f8a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f8e:	6011      	str	r1, [r2, #0]
  return result;
 8005f90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	fab2 f282 	clz	r2, r2
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	f002 021f 	and.w	r2, r2, #31
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d099      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x8c6>
 8005fb2:	e063      	b.n	800607c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb4:	f7fd fbc8 	bl	8003748 <HAL_GetTick>
 8005fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fbc:	e00b      	b.n	8005fd6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fbe:	f7fd fbc3 	bl	8003748 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e225      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8005fd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fda:	2202      	movs	r2, #2
 8005fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	fa93 f2a3 	rbit	r2, r3
 8005fe8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	fa93 f2a3 	rbit	r2, r3
 8006000:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006004:	601a      	str	r2, [r3, #0]
  return result;
 8006006:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800600a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f043 0302 	orr.w	r3, r3, #2
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d102      	bne.n	8006026 <HAL_RCC_OscConfig+0xa06>
 8006020:	4b90      	ldr	r3, [pc, #576]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	e00d      	b.n	8006042 <HAL_RCC_OscConfig+0xa22>
 8006026:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800602a:	2202      	movs	r2, #2
 800602c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	fa93 f2a3 	rbit	r2, r3
 8006038:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	4b89      	ldr	r3, [pc, #548]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006046:	2102      	movs	r1, #2
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	fa92 f1a2 	rbit	r1, r2
 8006054:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006058:	6011      	str	r1, [r2, #0]
  return result;
 800605a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	fab2 f282 	clz	r2, r2
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	f002 021f 	and.w	r2, r2, #31
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f202 	lsl.w	r2, r1, r2
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1a0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800607c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006084:	4b77      	ldr	r3, [pc, #476]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4a76      	ldr	r2, [pc, #472]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 800608a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81c2 	beq.w	8006420 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800609c:	4b71      	ldr	r3, [pc, #452]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	f000 819c 	beq.w	80063e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	f040 8114 	bne.w	80062de <HAL_RCC_OscConfig+0xcbe>
 80060b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	fa93 f2a3 	rbit	r2, r3
 80060ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80060ce:	601a      	str	r2, [r3, #0]
  return result;
 80060d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80060d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fd fb2c 	bl	8003748 <HAL_GetTick>
 80060f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f4:	e009      	b.n	800610a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f6:	f7fd fb27 	bl	8003748 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e18b      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 800610a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800610e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006114:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	fa93 f2a3 	rbit	r2, r3
 800611e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006122:	601a      	str	r2, [r3, #0]
  return result;
 8006124:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006128:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800612a:	fab3 f383 	clz	r3, r3
 800612e:	b2db      	uxtb	r3, r3
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d102      	bne.n	8006144 <HAL_RCC_OscConfig+0xb24>
 800613e:	4b49      	ldr	r3, [pc, #292]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	e01b      	b.n	800617c <HAL_RCC_OscConfig+0xb5c>
 8006144:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800614c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f2a3 	rbit	r2, r3
 8006158:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	fa93 f2a3 	rbit	r2, r3
 8006172:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	4b3a      	ldr	r3, [pc, #232]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006180:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	fa92 f1a2 	rbit	r1, r2
 8006190:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006194:	6011      	str	r1, [r2, #0]
  return result;
 8006196:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	fab2 f282 	clz	r2, r2
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	f042 0220 	orr.w	r2, r2, #32
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	f002 021f 	and.w	r2, r2, #31
 80061ac:	2101      	movs	r1, #1
 80061ae:	fa01 f202 	lsl.w	r2, r1, r2
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d19e      	bne.n	80060f6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	430b      	orrs	r3, r1
 80061ce:	4925      	ldr	r1, [pc, #148]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
 80061d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	fa93 f2a3 	rbit	r2, r3
 80061e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061ec:	601a      	str	r2, [r3, #0]
  return result;
 80061ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f4:	fab3 f383 	clz	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	461a      	mov	r2, r3
 8006206:	2301      	movs	r3, #1
 8006208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620a:	f7fd fa9d 	bl	8003748 <HAL_GetTick>
 800620e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006212:	e009      	b.n	8006228 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006214:	f7fd fa98 	bl	8003748 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e0fc      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8006228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800622c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006232:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	fa93 f2a3 	rbit	r2, r3
 800623c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006240:	601a      	str	r2, [r3, #0]
  return result;
 8006242:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006246:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <HAL_RCC_OscConfig+0xc48>
 800625c:	4b01      	ldr	r3, [pc, #4]	; (8006264 <HAL_RCC_OscConfig+0xc44>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	e01e      	b.n	80062a0 <HAL_RCC_OscConfig+0xc80>
 8006262:	bf00      	nop
 8006264:	40021000 	.word	0x40021000
 8006268:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800626c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	fa93 f2a3 	rbit	r2, r3
 800627c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	fa93 f2a3 	rbit	r2, r3
 8006296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_OscConfig+0xe0c>)
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80062a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062a8:	6011      	str	r1, [r2, #0]
 80062aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	fa92 f1a2 	rbit	r1, r2
 80062b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80062b8:	6011      	str	r1, [r2, #0]
  return result;
 80062ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	fab2 f282 	clz	r2, r2
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	f042 0220 	orr.w	r2, r2, #32
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	f002 021f 	and.w	r2, r2, #31
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f202 	lsl.w	r2, r1, r2
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d09b      	beq.n	8006214 <HAL_RCC_OscConfig+0xbf4>
 80062dc:	e0a0      	b.n	8006420 <HAL_RCC_OscConfig+0xe00>
 80062de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	fa93 f2a3 	rbit	r2, r3
 80062f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062f6:	601a      	str	r2, [r3, #0]
  return result;
 80062f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fd fa18 	bl	8003748 <HAL_GetTick>
 8006318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631c:	e009      	b.n	8006332 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631e:	f7fd fa13 	bl	8003748 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e077      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
 8006332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800633a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	fa93 f2a3 	rbit	r2, r3
 8006346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634a:	601a      	str	r2, [r3, #0]
  return result;
 800634c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006350:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006352:	fab3 f383 	clz	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d102      	bne.n	800636c <HAL_RCC_OscConfig+0xd4c>
 8006366:	4b31      	ldr	r3, [pc, #196]	; (800642c <HAL_RCC_OscConfig+0xe0c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	e01b      	b.n	80063a4 <HAL_RCC_OscConfig+0xd84>
 800636c:	f107 0320 	add.w	r3, r7, #32
 8006370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	f107 0320 	add.w	r3, r7, #32
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	fa93 f2a3 	rbit	r2, r3
 8006380:	f107 031c 	add.w	r3, r7, #28
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f107 0318 	add.w	r3, r7, #24
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	fa93 f2a3 	rbit	r2, r3
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	4b22      	ldr	r3, [pc, #136]	; (800642c <HAL_RCC_OscConfig+0xe0c>)
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f107 0210 	add.w	r2, r7, #16
 80063a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063ac:	6011      	str	r1, [r2, #0]
 80063ae:	f107 0210 	add.w	r2, r7, #16
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	fa92 f1a2 	rbit	r1, r2
 80063b8:	f107 020c 	add.w	r2, r7, #12
 80063bc:	6011      	str	r1, [r2, #0]
  return result;
 80063be:	f107 020c 	add.w	r2, r7, #12
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	fab2 f282 	clz	r2, r2
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	f042 0220 	orr.w	r2, r2, #32
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	f002 021f 	and.w	r2, r2, #31
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f202 	lsl.w	r2, r1, r2
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d19e      	bne.n	800631e <HAL_RCC_OscConfig+0xcfe>
 80063e0:	e01e      	b.n	8006420 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063e2:	1d3b      	adds	r3, r7, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e018      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063f0:	4b0e      	ldr	r3, [pc, #56]	; (800642c <HAL_RCC_OscConfig+0xe0c>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	429a      	cmp	r2, r3
 8006408:	d108      	bne.n	800641c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800640a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800640e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40021000 	.word	0x40021000

08006430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b09e      	sub	sp, #120	; 0x78
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e162      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006448:	4b90      	ldr	r3, [pc, #576]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d910      	bls.n	8006478 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b8d      	ldr	r3, [pc, #564]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 0207 	bic.w	r2, r3, #7
 800645e:	498b      	ldr	r1, [pc, #556]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b89      	ldr	r3, [pc, #548]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e14a      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006484:	4b82      	ldr	r3, [pc, #520]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	497f      	ldr	r1, [pc, #508]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80dc 	beq.w	800665c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d13c      	bne.n	8006526 <HAL_RCC_ClockConfig+0xf6>
 80064ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b4:	fa93 f3a3 	rbit	r3, r3
 80064b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80064ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064bc:	fab3 f383 	clz	r3, r3
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d102      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xa6>
 80064d0:	4b6f      	ldr	r3, [pc, #444]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	e00f      	b.n	80064f6 <HAL_RCC_ClockConfig+0xc6>
 80064d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064de:	fa93 f3a3 	rbit	r3, r3
 80064e2:	667b      	str	r3, [r7, #100]	; 0x64
 80064e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
 80064ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064f2:	4b67      	ldr	r3, [pc, #412]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80064fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064fe:	fa92 f2a2 	rbit	r2, r2
 8006502:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006506:	fab2 f282 	clz	r2, r2
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	f042 0220 	orr.w	r2, r2, #32
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	f002 021f 	and.w	r2, r2, #31
 8006516:	2101      	movs	r1, #1
 8006518:	fa01 f202 	lsl.w	r2, r1, r2
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d17b      	bne.n	800661a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0f3      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d13c      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x178>
 800652e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653e:	fab3 f383 	clz	r3, r3
 8006542:	b2db      	uxtb	r3, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f043 0301 	orr.w	r3, r3, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d102      	bne.n	8006558 <HAL_RCC_ClockConfig+0x128>
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	e00f      	b.n	8006578 <HAL_RCC_ClockConfig+0x148>
 8006558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800655c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006560:	fa93 f3a3 	rbit	r3, r3
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	643b      	str	r3, [r7, #64]	; 0x40
 800656c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	4b46      	ldr	r3, [pc, #280]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800657c:	63ba      	str	r2, [r7, #56]	; 0x38
 800657e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006580:	fa92 f2a2 	rbit	r2, r2
 8006584:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006588:	fab2 f282 	clz	r2, r2
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	f042 0220 	orr.w	r2, r2, #32
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	f002 021f 	and.w	r2, r2, #31
 8006598:	2101      	movs	r1, #1
 800659a:	fa01 f202 	lsl.w	r2, r1, r2
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d13a      	bne.n	800661a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0b2      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
 80065a8:	2302      	movs	r3, #2
 80065aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	fa93 f3a3 	rbit	r3, r3
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b6:	fab3 f383 	clz	r3, r3
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d102      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1a0>
 80065ca:	4b31      	ldr	r3, [pc, #196]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	e00d      	b.n	80065ec <HAL_RCC_ClockConfig+0x1bc>
 80065d0:	2302      	movs	r3, #2
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	fa93 f3a3 	rbit	r3, r3
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
 80065dc:	2302      	movs	r3, #2
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	fa93 f3a3 	rbit	r3, r3
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	4b29      	ldr	r3, [pc, #164]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	2202      	movs	r2, #2
 80065ee:	61ba      	str	r2, [r7, #24]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	fa92 f2a2 	rbit	r2, r2
 80065f6:	617a      	str	r2, [r7, #20]
  return result;
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	fab2 f282 	clz	r2, r2
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	f042 0220 	orr.w	r2, r2, #32
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	f002 021f 	and.w	r2, r2, #31
 800660a:	2101      	movs	r1, #1
 800660c:	fa01 f202 	lsl.w	r2, r1, r2
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e079      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f023 0203 	bic.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	491a      	ldr	r1, [pc, #104]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800662c:	f7fd f88c 	bl	8003748 <HAL_GetTick>
 8006630:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006632:	e00a      	b.n	800664a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006634:	f7fd f888 	bl	8003748 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e061      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664a:	4b11      	ldr	r3, [pc, #68]	; (8006690 <HAL_RCC_ClockConfig+0x260>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f003 020c 	and.w	r2, r3, #12
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	429a      	cmp	r2, r3
 800665a:	d1eb      	bne.n	8006634 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d214      	bcs.n	8006694 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 0207 	bic.w	r2, r3, #7
 8006672:	4906      	ldr	r1, [pc, #24]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	4313      	orrs	r3, r2
 8006678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667a:	4b04      	ldr	r3, [pc, #16]	; (800668c <HAL_RCC_ClockConfig+0x25c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e040      	b.n	800670e <HAL_RCC_ClockConfig+0x2de>
 800668c:	40022000 	.word	0x40022000
 8006690:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a0:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCC_ClockConfig+0x2e8>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	491a      	ldr	r1, [pc, #104]	; (8006718 <HAL_RCC_ClockConfig+0x2e8>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066be:	4b16      	ldr	r3, [pc, #88]	; (8006718 <HAL_RCC_ClockConfig+0x2e8>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4912      	ldr	r1, [pc, #72]	; (8006718 <HAL_RCC_ClockConfig+0x2e8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066d2:	f000 f829 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 80066d6:	4601      	mov	r1, r0
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <HAL_RCC_ClockConfig+0x2e8>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e0:	22f0      	movs	r2, #240	; 0xf0
 80066e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	fa92 f2a2 	rbit	r2, r2
 80066ea:	60fa      	str	r2, [r7, #12]
  return result;
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	fab2 f282 	clz	r2, r2
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	40d3      	lsrs	r3, r2
 80066f6:	4a09      	ldr	r2, [pc, #36]	; (800671c <HAL_RCC_ClockConfig+0x2ec>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	fa21 f303 	lsr.w	r3, r1, r3
 80066fe:	4a08      	ldr	r2, [pc, #32]	; (8006720 <HAL_RCC_ClockConfig+0x2f0>)
 8006700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <HAL_RCC_ClockConfig+0x2f4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7fc ffda 	bl	80036c0 <HAL_InitTick>
  
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3778      	adds	r7, #120	; 0x78
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
 800671c:	0800c768 	.word	0x0800c768
 8006720:	20000004 	.word	0x20000004
 8006724:	20000008 	.word	0x20000008

08006728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	b08b      	sub	sp, #44	; 0x2c
 800672c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b04      	cmp	r3, #4
 8006750:	d002      	beq.n	8006758 <HAL_RCC_GetSysClockFreq+0x30>
 8006752:	2b08      	cmp	r3, #8
 8006754:	d003      	beq.n	800675e <HAL_RCC_GetSysClockFreq+0x36>
 8006756:	e03c      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006758:	4b24      	ldr	r3, [pc, #144]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800675a:	623b      	str	r3, [r7, #32]
      break;
 800675c:	e03c      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006764:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006768:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	fa92 f2a2 	rbit	r2, r2
 8006770:	607a      	str	r2, [r7, #4]
  return result;
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	fab2 f282 	clz	r2, r2
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	40d3      	lsrs	r3, r2
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	220f      	movs	r2, #15
 800678c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	fa92 f2a2 	rbit	r2, r2
 8006794:	60fa      	str	r2, [r7, #12]
  return result;
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	fab2 f282 	clz	r2, r2
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	40d3      	lsrs	r3, r2
 80067a0:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80067a2:	5cd3      	ldrb	r3, [r2, r3]
 80067a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067b0:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	e004      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4a0c      	ldr	r2, [pc, #48]	; (80067f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	623b      	str	r3, [r7, #32]
      break;
 80067d0:	e002      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80067d4:	623b      	str	r3, [r7, #32]
      break;
 80067d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	372c      	adds	r7, #44	; 0x2c
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	007a1200 	.word	0x007a1200
 80067f0:	0800c780 	.word	0x0800c780
 80067f4:	0800c790 	.word	0x0800c790
 80067f8:	003d0900 	.word	0x003d0900

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006800:	4b03      	ldr	r3, [pc, #12]	; (8006810 <HAL_RCC_GetHCLKFreq+0x14>)
 8006802:	681b      	ldr	r3, [r3, #0]
}
 8006804:	4618      	mov	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20000004 	.word	0x20000004

08006814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800681a:	f7ff ffef 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 800681e:	4601      	mov	r1, r0
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006828:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800682c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	fa92 f2a2 	rbit	r2, r2
 8006834:	603a      	str	r2, [r7, #0]
  return result;
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	fab2 f282 	clz	r2, r2
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	40d3      	lsrs	r3, r2
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006842:	5cd3      	ldrb	r3, [r2, r3]
 8006844:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000
 8006854:	0800c778 	.word	0x0800c778

08006858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800685e:	f7ff ffcd 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006862:	4601      	mov	r1, r0
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800686c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	fa92 f2a2 	rbit	r2, r2
 8006878:	603a      	str	r2, [r7, #0]
  return result;
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	fab2 f282 	clz	r2, r2
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	40d3      	lsrs	r3, r2
 8006884:	4a04      	ldr	r2, [pc, #16]	; (8006898 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006886:	5cd3      	ldrb	r3, [r2, r3]
 8006888:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40021000 	.word	0x40021000
 8006898:	0800c778 	.word	0x0800c778

0800689c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b092      	sub	sp, #72	; 0x48
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80d4 	beq.w	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c0:	4b4e      	ldr	r3, [pc, #312]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10e      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068cc:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4a4a      	ldr	r2, [pc, #296]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d6:	61d3      	str	r3, [r2, #28]
 80068d8:	4b48      	ldr	r3, [pc, #288]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ea:	4b45      	ldr	r3, [pc, #276]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068f6:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a41      	ldr	r2, [pc, #260]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006900:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006902:	f7fc ff21 	bl	8003748 <HAL_GetTick>
 8006906:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006908:	e008      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690a:	f7fc ff1d 	bl	8003748 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	; 0x64
 8006916:	d901      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e169      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	4b38      	ldr	r3, [pc, #224]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006928:	4b34      	ldr	r3, [pc, #208]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8084 	beq.w	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006944:	429a      	cmp	r2, r3
 8006946:	d07c      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006948:	4b2c      	ldr	r3, [pc, #176]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	fa93 f3a3 	rbit	r3, r3
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006962:	fab3 f383 	clz	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	461a      	mov	r2, r3
 8006972:	2301      	movs	r3, #1
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	fa93 f3a3 	rbit	r3, r3
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006986:	fab3 f383 	clz	r3, r3
 800698a:	b2db      	uxtb	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	4b1d      	ldr	r3, [pc, #116]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	461a      	mov	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d04b      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069aa:	f7fc fecd 	bl	8003748 <HAL_GetTick>
 80069ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fc fec9 	bl	8003748 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e113      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80069c8:	2302      	movs	r3, #2
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	fa93 f3a3 	rbit	r3, r3
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	2302      	movs	r3, #2
 80069d6:	623b      	str	r3, [r7, #32]
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	fa93 f3a3 	rbit	r3, r3
 80069de:	61fb      	str	r3, [r7, #28]
  return result;
 80069e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e2:	fab3 f383 	clz	r3, r3
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d108      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80069f6:	4b01      	ldr	r3, [pc, #4]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	e00d      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80069fc:	40021000 	.word	0x40021000
 8006a00:	40007000 	.word	0x40007000
 8006a04:	10908100 	.word	0x10908100
 8006a08:	2302      	movs	r3, #2
 8006a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	fa93 f3a3 	rbit	r3, r3
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	4b78      	ldr	r3, [pc, #480]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	2202      	movs	r2, #2
 8006a1a:	613a      	str	r2, [r7, #16]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	fa92 f2a2 	rbit	r2, r2
 8006a22:	60fa      	str	r2, [r7, #12]
  return result;
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	fab2 f282 	clz	r2, r2
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	f002 021f 	and.w	r2, r2, #31
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0b7      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006a42:	4b6d      	ldr	r3, [pc, #436]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	496a      	ldr	r1, [pc, #424]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5c:	4b66      	ldr	r3, [pc, #408]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	4a65      	ldr	r2, [pc, #404]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a74:	4b60      	ldr	r3, [pc, #384]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	f023 0203 	bic.w	r2, r3, #3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	495d      	ldr	r1, [pc, #372]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d008      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a92:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4956      	ldr	r1, [pc, #344]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ab0:	4b51      	ldr	r3, [pc, #324]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	494e      	ldr	r1, [pc, #312]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ace:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f023 0210 	bic.w	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	4947      	ldr	r1, [pc, #284]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006aec:	4b42      	ldr	r3, [pc, #264]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	493f      	ldr	r1, [pc, #252]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b0a:	4b3b      	ldr	r3, [pc, #236]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f023 0220 	bic.w	r2, r3, #32
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4938      	ldr	r1, [pc, #224]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b28:	4b33      	ldr	r3, [pc, #204]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	4930      	ldr	r1, [pc, #192]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b46:	4b2c      	ldr	r3, [pc, #176]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	4929      	ldr	r1, [pc, #164]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d008      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4921      	ldr	r1, [pc, #132]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b82:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	491a      	ldr	r1, [pc, #104]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006ba0:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	4912      	ldr	r1, [pc, #72]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d008      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	490b      	ldr	r1, [pc, #44]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	4903      	ldr	r1, [pc, #12]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3748      	adds	r7, #72	; 0x48
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40021000 	.word	0x40021000

08006bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e049      	b.n	8006ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fc fb14 	bl	8003250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f000 fc14 	bl	8007468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d001      	beq.n	8006cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e04a      	b.n	8006d5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x6c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cee:	d013      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <HAL_TIM_Base_Start_IT+0xc0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x6c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x6c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a1a      	ldr	r2, [pc, #104]	; (8006d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x6c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a19      	ldr	r2, [pc, #100]	; (8006d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d115      	bne.n	8006d44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d015      	beq.n	8006d56 <HAL_TIM_Base_Start_IT+0xaa>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d011      	beq.n	8006d56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e000      	b.n	8006d58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40013400 	.word	0x40013400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	00010007 	.word	0x00010007

08006d80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10f      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	f240 4344 	movw	r3, #1092	; 0x444
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b086      	sub	sp, #24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e097      	b.n	8006f22 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fc fa60 	bl	80032cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f000 fb18 	bl	8007468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	4313      	orrs	r3, r2
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e7e:	f023 030c 	bic.w	r3, r3, #12
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	011a      	lsls	r2, r3, #4
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	031b      	lsls	r3, r3, #12
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ebc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ec4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f4a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f52:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d110      	bne.n	8006f7c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d102      	bne.n	8006f66 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f60:	7b7b      	ldrb	r3, [r7, #13]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d001      	beq.n	8006f6a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e069      	b.n	800703e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7a:	e031      	b.n	8006fe0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d110      	bne.n	8006fa4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d102      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f88:	7b3b      	ldrb	r3, [r7, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e055      	b.n	800703e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa2:	e01d      	b.n	8006fe0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d108      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d105      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb0:	7b7b      	ldrb	r3, [r7, #13]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d102      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb6:	7b3b      	ldrb	r3, [r7, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e03e      	b.n	800703e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_Encoder_Start+0xc4>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d008      	beq.n	8006ffe <HAL_TIM_Encoder_Start+0xd4>
 8006fec:	e00f      	b.n	800700e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb60 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 8006ffc:	e016      	b.n	800702c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	2104      	movs	r1, #4
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fb58 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 800700c:	e00e      	b.n	800702c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2201      	movs	r2, #1
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fb50 	bl	80076bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	2104      	movs	r1, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fb49 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 800702a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d122      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d11b      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0202 	mvn.w	r2, #2
 8007072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9ce 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 800708e:	e005      	b.n	800709c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f9c0 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9d1 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d122      	bne.n	80070f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d11b      	bne.n	80070f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f06f 0204 	mvn.w	r2, #4
 80070c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9a4 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 80070e2:	e005      	b.n	80070f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f996 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9a7 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b08      	cmp	r3, #8
 8007102:	d122      	bne.n	800714a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b08      	cmp	r3, #8
 8007110:	d11b      	bne.n	800714a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f06f 0208 	mvn.w	r2, #8
 800711a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2204      	movs	r2, #4
 8007120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f97a 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 8007136:	e005      	b.n	8007144 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f96c 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f97d 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d122      	bne.n	800719e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b10      	cmp	r3, #16
 8007164:	d11b      	bne.n	800719e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f06f 0210 	mvn.w	r2, #16
 800716e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2208      	movs	r2, #8
 8007174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f950 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 800718a:	e005      	b.n	8007198 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f942 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f953 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d10e      	bne.n	80071ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d107      	bne.n	80071ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f06f 0201 	mvn.w	r2, #1
 80071c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fb fbef 	bl	80029a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d10e      	bne.n	80071f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d107      	bne.n	80071f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb13 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fb06 	bl	8007830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f901 	bl	8007452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b20      	cmp	r3, #32
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0220 	mvn.w	r2, #32
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fac6 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_TIM_ConfigClockSource+0x1c>
 800729c:	2302      	movs	r3, #2
 800729e:	e0b6      	b.n	800740e <HAL_TIM_ConfigClockSource+0x18a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072dc:	d03e      	beq.n	800735c <HAL_TIM_ConfigClockSource+0xd8>
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e2:	f200 8087 	bhi.w	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ea:	f000 8086 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x176>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d87f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 80072f4:	2b70      	cmp	r3, #112	; 0x70
 80072f6:	d01a      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xaa>
 80072f8:	2b70      	cmp	r3, #112	; 0x70
 80072fa:	d87b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 80072fc:	2b60      	cmp	r3, #96	; 0x60
 80072fe:	d050      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x11e>
 8007300:	2b60      	cmp	r3, #96	; 0x60
 8007302:	d877      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 8007304:	2b50      	cmp	r3, #80	; 0x50
 8007306:	d03c      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0xfe>
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	d873      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 800730c:	2b40      	cmp	r3, #64	; 0x40
 800730e:	d058      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x13e>
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d86f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 8007314:	2b30      	cmp	r3, #48	; 0x30
 8007316:	d064      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15e>
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d86b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d060      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15e>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d867      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d05c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15e>
 8007328:	2b10      	cmp	r3, #16
 800732a:	d05a      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15e>
 800732c:	e062      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6899      	ldr	r1, [r3, #8]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f000 f99d 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	609a      	str	r2, [r3, #8]
      break;
 800735a:	e04f      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6899      	ldr	r1, [r3, #8]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f000 f986 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800737e:	609a      	str	r2, [r3, #8]
      break;
 8007380:	e03c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	f000 f8fa 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2150      	movs	r1, #80	; 0x50
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f953 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073a0:	e02c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f000 f919 	bl	80075e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2160      	movs	r1, #96	; 0x60
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f943 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073c0:	e01c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f000 f8da 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2140      	movs	r1, #64	; 0x40
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f933 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f000 f92a 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073f2:	e003      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3c      	ldr	r2, [pc, #240]	; (800756c <TIM_Base_SetConfig+0x104>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00f      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d00b      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a39      	ldr	r2, [pc, #228]	; (8007570 <TIM_Base_SetConfig+0x108>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a38      	ldr	r2, [pc, #224]	; (8007574 <TIM_Base_SetConfig+0x10c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a37      	ldr	r2, [pc, #220]	; (8007578 <TIM_Base_SetConfig+0x110>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2d      	ldr	r2, [pc, #180]	; (800756c <TIM_Base_SetConfig+0x104>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <TIM_Base_SetConfig+0x108>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a29      	ldr	r2, [pc, #164]	; (8007574 <TIM_Base_SetConfig+0x10c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a28      	ldr	r2, [pc, #160]	; (8007578 <TIM_Base_SetConfig+0x110>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a27      	ldr	r2, [pc, #156]	; (800757c <TIM_Base_SetConfig+0x114>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a26      	ldr	r2, [pc, #152]	; (8007580 <TIM_Base_SetConfig+0x118>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <TIM_Base_SetConfig+0x11c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <TIM_Base_SetConfig+0x104>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0xe8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a11      	ldr	r2, [pc, #68]	; (8007578 <TIM_Base_SetConfig+0x110>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0xe8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <TIM_Base_SetConfig+0x114>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0xe8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a0f      	ldr	r2, [pc, #60]	; (8007580 <TIM_Base_SetConfig+0x118>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0xe8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <TIM_Base_SetConfig+0x11c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d103      	bne.n	8007558 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	615a      	str	r2, [r3, #20]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400
 8007584:	40014800 	.word	0x40014800

08007588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f023 030a 	bic.w	r3, r3, #10
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b087      	sub	sp, #28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	f043 0307 	orr.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	431a      	orrs	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2201      	movs	r2, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	43db      	mvns	r3, r3
 80076de:	401a      	ands	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800771c:	2302      	movs	r3, #2
 800771e:	e063      	b.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2b      	ldr	r2, [pc, #172]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2a      	ldr	r2, [pc, #168]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800775a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1b      	ldr	r2, [pc, #108]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d018      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d013      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a18      	ldr	r2, [pc, #96]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00e      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a17      	ldr	r2, [pc, #92]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d009      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a13      	ldr	r2, [pc, #76]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d10c      	bne.n	80077d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40013400 	.word	0x40013400
 80077fc:	40000400 	.word	0x40000400
 8007800:	40000800 	.word	0x40000800
 8007804:	40014000 	.word	0x40014000

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e040      	b.n	80078d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb fd74 	bl	8003354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8c0 	bl	8007a08 <UART_SetConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e022      	b.n	80078d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa88 	bl	8007db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb0f 	bl	8007ef4 <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 8082 	bne.w	80079fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_UART_Transmit+0x26>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07a      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x38>
 8007914:	2302      	movs	r3, #2
 8007916:	e073      	b.n	8007a00 <HAL_UART_Transmit+0x120>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2221      	movs	r2, #33	; 0x21
 800792c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792e:	f7fb ff0b 	bl	8003748 <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d108      	bne.n	8007960 <HAL_UART_Transmit+0x80>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e003      	b.n	8007968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007970:	e02d      	b.n	80079ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fb02 	bl	8007f86 <UART_WaitOnFlagUntilTimeout>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e039      	b.n	8007a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799e:	b292      	uxth	r2, r2
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	3302      	adds	r3, #2
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e008      	b.n	80079bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	b292      	uxth	r2, r2
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1cb      	bne.n	8007972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2140      	movs	r1, #64	; 0x40
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 face 	bl	8007f86 <UART_WaitOnFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e005      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a36:	f023 030c 	bic.w	r3, r3, #12
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	6979      	ldr	r1, [r7, #20]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4aae      	ldr	r2, [pc, #696]	; (8007d3c <UART_SetConfig+0x334>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d120      	bne.n	8007aca <UART_SetConfig+0xc2>
 8007a88:	4bad      	ldr	r3, [pc, #692]	; (8007d40 <UART_SetConfig+0x338>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d817      	bhi.n	8007ac4 <UART_SetConfig+0xbc>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0x94>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007abf 	.word	0x08007abf
 8007aa8:	08007ab3 	.word	0x08007ab3
 8007aac:	2301      	movs	r3, #1
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e0b5      	b.n	8007c1e <UART_SetConfig+0x216>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	77fb      	strb	r3, [r7, #31]
 8007ab6:	e0b2      	b.n	8007c1e <UART_SetConfig+0x216>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	77fb      	strb	r3, [r7, #31]
 8007abc:	e0af      	b.n	8007c1e <UART_SetConfig+0x216>
 8007abe:	2308      	movs	r3, #8
 8007ac0:	77fb      	strb	r3, [r7, #31]
 8007ac2:	e0ac      	b.n	8007c1e <UART_SetConfig+0x216>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e0a9      	b.n	8007c1e <UART_SetConfig+0x216>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a9d      	ldr	r2, [pc, #628]	; (8007d44 <UART_SetConfig+0x33c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d124      	bne.n	8007b1e <UART_SetConfig+0x116>
 8007ad4:	4b9a      	ldr	r3, [pc, #616]	; (8007d40 <UART_SetConfig+0x338>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007adc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ae0:	d011      	beq.n	8007b06 <UART_SetConfig+0xfe>
 8007ae2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ae6:	d817      	bhi.n	8007b18 <UART_SetConfig+0x110>
 8007ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aec:	d011      	beq.n	8007b12 <UART_SetConfig+0x10a>
 8007aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af2:	d811      	bhi.n	8007b18 <UART_SetConfig+0x110>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <UART_SetConfig+0xf8>
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afc:	d006      	beq.n	8007b0c <UART_SetConfig+0x104>
 8007afe:	e00b      	b.n	8007b18 <UART_SetConfig+0x110>
 8007b00:	2300      	movs	r3, #0
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e08b      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b06:	2302      	movs	r3, #2
 8007b08:	77fb      	strb	r3, [r7, #31]
 8007b0a:	e088      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e085      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b12:	2308      	movs	r3, #8
 8007b14:	77fb      	strb	r3, [r7, #31]
 8007b16:	e082      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	77fb      	strb	r3, [r7, #31]
 8007b1c:	e07f      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a89      	ldr	r2, [pc, #548]	; (8007d48 <UART_SetConfig+0x340>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d124      	bne.n	8007b72 <UART_SetConfig+0x16a>
 8007b28:	4b85      	ldr	r3, [pc, #532]	; (8007d40 <UART_SetConfig+0x338>)
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007b30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b34:	d011      	beq.n	8007b5a <UART_SetConfig+0x152>
 8007b36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b3a:	d817      	bhi.n	8007b6c <UART_SetConfig+0x164>
 8007b3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b40:	d011      	beq.n	8007b66 <UART_SetConfig+0x15e>
 8007b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b46:	d811      	bhi.n	8007b6c <UART_SetConfig+0x164>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <UART_SetConfig+0x14c>
 8007b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b50:	d006      	beq.n	8007b60 <UART_SetConfig+0x158>
 8007b52:	e00b      	b.n	8007b6c <UART_SetConfig+0x164>
 8007b54:	2300      	movs	r3, #0
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e061      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	77fb      	strb	r3, [r7, #31]
 8007b5e:	e05e      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b60:	2304      	movs	r3, #4
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e05b      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b66:	2308      	movs	r3, #8
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e058      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e055      	b.n	8007c1e <UART_SetConfig+0x216>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a75      	ldr	r2, [pc, #468]	; (8007d4c <UART_SetConfig+0x344>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d124      	bne.n	8007bc6 <UART_SetConfig+0x1be>
 8007b7c:	4b70      	ldr	r3, [pc, #448]	; (8007d40 <UART_SetConfig+0x338>)
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b88:	d011      	beq.n	8007bae <UART_SetConfig+0x1a6>
 8007b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b8e:	d817      	bhi.n	8007bc0 <UART_SetConfig+0x1b8>
 8007b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b94:	d011      	beq.n	8007bba <UART_SetConfig+0x1b2>
 8007b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b9a:	d811      	bhi.n	8007bc0 <UART_SetConfig+0x1b8>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <UART_SetConfig+0x1a0>
 8007ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba4:	d006      	beq.n	8007bb4 <UART_SetConfig+0x1ac>
 8007ba6:	e00b      	b.n	8007bc0 <UART_SetConfig+0x1b8>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e037      	b.n	8007c1e <UART_SetConfig+0x216>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e034      	b.n	8007c1e <UART_SetConfig+0x216>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e031      	b.n	8007c1e <UART_SetConfig+0x216>
 8007bba:	2308      	movs	r3, #8
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e02e      	b.n	8007c1e <UART_SetConfig+0x216>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e02b      	b.n	8007c1e <UART_SetConfig+0x216>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a61      	ldr	r2, [pc, #388]	; (8007d50 <UART_SetConfig+0x348>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d124      	bne.n	8007c1a <UART_SetConfig+0x212>
 8007bd0:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <UART_SetConfig+0x338>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bdc:	d011      	beq.n	8007c02 <UART_SetConfig+0x1fa>
 8007bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007be2:	d817      	bhi.n	8007c14 <UART_SetConfig+0x20c>
 8007be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007be8:	d011      	beq.n	8007c0e <UART_SetConfig+0x206>
 8007bea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bee:	d811      	bhi.n	8007c14 <UART_SetConfig+0x20c>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <UART_SetConfig+0x1f4>
 8007bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bf8:	d006      	beq.n	8007c08 <UART_SetConfig+0x200>
 8007bfa:	e00b      	b.n	8007c14 <UART_SetConfig+0x20c>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e00d      	b.n	8007c1e <UART_SetConfig+0x216>
 8007c02:	2302      	movs	r3, #2
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e00a      	b.n	8007c1e <UART_SetConfig+0x216>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e007      	b.n	8007c1e <UART_SetConfig+0x216>
 8007c0e:	2308      	movs	r3, #8
 8007c10:	77fb      	strb	r3, [r7, #31]
 8007c12:	e004      	b.n	8007c1e <UART_SetConfig+0x216>
 8007c14:	2310      	movs	r3, #16
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e001      	b.n	8007c1e <UART_SetConfig+0x216>
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c26:	d15c      	bne.n	8007ce2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d827      	bhi.n	8007c7e <UART_SetConfig+0x276>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <UART_SetConfig+0x22c>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	08007c7f 	.word	0x08007c7f
 8007c44:	08007c6f 	.word	0x08007c6f
 8007c48:	08007c7f 	.word	0x08007c7f
 8007c4c:	08007c7f 	.word	0x08007c7f
 8007c50:	08007c7f 	.word	0x08007c7f
 8007c54:	08007c77 	.word	0x08007c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fe fddc 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	61b8      	str	r0, [r7, #24]
        break;
 8007c5e:	e013      	b.n	8007c88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c60:	f7fe fdfa 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 8007c64:	61b8      	str	r0, [r7, #24]
        break;
 8007c66:	e00f      	b.n	8007c88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c68:	4b3a      	ldr	r3, [pc, #232]	; (8007d54 <UART_SetConfig+0x34c>)
 8007c6a:	61bb      	str	r3, [r7, #24]
        break;
 8007c6c:	e00c      	b.n	8007c88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6e:	f7fe fd5b 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8007c72:	61b8      	str	r0, [r7, #24]
        break;
 8007c74:	e008      	b.n	8007c88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7a:	61bb      	str	r3, [r7, #24]
        break;
 8007c7c:	e004      	b.n	8007c88 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	77bb      	strb	r3, [r7, #30]
        break;
 8007c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8085 	beq.w	8007d9a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	005a      	lsls	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	085b      	lsrs	r3, r3, #1
 8007c9a:	441a      	add	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d916      	bls.n	8007cdc <UART_SetConfig+0x2d4>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d212      	bcs.n	8007cdc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 030f 	bic.w	r3, r3, #15
 8007cbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	89fa      	ldrh	r2, [r7, #14]
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e05e      	b.n	8007d9a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	77bb      	strb	r3, [r7, #30]
 8007ce0:	e05b      	b.n	8007d9a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce2:	7ffb      	ldrb	r3, [r7, #31]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d837      	bhi.n	8007d58 <UART_SetConfig+0x350>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x2e8>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d1d 	.word	0x08007d1d
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	08007d59 	.word	0x08007d59
 8007d00:	08007d2b 	.word	0x08007d2b
 8007d04:	08007d59 	.word	0x08007d59
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d59 	.word	0x08007d59
 8007d10:	08007d33 	.word	0x08007d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d14:	f7fe fd7e 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 8007d18:	61b8      	str	r0, [r7, #24]
        break;
 8007d1a:	e022      	b.n	8007d62 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d1c:	f7fe fd9c 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 8007d20:	61b8      	str	r0, [r7, #24]
        break;
 8007d22:	e01e      	b.n	8007d62 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <UART_SetConfig+0x34c>)
 8007d26:	61bb      	str	r3, [r7, #24]
        break;
 8007d28:	e01b      	b.n	8007d62 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d2a:	f7fe fcfd 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8007d2e:	61b8      	str	r0, [r7, #24]
        break;
 8007d30:	e017      	b.n	8007d62 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d36:	61bb      	str	r3, [r7, #24]
        break;
 8007d38:	e013      	b.n	8007d62 <UART_SetConfig+0x35a>
 8007d3a:	bf00      	nop
 8007d3c:	40013800 	.word	0x40013800
 8007d40:	40021000 	.word	0x40021000
 8007d44:	40004400 	.word	0x40004400
 8007d48:	40004800 	.word	0x40004800
 8007d4c:	40004c00 	.word	0x40004c00
 8007d50:	40005000 	.word	0x40005000
 8007d54:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	77bb      	strb	r3, [r7, #30]
        break;
 8007d60:	bf00      	nop
    }

    if (pclk != 0U)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d018      	beq.n	8007d9a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	085a      	lsrs	r2, r3, #1
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b0f      	cmp	r3, #15
 8007d82:	d908      	bls.n	8007d96 <UART_SetConfig+0x38e>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8a:	d204      	bcs.n	8007d96 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	e001      	b.n	8007d9a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007da6:	7fbb      	ldrb	r3, [r7, #30]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eae:	d10a      	bne.n	8007ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f04:	f7fb fc20 	bl	8003748 <HAL_GetTick>
 8007f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d10e      	bne.n	8007f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f82d 	bl	8007f86 <UART_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e023      	b.n	8007f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d10e      	bne.n	8007f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f817 	bl	8007f86 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e00d      	b.n	8007f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b09c      	sub	sp, #112	; 0x70
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f96:	e0a5      	b.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9e:	f000 80a1 	beq.w	80080e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa2:	f7fb fbd1 	bl	8003748 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d302      	bcc.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d13e      	bne.n	8008036 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	663b      	str	r3, [r7, #96]	; 0x60
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800800a:	64ba      	str	r2, [r7, #72]	; 0x48
 800800c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2220      	movs	r2, #32
 8008022:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e067      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d04f      	beq.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800804e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008052:	d147      	bne.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800805c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807c:	637b      	str	r3, [r7, #52]	; 0x34
 800807e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	613b      	str	r3, [r7, #16]
   return(result);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080b0:	623a      	str	r2, [r7, #32]
 80080b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	69f9      	ldr	r1, [r7, #28]
 80080b6:	6a3a      	ldr	r2, [r7, #32]
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e5      	bne.n	8008090 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e010      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69da      	ldr	r2, [r3, #28]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4013      	ands	r3, r2
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	429a      	cmp	r2, r3
 8008100:	f43f af4a 	beq.w	8007f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3770      	adds	r7, #112	; 0x70
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <_Znwj>:
 800810e:	2801      	cmp	r0, #1
 8008110:	bf38      	it	cc
 8008112:	2001      	movcc	r0, #1
 8008114:	b510      	push	{r4, lr}
 8008116:	4604      	mov	r4, r0
 8008118:	4620      	mov	r0, r4
 800811a:	f001 fbc9 	bl	80098b0 <malloc>
 800811e:	b930      	cbnz	r0, 800812e <_Znwj+0x20>
 8008120:	f000 fa30 	bl	8008584 <_ZSt15get_new_handlerv>
 8008124:	b908      	cbnz	r0, 800812a <_Znwj+0x1c>
 8008126:	f001 fb77 	bl	8009818 <abort>
 800812a:	4780      	blx	r0
 800812c:	e7f4      	b.n	8008118 <_Znwj+0xa>
 800812e:	bd10      	pop	{r4, pc}

08008130 <__cxa_pure_virtual>:
 8008130:	b508      	push	{r3, lr}
 8008132:	f000 fa21 	bl	8008578 <_ZSt9terminatev>

08008136 <_ZNSaIcEC1Ev>:
 8008136:	4770      	bx	lr

08008138 <_ZNSaIcED1Ev>:
 8008138:	4770      	bx	lr

0800813a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800813a:	b10a      	cbz	r2, 8008140 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800813c:	f001 bbc8 	b.w	80098d0 <memcpy>
 8008140:	4770      	bx	lr
	...

08008144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008144:	b508      	push	{r3, lr}
 8008146:	680b      	ldr	r3, [r1, #0]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814c:	d302      	bcc.n	8008154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800814e:	480d      	ldr	r0, [pc, #52]	; (8008184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008150:	f000 fa26 	bl	80085a0 <_ZSt20__throw_length_errorPKc>
 8008154:	4293      	cmp	r3, r2
 8008156:	d90b      	bls.n	8008170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008158:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800815c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008160:	d206      	bcs.n	8008170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008162:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008166:	bf2a      	itet	cs
 8008168:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800816c:	6008      	strcc	r0, [r1, #0]
 800816e:	600b      	strcs	r3, [r1, #0]
 8008170:	6808      	ldr	r0, [r1, #0]
 8008172:	3001      	adds	r0, #1
 8008174:	d501      	bpl.n	800817a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008176:	f000 fa0d 	bl	8008594 <_ZSt17__throw_bad_allocv>
 800817a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800817e:	f7ff bfc6 	b.w	800810e <_Znwj>
 8008182:	bf00      	nop
 8008184:	0800c7a0 	.word	0x0800c7a0

08008188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008188:	f850 3b08 	ldr.w	r3, [r0], #8
 800818c:	4283      	cmp	r3, r0
 800818e:	d002      	beq.n	8008196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008190:	4618      	mov	r0, r3
 8008192:	f000 b9e3 	b.w	800855c <_ZdlPv>
 8008196:	4770      	bx	lr

08008198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008198:	6840      	ldr	r0, [r0, #4]
 800819a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800819e:	3901      	subs	r1, #1
 80081a0:	1a09      	subs	r1, r1, r0
 80081a2:	4291      	cmp	r1, r2
 80081a4:	b508      	push	{r3, lr}
 80081a6:	d202      	bcs.n	80081ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f9f9 	bl	80085a0 <_ZSt20__throw_length_errorPKc>
 80081ae:	bd08      	pop	{r3, pc}

080081b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80081b0:	6803      	ldr	r3, [r0, #0]
 80081b2:	428b      	cmp	r3, r1
 80081b4:	d806      	bhi.n	80081c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80081b6:	6840      	ldr	r0, [r0, #4]
 80081b8:	4418      	add	r0, r3
 80081ba:	4281      	cmp	r1, r0
 80081bc:	bf94      	ite	ls
 80081be:	2000      	movls	r0, #0
 80081c0:	2001      	movhi	r0, #1
 80081c2:	4770      	bx	lr
 80081c4:	2001      	movs	r0, #1
 80081c6:	4770      	bx	lr

080081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80081c8:	2a01      	cmp	r2, #1
 80081ca:	b510      	push	{r4, lr}
 80081cc:	d102      	bne.n	80081d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80081ce:	780a      	ldrb	r2, [r1, #0]
 80081d0:	7002      	strb	r2, [r0, #0]
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	f7ff ffb1 	bl	800813a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80081d8:	e7fb      	b.n	80081d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80081da:	2a01      	cmp	r2, #1
 80081dc:	b430      	push	{r4, r5}
 80081de:	d103      	bne.n	80081e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80081e0:	780b      	ldrb	r3, [r1, #0]
 80081e2:	7003      	strb	r3, [r0, #0]
 80081e4:	bc30      	pop	{r4, r5}
 80081e6:	4770      	bx	lr
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d0fb      	beq.n	80081e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80081ec:	bc30      	pop	{r4, r5}
 80081ee:	f001 bb7d 	b.w	80098ec <memmove>

080081f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80081f2:	b508      	push	{r3, lr}
 80081f4:	1a52      	subs	r2, r2, r1
 80081f6:	f7ff ffe7 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80081fa:	bd08      	pop	{r3, pc}

080081fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	1a52      	subs	r2, r2, r1
 8008200:	f7ff ffe2 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008204:	bd08      	pop	{r3, pc}

08008206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008206:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800820a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800820c:	461f      	mov	r7, r3
 800820e:	6843      	ldr	r3, [r0, #4]
 8008210:	eb01 0802 	add.w	r8, r1, r2
 8008214:	1ab2      	subs	r2, r6, r2
 8008216:	441a      	add	r2, r3
 8008218:	eba3 0908 	sub.w	r9, r3, r8
 800821c:	4603      	mov	r3, r0
 800821e:	9201      	str	r2, [sp, #4]
 8008220:	f853 2b08 	ldr.w	r2, [r3], #8
 8008224:	429a      	cmp	r2, r3
 8008226:	bf18      	it	ne
 8008228:	6882      	ldrne	r2, [r0, #8]
 800822a:	460d      	mov	r5, r1
 800822c:	bf08      	it	eq
 800822e:	220f      	moveq	r2, #15
 8008230:	a901      	add	r1, sp, #4
 8008232:	4604      	mov	r4, r0
 8008234:	f7ff ff86 	bl	8008144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008238:	4682      	mov	sl, r0
 800823a:	b11d      	cbz	r5, 8008244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	f7ff ffc2 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008244:	b137      	cbz	r7, 8008254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008246:	b12e      	cbz	r6, 8008254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008248:	4632      	mov	r2, r6
 800824a:	4639      	mov	r1, r7
 800824c:	eb0a 0005 	add.w	r0, sl, r5
 8008250:	f7ff ffba 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	d007      	beq.n	800826a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800825a:	6821      	ldr	r1, [r4, #0]
 800825c:	4435      	add	r5, r6
 800825e:	464a      	mov	r2, r9
 8008260:	4441      	add	r1, r8
 8008262:	eb0a 0005 	add.w	r0, sl, r5
 8008266:	f7ff ffaf 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff ff8c 	bl	8008188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	f8c4 a000 	str.w	sl, [r4]
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	b002      	add	sp, #8
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800827e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800827e:	f100 0208 	add.w	r2, r0, #8
 8008282:	6002      	str	r2, [r0, #0]
 8008284:	2200      	movs	r2, #0
 8008286:	6042      	str	r2, [r0, #4]
 8008288:	7202      	strb	r2, [r0, #8]
 800828a:	4770      	bx	lr

0800828c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800828c:	b510      	push	{r4, lr}
 800828e:	4604      	mov	r4, r0
 8008290:	f7ff ff7a 	bl	8008188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008294:	4620      	mov	r0, r4
 8008296:	bd10      	pop	{r4, pc}

08008298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	460d      	mov	r5, r1
 800829c:	f851 3b08 	ldr.w	r3, [r1], #8
 80082a0:	686a      	ldr	r2, [r5, #4]
 80082a2:	4299      	cmp	r1, r3
 80082a4:	4604      	mov	r4, r0
 80082a6:	6800      	ldr	r0, [r0, #0]
 80082a8:	d10d      	bne.n	80082c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80082aa:	b10a      	cbz	r2, 80082b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 80082ac:	f7ff ff8c 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80082b0:	686b      	ldr	r3, [r5, #4]
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	2100      	movs	r1, #0
 80082b8:	54d1      	strb	r1, [r2, r3]
 80082ba:	682a      	ldr	r2, [r5, #0]
 80082bc:	2300      	movs	r3, #0
 80082be:	606b      	str	r3, [r5, #4]
 80082c0:	7013      	strb	r3, [r2, #0]
 80082c2:	4620      	mov	r0, r4
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c6:	e9c4 3200 	strd	r3, r2, [r4]
 80082ca:	f104 0708 	add.w	r7, r4, #8
 80082ce:	42b8      	cmp	r0, r7
 80082d0:	68ab      	ldr	r3, [r5, #8]
 80082d2:	bf18      	it	ne
 80082d4:	68a6      	ldrne	r6, [r4, #8]
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	bf08      	it	eq
 80082da:	2000      	moveq	r0, #0
 80082dc:	b110      	cbz	r0, 80082e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	60ae      	str	r6, [r5, #8]
 80082e2:	e7ea      	b.n	80082ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 80082e4:	6029      	str	r1, [r5, #0]
 80082e6:	e7e8      	b.n	80082ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

080082e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80082e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ee:	4614      	mov	r4, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	462a      	mov	r2, r5
 80082f4:	4689      	mov	r9, r1
 80082f6:	461f      	mov	r7, r3
 80082f8:	4621      	mov	r1, r4
 80082fa:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80082fc:	f7ff ff4c 	bl	8008198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008300:	4642      	mov	r2, r8
 8008302:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008306:	f852 6b08 	ldr.w	r6, [r2], #8
 800830a:	4296      	cmp	r6, r2
 800830c:	bf18      	it	ne
 800830e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8008312:	eba5 0b04 	sub.w	fp, r5, r4
 8008316:	eb03 0a0b 	add.w	sl, r3, fp
 800831a:	bf08      	it	eq
 800831c:	220f      	moveq	r2, #15
 800831e:	4552      	cmp	r2, sl
 8008320:	d351      	bcc.n	80083c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8008322:	444e      	add	r6, r9
 8008324:	4639      	mov	r1, r7
 8008326:	44a1      	add	r9, r4
 8008328:	4640      	mov	r0, r8
 800832a:	eba3 0909 	sub.w	r9, r3, r9
 800832e:	f7ff ff3f 	bl	80081b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8008332:	b180      	cbz	r0, 8008356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	d006      	beq.n	8008348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800833a:	42ac      	cmp	r4, r5
 800833c:	d004      	beq.n	8008348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800833e:	464a      	mov	r2, r9
 8008340:	1931      	adds	r1, r6, r4
 8008342:	1970      	adds	r0, r6, r5
 8008344:	f7ff ff49 	bl	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008348:	b315      	cbz	r5, 8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800834a:	462a      	mov	r2, r5
 800834c:	4639      	mov	r1, r7
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff ff3a 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008354:	e01c      	b.n	8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8008356:	b135      	cbz	r5, 8008366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8008358:	42ac      	cmp	r4, r5
 800835a:	d33c      	bcc.n	80083d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800835c:	462a      	mov	r2, r5
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	f7ff ff3a 	bl	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d011      	beq.n	8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800836c:	42ac      	cmp	r4, r5
 800836e:	d00f      	beq.n	8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8008370:	464a      	mov	r2, r9
 8008372:	1931      	adds	r1, r6, r4
 8008374:	1970      	adds	r0, r6, r5
 8008376:	f7ff ff30 	bl	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800837a:	42ac      	cmp	r4, r5
 800837c:	d208      	bcs.n	8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800837e:	4434      	add	r4, r6
 8008380:	197b      	adds	r3, r7, r5
 8008382:	429c      	cmp	r4, r3
 8008384:	d30f      	bcc.n	80083a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8008386:	462a      	mov	r2, r5
 8008388:	4639      	mov	r1, r7
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff25 	bl	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008390:	f8d8 3000 	ldr.w	r3, [r8]
 8008394:	f8c8 a004 	str.w	sl, [r8, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	4640      	mov	r0, r8
 800839c:	f803 200a 	strb.w	r2, [r3, sl]
 80083a0:	b003      	add	sp, #12
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	42bc      	cmp	r4, r7
 80083a8:	d803      	bhi.n	80083b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80083aa:	462a      	mov	r2, r5
 80083ac:	eb07 010b 	add.w	r1, r7, fp
 80083b0:	e7cd      	b.n	800834e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80083b2:	1be4      	subs	r4, r4, r7
 80083b4:	4622      	mov	r2, r4
 80083b6:	4639      	mov	r1, r7
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ff0e 	bl	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80083be:	1b2a      	subs	r2, r5, r4
 80083c0:	1971      	adds	r1, r6, r5
 80083c2:	1930      	adds	r0, r6, r4
 80083c4:	e7c4      	b.n	8008350 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80083c6:	9500      	str	r5, [sp, #0]
 80083c8:	463b      	mov	r3, r7
 80083ca:	4622      	mov	r2, r4
 80083cc:	4649      	mov	r1, r9
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7ff ff19 	bl	8008206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80083d4:	e7dc      	b.n	8008390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80083d6:	f1b9 0f00 	cmp.w	r9, #0
 80083da:	d0d0      	beq.n	800837e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80083dc:	e7c8      	b.n	8008370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80083de:	bf00      	nop
 80083e0:	0800c7b8 	.word	0x0800c7b8

080083e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80083e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	9103      	str	r1, [sp, #12]
 80083ec:	f7f7 ff40 	bl	8000270 <strlen>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	9000      	str	r0, [sp, #0]
 80083f4:	6862      	ldr	r2, [r4, #4]
 80083f6:	2100      	movs	r1, #0
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7ff ff75 	bl	80082e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80083fe:	b004      	add	sp, #16
 8008400:	bd10      	pop	{r4, pc}

08008402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8008402:	b508      	push	{r3, lr}
 8008404:	f7ff ffee 	bl	80083e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8008408:	bd08      	pop	{r3, pc}

0800840a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800840a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	4623      	mov	r3, r4
 8008410:	6840      	ldr	r0, [r0, #4]
 8008412:	f853 6b08 	ldr.w	r6, [r3], #8
 8008416:	429e      	cmp	r6, r3
 8008418:	bf18      	it	ne
 800841a:	68a3      	ldrne	r3, [r4, #8]
 800841c:	eb00 0502 	add.w	r5, r0, r2
 8008420:	bf08      	it	eq
 8008422:	230f      	moveq	r3, #15
 8008424:	429d      	cmp	r5, r3
 8008426:	d80a      	bhi.n	800843e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8008428:	b112      	cbz	r2, 8008430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800842a:	4430      	add	r0, r6
 800842c:	f7ff fecc 	bl	80081c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6065      	str	r5, [r4, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	4620      	mov	r0, r4
 8008438:	555a      	strb	r2, [r3, r5]
 800843a:	b002      	add	sp, #8
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	9200      	str	r2, [sp, #0]
 8008440:	460b      	mov	r3, r1
 8008442:	2200      	movs	r2, #0
 8008444:	4601      	mov	r1, r0
 8008446:	4620      	mov	r0, r4
 8008448:	f7ff fedd 	bl	8008206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800844c:	e7f0      	b.n	8008430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

08008450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8008450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	460d      	mov	r5, r1
 8008458:	f7f7 ff0a 	bl	8000270 <strlen>
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	4602      	mov	r2, r0
 8008462:	2100      	movs	r1, #0
 8008464:	4620      	mov	r0, r4
 8008466:	f7ff fe97 	bl	8008198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	4629      	mov	r1, r5
 800846e:	4620      	mov	r0, r4
 8008470:	f7ff ffcb 	bl	800840a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8008474:	b003      	add	sp, #12
 8008476:	bd30      	pop	{r4, r5, pc}
 8008478:	0800c7d1 	.word	0x0800c7d1

0800847c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	4770      	bx	lr

08008480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8008480:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008482:	4604      	mov	r4, r0
 8008484:	4616      	mov	r6, r2
 8008486:	460d      	mov	r5, r1
 8008488:	b919      	cbnz	r1, 8008492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800848a:	b112      	cbz	r2, 8008492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800848c:	480d      	ldr	r0, [pc, #52]	; (80084c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800848e:	f000 f884 	bl	800859a <_ZSt19__throw_logic_errorPKc>
 8008492:	1b73      	subs	r3, r6, r5
 8008494:	2b0f      	cmp	r3, #15
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	d907      	bls.n	80084aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800849a:	2200      	movs	r2, #0
 800849c:	a901      	add	r1, sp, #4
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff fe50 	bl	8008144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	60a3      	str	r3, [r4, #8]
 80084aa:	4632      	mov	r2, r6
 80084ac:	4629      	mov	r1, r5
 80084ae:	6820      	ldr	r0, [r4, #0]
 80084b0:	f7ff fe9f 	bl	80081f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80084b4:	9b01      	ldr	r3, [sp, #4]
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	2100      	movs	r1, #0
 80084bc:	54d1      	strb	r1, [r2, r3]
 80084be:	b002      	add	sp, #8
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	bf00      	nop
 80084c4:	0800c7e6 	.word	0x0800c7e6

080084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	f100 0308 	add.w	r3, r0, #8
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	e9d1 5200 	ldrd	r5, r2, [r1]
 80084d4:	4604      	mov	r4, r0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	442a      	add	r2, r5
 80084dc:	4629      	mov	r1, r5
 80084de:	f7ff ffcf 	bl	8008480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80084e2:	4620      	mov	r0, r4
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080084e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80084e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ea:	4604      	mov	r4, r0
 80084ec:	4616      	mov	r6, r2
 80084ee:	460d      	mov	r5, r1
 80084f0:	b919      	cbnz	r1, 80084fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80084f2:	b112      	cbz	r2, 80084fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80084f4:	480d      	ldr	r0, [pc, #52]	; (800852c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80084f6:	f000 f850 	bl	800859a <_ZSt19__throw_logic_errorPKc>
 80084fa:	1b73      	subs	r3, r6, r5
 80084fc:	2b0f      	cmp	r3, #15
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	d907      	bls.n	8008512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008502:	2200      	movs	r2, #0
 8008504:	a901      	add	r1, sp, #4
 8008506:	4620      	mov	r0, r4
 8008508:	f7ff fe1c 	bl	8008144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	4632      	mov	r2, r6
 8008514:	4629      	mov	r1, r5
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	f7ff fe70 	bl	80081fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	2100      	movs	r1, #0
 8008524:	54d1      	strb	r1, [r2, r3]
 8008526:	b002      	add	sp, #8
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	bf00      	nop
 800852c:	0800c7e6 	.word	0x0800c7e6

08008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	f100 0308 	add.w	r3, r0, #8
 8008536:	4604      	mov	r4, r0
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	460d      	mov	r5, r1
 800853c:	b159      	cbz	r1, 8008556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800853e:	4608      	mov	r0, r1
 8008540:	f7f7 fe96 	bl	8000270 <strlen>
 8008544:	182a      	adds	r2, r5, r0
 8008546:	4620      	mov	r0, r4
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	4629      	mov	r1, r5
 800854e:	f7ff ffcb 	bl	80084e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008552:	4620      	mov	r0, r4
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800855a:	e7f4      	b.n	8008546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800855c <_ZdlPv>:
 800855c:	f001 b9b0 	b.w	80098c0 <free>

08008560 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008560:	b508      	push	{r3, lr}
 8008562:	4780      	blx	r0
 8008564:	f001 f958 	bl	8009818 <abort>

08008568 <_ZSt13get_terminatev>:
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <_ZSt13get_terminatev+0xc>)
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	f3bf 8f5b 	dmb	ish
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000010 	.word	0x20000010

08008578 <_ZSt9terminatev>:
 8008578:	b508      	push	{r3, lr}
 800857a:	f7ff fff5 	bl	8008568 <_ZSt13get_terminatev>
 800857e:	f7ff ffef 	bl	8008560 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008584 <_ZSt15get_new_handlerv>:
 8008584:	4b02      	ldr	r3, [pc, #8]	; (8008590 <_ZSt15get_new_handlerv+0xc>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	f3bf 8f5b 	dmb	ish
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200005d0 	.word	0x200005d0

08008594 <_ZSt17__throw_bad_allocv>:
 8008594:	b508      	push	{r3, lr}
 8008596:	f001 f93f 	bl	8009818 <abort>

0800859a <_ZSt19__throw_logic_errorPKc>:
 800859a:	b508      	push	{r3, lr}
 800859c:	f001 f93c 	bl	8009818 <abort>

080085a0 <_ZSt20__throw_length_errorPKc>:
 80085a0:	b508      	push	{r3, lr}
 80085a2:	f001 f939 	bl	8009818 <abort>
	...

080085a8 <pow>:
 80085a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ac:	ec59 8b10 	vmov	r8, r9, d0
 80085b0:	ec57 6b11 	vmov	r6, r7, d1
 80085b4:	f000 f8dc 	bl	8008770 <__ieee754_pow>
 80085b8:	4b4e      	ldr	r3, [pc, #312]	; (80086f4 <pow+0x14c>)
 80085ba:	f993 3000 	ldrsb.w	r3, [r3]
 80085be:	3301      	adds	r3, #1
 80085c0:	ec55 4b10 	vmov	r4, r5, d0
 80085c4:	d015      	beq.n	80085f2 <pow+0x4a>
 80085c6:	4632      	mov	r2, r6
 80085c8:	463b      	mov	r3, r7
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f8 faad 	bl	8000b2c <__aeabi_dcmpun>
 80085d2:	b970      	cbnz	r0, 80085f2 <pow+0x4a>
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f8 faa6 	bl	8000b2c <__aeabi_dcmpun>
 80085e0:	2200      	movs	r2, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	b148      	cbz	r0, 80085fa <pow+0x52>
 80085e6:	4630      	mov	r0, r6
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d17d      	bne.n	80086ee <pow+0x146>
 80085f2:	ec45 4b10 	vmov	d0, r4, r5
 80085f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	f7f8 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008602:	b1e0      	cbz	r0, 800863e <pow+0x96>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008610:	2800      	cmp	r0, #0
 8008612:	d16c      	bne.n	80086ee <pow+0x146>
 8008614:	ec47 6b10 	vmov	d0, r6, r7
 8008618:	f000 fee1 	bl	80093de <finite>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0e8      	beq.n	80085f2 <pow+0x4a>
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	4630      	mov	r0, r6
 8008626:	4639      	mov	r1, r7
 8008628:	f7f8 fa58 	bl	8000adc <__aeabi_dcmplt>
 800862c:	2800      	cmp	r0, #0
 800862e:	d0e0      	beq.n	80085f2 <pow+0x4a>
 8008630:	f001 f8fa 	bl	8009828 <__errno>
 8008634:	2321      	movs	r3, #33	; 0x21
 8008636:	6003      	str	r3, [r0, #0]
 8008638:	2400      	movs	r4, #0
 800863a:	4d2f      	ldr	r5, [pc, #188]	; (80086f8 <pow+0x150>)
 800863c:	e7d9      	b.n	80085f2 <pow+0x4a>
 800863e:	ec45 4b10 	vmov	d0, r4, r5
 8008642:	f000 fecc 	bl	80093de <finite>
 8008646:	bbb8      	cbnz	r0, 80086b8 <pow+0x110>
 8008648:	ec49 8b10 	vmov	d0, r8, r9
 800864c:	f000 fec7 	bl	80093de <finite>
 8008650:	b390      	cbz	r0, 80086b8 <pow+0x110>
 8008652:	ec47 6b10 	vmov	d0, r6, r7
 8008656:	f000 fec2 	bl	80093de <finite>
 800865a:	b368      	cbz	r0, 80086b8 <pow+0x110>
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	f7f8 fa62 	bl	8000b2c <__aeabi_dcmpun>
 8008668:	b160      	cbz	r0, 8008684 <pow+0xdc>
 800866a:	f001 f8dd 	bl	8009828 <__errno>
 800866e:	2321      	movs	r3, #33	; 0x21
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f7f8 f8e7 	bl	800084c <__aeabi_ddiv>
 800867e:	4604      	mov	r4, r0
 8008680:	460d      	mov	r5, r1
 8008682:	e7b6      	b.n	80085f2 <pow+0x4a>
 8008684:	f001 f8d0 	bl	8009828 <__errno>
 8008688:	2322      	movs	r3, #34	; 0x22
 800868a:	6003      	str	r3, [r0, #0]
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 fa22 	bl	8000adc <__aeabi_dcmplt>
 8008698:	2400      	movs	r4, #0
 800869a:	b158      	cbz	r0, 80086b4 <pow+0x10c>
 800869c:	ec47 6b10 	vmov	d0, r6, r7
 80086a0:	f000 feb2 	bl	8009408 <rint>
 80086a4:	4632      	mov	r2, r6
 80086a6:	ec51 0b10 	vmov	r0, r1, d0
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f8 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d0c2      	beq.n	800863a <pow+0x92>
 80086b4:	4d11      	ldr	r5, [pc, #68]	; (80086fc <pow+0x154>)
 80086b6:	e79c      	b.n	80085f2 <pow+0x4a>
 80086b8:	2200      	movs	r2, #0
 80086ba:	2300      	movs	r3, #0
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f8 fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d094      	beq.n	80085f2 <pow+0x4a>
 80086c8:	ec49 8b10 	vmov	d0, r8, r9
 80086cc:	f000 fe87 	bl	80093de <finite>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d08e      	beq.n	80085f2 <pow+0x4a>
 80086d4:	ec47 6b10 	vmov	d0, r6, r7
 80086d8:	f000 fe81 	bl	80093de <finite>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d088      	beq.n	80085f2 <pow+0x4a>
 80086e0:	f001 f8a2 	bl	8009828 <__errno>
 80086e4:	2322      	movs	r3, #34	; 0x22
 80086e6:	6003      	str	r3, [r0, #0]
 80086e8:	2400      	movs	r4, #0
 80086ea:	2500      	movs	r5, #0
 80086ec:	e781      	b.n	80085f2 <pow+0x4a>
 80086ee:	4d04      	ldr	r5, [pc, #16]	; (8008700 <pow+0x158>)
 80086f0:	2400      	movs	r4, #0
 80086f2:	e77e      	b.n	80085f2 <pow+0x4a>
 80086f4:	20000014 	.word	0x20000014
 80086f8:	fff00000 	.word	0xfff00000
 80086fc:	7ff00000 	.word	0x7ff00000
 8008700:	3ff00000 	.word	0x3ff00000

08008704 <log10f>:
 8008704:	b508      	push	{r3, lr}
 8008706:	ed2d 8b02 	vpush	{d8}
 800870a:	eeb0 8a40 	vmov.f32	s16, s0
 800870e:	f000 fe05 	bl	800931c <__ieee754_log10f>
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <log10f+0x60>)
 8008714:	f993 3000 	ldrsb.w	r3, [r3]
 8008718:	3301      	adds	r3, #1
 800871a:	d014      	beq.n	8008746 <log10f+0x42>
 800871c:	eeb4 8a48 	vcmp.f32	s16, s16
 8008720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008724:	d60f      	bvs.n	8008746 <log10f+0x42>
 8008726:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872e:	d80a      	bhi.n	8008746 <log10f+0x42>
 8008730:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008738:	d108      	bne.n	800874c <log10f+0x48>
 800873a:	f001 f875 	bl	8009828 <__errno>
 800873e:	2322      	movs	r3, #34	; 0x22
 8008740:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8008768 <log10f+0x64>
 8008744:	6003      	str	r3, [r0, #0]
 8008746:	ecbd 8b02 	vpop	{d8}
 800874a:	bd08      	pop	{r3, pc}
 800874c:	f001 f86c 	bl	8009828 <__errno>
 8008750:	ecbd 8b02 	vpop	{d8}
 8008754:	2321      	movs	r3, #33	; 0x21
 8008756:	6003      	str	r3, [r0, #0]
 8008758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800875c:	4803      	ldr	r0, [pc, #12]	; (800876c <log10f+0x68>)
 800875e:	f000 bf65 	b.w	800962c <nanf>
 8008762:	bf00      	nop
 8008764:	20000014 	.word	0x20000014
 8008768:	ff800000 	.word	0xff800000
 800876c:	0800caf0 	.word	0x0800caf0

08008770 <__ieee754_pow>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	ed2d 8b06 	vpush	{d8-d10}
 8008778:	b08d      	sub	sp, #52	; 0x34
 800877a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800877e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008782:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008786:	ea56 0100 	orrs.w	r1, r6, r0
 800878a:	ec53 2b10 	vmov	r2, r3, d0
 800878e:	f000 84d1 	beq.w	8009134 <__ieee754_pow+0x9c4>
 8008792:	497f      	ldr	r1, [pc, #508]	; (8008990 <__ieee754_pow+0x220>)
 8008794:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008798:	428c      	cmp	r4, r1
 800879a:	ee10 8a10 	vmov	r8, s0
 800879e:	4699      	mov	r9, r3
 80087a0:	dc09      	bgt.n	80087b6 <__ieee754_pow+0x46>
 80087a2:	d103      	bne.n	80087ac <__ieee754_pow+0x3c>
 80087a4:	b97a      	cbnz	r2, 80087c6 <__ieee754_pow+0x56>
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	dd02      	ble.n	80087b0 <__ieee754_pow+0x40>
 80087aa:	e00c      	b.n	80087c6 <__ieee754_pow+0x56>
 80087ac:	428e      	cmp	r6, r1
 80087ae:	dc02      	bgt.n	80087b6 <__ieee754_pow+0x46>
 80087b0:	428e      	cmp	r6, r1
 80087b2:	d110      	bne.n	80087d6 <__ieee754_pow+0x66>
 80087b4:	b178      	cbz	r0, 80087d6 <__ieee754_pow+0x66>
 80087b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80087ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80087be:	ea54 0308 	orrs.w	r3, r4, r8
 80087c2:	f000 84b7 	beq.w	8009134 <__ieee754_pow+0x9c4>
 80087c6:	4873      	ldr	r0, [pc, #460]	; (8008994 <__ieee754_pow+0x224>)
 80087c8:	b00d      	add	sp, #52	; 0x34
 80087ca:	ecbd 8b06 	vpop	{d8-d10}
 80087ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d2:	f000 be11 	b.w	80093f8 <nan>
 80087d6:	f1b9 0f00 	cmp.w	r9, #0
 80087da:	da36      	bge.n	800884a <__ieee754_pow+0xda>
 80087dc:	496e      	ldr	r1, [pc, #440]	; (8008998 <__ieee754_pow+0x228>)
 80087de:	428e      	cmp	r6, r1
 80087e0:	dc51      	bgt.n	8008886 <__ieee754_pow+0x116>
 80087e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80087e6:	428e      	cmp	r6, r1
 80087e8:	f340 84af 	ble.w	800914a <__ieee754_pow+0x9da>
 80087ec:	1531      	asrs	r1, r6, #20
 80087ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80087f2:	2914      	cmp	r1, #20
 80087f4:	dd0f      	ble.n	8008816 <__ieee754_pow+0xa6>
 80087f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80087fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80087fe:	fa0c f101 	lsl.w	r1, ip, r1
 8008802:	4281      	cmp	r1, r0
 8008804:	f040 84a1 	bne.w	800914a <__ieee754_pow+0x9da>
 8008808:	f00c 0c01 	and.w	ip, ip, #1
 800880c:	f1cc 0102 	rsb	r1, ip, #2
 8008810:	9100      	str	r1, [sp, #0]
 8008812:	b180      	cbz	r0, 8008836 <__ieee754_pow+0xc6>
 8008814:	e059      	b.n	80088ca <__ieee754_pow+0x15a>
 8008816:	2800      	cmp	r0, #0
 8008818:	d155      	bne.n	80088c6 <__ieee754_pow+0x156>
 800881a:	f1c1 0114 	rsb	r1, r1, #20
 800881e:	fa46 fc01 	asr.w	ip, r6, r1
 8008822:	fa0c f101 	lsl.w	r1, ip, r1
 8008826:	42b1      	cmp	r1, r6
 8008828:	f040 848c 	bne.w	8009144 <__ieee754_pow+0x9d4>
 800882c:	f00c 0c01 	and.w	ip, ip, #1
 8008830:	f1cc 0102 	rsb	r1, ip, #2
 8008834:	9100      	str	r1, [sp, #0]
 8008836:	4959      	ldr	r1, [pc, #356]	; (800899c <__ieee754_pow+0x22c>)
 8008838:	428e      	cmp	r6, r1
 800883a:	d12d      	bne.n	8008898 <__ieee754_pow+0x128>
 800883c:	2f00      	cmp	r7, #0
 800883e:	da79      	bge.n	8008934 <__ieee754_pow+0x1c4>
 8008840:	4956      	ldr	r1, [pc, #344]	; (800899c <__ieee754_pow+0x22c>)
 8008842:	2000      	movs	r0, #0
 8008844:	f7f8 f802 	bl	800084c <__aeabi_ddiv>
 8008848:	e016      	b.n	8008878 <__ieee754_pow+0x108>
 800884a:	2100      	movs	r1, #0
 800884c:	9100      	str	r1, [sp, #0]
 800884e:	2800      	cmp	r0, #0
 8008850:	d13b      	bne.n	80088ca <__ieee754_pow+0x15a>
 8008852:	494f      	ldr	r1, [pc, #316]	; (8008990 <__ieee754_pow+0x220>)
 8008854:	428e      	cmp	r6, r1
 8008856:	d1ee      	bne.n	8008836 <__ieee754_pow+0xc6>
 8008858:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800885c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008860:	ea53 0308 	orrs.w	r3, r3, r8
 8008864:	f000 8466 	beq.w	8009134 <__ieee754_pow+0x9c4>
 8008868:	4b4d      	ldr	r3, [pc, #308]	; (80089a0 <__ieee754_pow+0x230>)
 800886a:	429c      	cmp	r4, r3
 800886c:	dd0d      	ble.n	800888a <__ieee754_pow+0x11a>
 800886e:	2f00      	cmp	r7, #0
 8008870:	f280 8464 	bge.w	800913c <__ieee754_pow+0x9cc>
 8008874:	2000      	movs	r0, #0
 8008876:	2100      	movs	r1, #0
 8008878:	ec41 0b10 	vmov	d0, r0, r1
 800887c:	b00d      	add	sp, #52	; 0x34
 800887e:	ecbd 8b06 	vpop	{d8-d10}
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	2102      	movs	r1, #2
 8008888:	e7e0      	b.n	800884c <__ieee754_pow+0xdc>
 800888a:	2f00      	cmp	r7, #0
 800888c:	daf2      	bge.n	8008874 <__ieee754_pow+0x104>
 800888e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008896:	e7ef      	b.n	8008878 <__ieee754_pow+0x108>
 8008898:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800889c:	d104      	bne.n	80088a8 <__ieee754_pow+0x138>
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	e7e7      	b.n	8008878 <__ieee754_pow+0x108>
 80088a8:	493e      	ldr	r1, [pc, #248]	; (80089a4 <__ieee754_pow+0x234>)
 80088aa:	428f      	cmp	r7, r1
 80088ac:	d10d      	bne.n	80088ca <__ieee754_pow+0x15a>
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	db0a      	blt.n	80088ca <__ieee754_pow+0x15a>
 80088b4:	ec43 2b10 	vmov	d0, r2, r3
 80088b8:	b00d      	add	sp, #52	; 0x34
 80088ba:	ecbd 8b06 	vpop	{d8-d10}
 80088be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c2:	f000 bc77 	b.w	80091b4 <__ieee754_sqrt>
 80088c6:	2100      	movs	r1, #0
 80088c8:	9100      	str	r1, [sp, #0]
 80088ca:	ec43 2b10 	vmov	d0, r2, r3
 80088ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088d2:	f000 fd7b 	bl	80093cc <fabs>
 80088d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088da:	ec51 0b10 	vmov	r0, r1, d0
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	d12a      	bne.n	800893a <__ieee754_pow+0x1ca>
 80088e4:	b12c      	cbz	r4, 80088f2 <__ieee754_pow+0x182>
 80088e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800899c <__ieee754_pow+0x22c>
 80088ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80088ee:	45e6      	cmp	lr, ip
 80088f0:	d123      	bne.n	800893a <__ieee754_pow+0x1ca>
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	da05      	bge.n	8008902 <__ieee754_pow+0x192>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	2000      	movs	r0, #0
 80088fc:	4927      	ldr	r1, [pc, #156]	; (800899c <__ieee754_pow+0x22c>)
 80088fe:	f7f7 ffa5 	bl	800084c <__aeabi_ddiv>
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	dab7      	bge.n	8008878 <__ieee754_pow+0x108>
 8008908:	9b00      	ldr	r3, [sp, #0]
 800890a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800890e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008912:	4323      	orrs	r3, r4
 8008914:	d108      	bne.n	8008928 <__ieee754_pow+0x1b8>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	f7f7 fcb3 	bl	8000288 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e78d      	b.n	8008844 <__ieee754_pow+0xd4>
 8008928:	9b00      	ldr	r3, [sp, #0]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d1a4      	bne.n	8008878 <__ieee754_pow+0x108>
 800892e:	4602      	mov	r2, r0
 8008930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	e79e      	b.n	8008878 <__ieee754_pow+0x108>
 800893a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800893e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8008942:	950a      	str	r5, [sp, #40]	; 0x28
 8008944:	9d00      	ldr	r5, [sp, #0]
 8008946:	46ac      	mov	ip, r5
 8008948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800894a:	ea5c 0505 	orrs.w	r5, ip, r5
 800894e:	d0e4      	beq.n	800891a <__ieee754_pow+0x1aa>
 8008950:	4b15      	ldr	r3, [pc, #84]	; (80089a8 <__ieee754_pow+0x238>)
 8008952:	429e      	cmp	r6, r3
 8008954:	f340 80fc 	ble.w	8008b50 <__ieee754_pow+0x3e0>
 8008958:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800895c:	429e      	cmp	r6, r3
 800895e:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <__ieee754_pow+0x230>)
 8008960:	dd07      	ble.n	8008972 <__ieee754_pow+0x202>
 8008962:	429c      	cmp	r4, r3
 8008964:	dc0a      	bgt.n	800897c <__ieee754_pow+0x20c>
 8008966:	2f00      	cmp	r7, #0
 8008968:	da84      	bge.n	8008874 <__ieee754_pow+0x104>
 800896a:	a307      	add	r3, pc, #28	; (adr r3, 8008988 <__ieee754_pow+0x218>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	e795      	b.n	800889e <__ieee754_pow+0x12e>
 8008972:	429c      	cmp	r4, r3
 8008974:	dbf7      	blt.n	8008966 <__ieee754_pow+0x1f6>
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <__ieee754_pow+0x22c>)
 8008978:	429c      	cmp	r4, r3
 800897a:	dd17      	ble.n	80089ac <__ieee754_pow+0x23c>
 800897c:	2f00      	cmp	r7, #0
 800897e:	dcf4      	bgt.n	800896a <__ieee754_pow+0x1fa>
 8008980:	e778      	b.n	8008874 <__ieee754_pow+0x104>
 8008982:	bf00      	nop
 8008984:	f3af 8000 	nop.w
 8008988:	8800759c 	.word	0x8800759c
 800898c:	7e37e43c 	.word	0x7e37e43c
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	0800caf0 	.word	0x0800caf0
 8008998:	433fffff 	.word	0x433fffff
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	3fefffff 	.word	0x3fefffff
 80089a4:	3fe00000 	.word	0x3fe00000
 80089a8:	41e00000 	.word	0x41e00000
 80089ac:	4b64      	ldr	r3, [pc, #400]	; (8008b40 <__ieee754_pow+0x3d0>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	f7f7 fc6a 	bl	8000288 <__aeabi_dsub>
 80089b4:	a356      	add	r3, pc, #344	; (adr r3, 8008b10 <__ieee754_pow+0x3a0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	4604      	mov	r4, r0
 80089bc:	460d      	mov	r5, r1
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	a355      	add	r3, pc, #340	; (adr r3, 8008b18 <__ieee754_pow+0x3a8>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fe12 	bl	80005f8 <__aeabi_dmul>
 80089d4:	4b5b      	ldr	r3, [pc, #364]	; (8008b44 <__ieee754_pow+0x3d4>)
 80089d6:	4682      	mov	sl, r0
 80089d8:	468b      	mov	fp, r1
 80089da:	2200      	movs	r2, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	f7f7 fe0a 	bl	80005f8 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	a14d      	add	r1, pc, #308	; (adr r1, 8008b20 <__ieee754_pow+0x3b0>)
 80089ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ee:	f7f7 fc4b 	bl	8000288 <__aeabi_dsub>
 80089f2:	4622      	mov	r2, r4
 80089f4:	462b      	mov	r3, r5
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	2000      	movs	r0, #0
 8008a00:	4951      	ldr	r1, [pc, #324]	; (8008b48 <__ieee754_pow+0x3d8>)
 8008a02:	f7f7 fc41 	bl	8000288 <__aeabi_dsub>
 8008a06:	4622      	mov	r2, r4
 8008a08:	4680      	mov	r8, r0
 8008a0a:	4689      	mov	r9, r1
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f7 fdf1 	bl	80005f8 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	a341      	add	r3, pc, #260	; (adr r3, 8008b28 <__ieee754_pow+0x3b8>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fde6 	bl	80005f8 <__aeabi_dmul>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4650      	mov	r0, sl
 8008a32:	4659      	mov	r1, fp
 8008a34:	f7f7 fc28 	bl	8000288 <__aeabi_dsub>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	4689      	mov	r9, r1
 8008a40:	4630      	mov	r0, r6
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f7 fc22 	bl	800028c <__adddf3>
 8008a48:	2400      	movs	r4, #0
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	4620      	mov	r0, r4
 8008a50:	460d      	mov	r5, r1
 8008a52:	f7f7 fc19 	bl	8000288 <__aeabi_dsub>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f7 fc13 	bl	8000288 <__aeabi_dsub>
 8008a62:	9b00      	ldr	r3, [sp, #0]
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	4682      	mov	sl, r0
 8008a6c:	468b      	mov	fp, r1
 8008a6e:	f040 81f1 	bne.w	8008e54 <__ieee754_pow+0x6e4>
 8008a72:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008b30 <__ieee754_pow+0x3c0>
 8008a76:	eeb0 8a47 	vmov.f32	s16, s14
 8008a7a:	eef0 8a67 	vmov.f32	s17, s15
 8008a7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a82:	2600      	movs	r6, #0
 8008a84:	4632      	mov	r2, r6
 8008a86:	463b      	mov	r3, r7
 8008a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fdb0 	bl	80005f8 <__aeabi_dmul>
 8008a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4689      	mov	r9, r1
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	4659      	mov	r1, fp
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4640      	mov	r0, r8
 8008aae:	4649      	mov	r1, r9
 8008ab0:	f7f7 fbec 	bl	800028c <__adddf3>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	4680      	mov	r8, r0
 8008aba:	4689      	mov	r9, r1
 8008abc:	4620      	mov	r0, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7f7 fd9a 	bl	80005f8 <__aeabi_dmul>
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	4602      	mov	r2, r0
 8008acc:	4649      	mov	r1, r9
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f7f7 fbdc 	bl	800028c <__adddf3>
 8008ad4:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <__ieee754_pow+0x3dc>)
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	ec45 4b19 	vmov	d9, r4, r5
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	468b      	mov	fp, r1
 8008ae2:	f340 82fe 	ble.w	80090e2 <__ieee754_pow+0x972>
 8008ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008aee:	4303      	orrs	r3, r0
 8008af0:	f000 81f0 	beq.w	8008ed4 <__ieee754_pow+0x764>
 8008af4:	a310      	add	r3, pc, #64	; (adr r3, 8008b38 <__ieee754_pow+0x3c8>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	ec51 0b18 	vmov	r0, r1, d8
 8008afe:	f7f7 fd7b 	bl	80005f8 <__aeabi_dmul>
 8008b02:	a30d      	add	r3, pc, #52	; (adr r3, 8008b38 <__ieee754_pow+0x3c8>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	e6cb      	b.n	80088a2 <__ieee754_pow+0x132>
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	60000000 	.word	0x60000000
 8008b14:	3ff71547 	.word	0x3ff71547
 8008b18:	f85ddf44 	.word	0xf85ddf44
 8008b1c:	3e54ae0b 	.word	0x3e54ae0b
 8008b20:	55555555 	.word	0x55555555
 8008b24:	3fd55555 	.word	0x3fd55555
 8008b28:	652b82fe 	.word	0x652b82fe
 8008b2c:	3ff71547 	.word	0x3ff71547
 8008b30:	00000000 	.word	0x00000000
 8008b34:	bff00000 	.word	0xbff00000
 8008b38:	8800759c 	.word	0x8800759c
 8008b3c:	7e37e43c 	.word	0x7e37e43c
 8008b40:	3ff00000 	.word	0x3ff00000
 8008b44:	3fd00000 	.word	0x3fd00000
 8008b48:	3fe00000 	.word	0x3fe00000
 8008b4c:	408fffff 	.word	0x408fffff
 8008b50:	4bd7      	ldr	r3, [pc, #860]	; (8008eb0 <__ieee754_pow+0x740>)
 8008b52:	ea03 0309 	and.w	r3, r3, r9
 8008b56:	2200      	movs	r2, #0
 8008b58:	b92b      	cbnz	r3, 8008b66 <__ieee754_pow+0x3f6>
 8008b5a:	4bd6      	ldr	r3, [pc, #856]	; (8008eb4 <__ieee754_pow+0x744>)
 8008b5c:	f7f7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8008b60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008b64:	460c      	mov	r4, r1
 8008b66:	1523      	asrs	r3, r4, #20
 8008b68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b6c:	4413      	add	r3, r2
 8008b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b70:	4bd1      	ldr	r3, [pc, #836]	; (8008eb8 <__ieee754_pow+0x748>)
 8008b72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008b7a:	429c      	cmp	r4, r3
 8008b7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b80:	dd08      	ble.n	8008b94 <__ieee754_pow+0x424>
 8008b82:	4bce      	ldr	r3, [pc, #824]	; (8008ebc <__ieee754_pow+0x74c>)
 8008b84:	429c      	cmp	r4, r3
 8008b86:	f340 8163 	ble.w	8008e50 <__ieee754_pow+0x6e0>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008b94:	2400      	movs	r4, #0
 8008b96:	00e3      	lsls	r3, r4, #3
 8008b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b9a:	4bc9      	ldr	r3, [pc, #804]	; (8008ec0 <__ieee754_pow+0x750>)
 8008b9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ba0:	ed93 7b00 	vldr	d7, [r3]
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	ec53 2b17 	vmov	r2, r3, d7
 8008baa:	eeb0 8a47 	vmov.f32	s16, s14
 8008bae:	eef0 8a67 	vmov.f32	s17, s15
 8008bb2:	4682      	mov	sl, r0
 8008bb4:	f7f7 fb68 	bl	8000288 <__aeabi_dsub>
 8008bb8:	4652      	mov	r2, sl
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	ec51 0b18 	vmov	r0, r1, d8
 8008bc4:	f7f7 fb62 	bl	800028c <__adddf3>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	2000      	movs	r0, #0
 8008bce:	49bd      	ldr	r1, [pc, #756]	; (8008ec4 <__ieee754_pow+0x754>)
 8008bd0:	f7f7 fe3c 	bl	800084c <__aeabi_ddiv>
 8008bd4:	ec41 0b19 	vmov	d9, r0, r1
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4630      	mov	r0, r6
 8008bde:	4639      	mov	r1, r7
 8008be0:	f7f7 fd0a 	bl	80005f8 <__aeabi_dmul>
 8008be4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008bf8:	46ab      	mov	fp, r5
 8008bfa:	106d      	asrs	r5, r5, #1
 8008bfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008c00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008c04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461d      	mov	r5, r3
 8008c12:	f7f7 fcf1 	bl	80005f8 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 fb33 	bl	8000288 <__aeabi_dsub>
 8008c22:	ec53 2b18 	vmov	r2, r3, d8
 8008c26:	4606      	mov	r6, r0
 8008c28:	460f      	mov	r7, r1
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7f7 fb2b 	bl	8000288 <__aeabi_dsub>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4650      	mov	r0, sl
 8008c38:	4659      	mov	r1, fp
 8008c3a:	f7f7 fb25 	bl	8000288 <__aeabi_dsub>
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	f7f7 fb1b 	bl	8000288 <__aeabi_dsub>
 8008c52:	ec53 2b19 	vmov	r2, r3, d9
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c5e:	ec41 0b18 	vmov	d8, r0, r1
 8008c62:	4610      	mov	r0, r2
 8008c64:	4619      	mov	r1, r3
 8008c66:	f7f7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8008c6a:	a37d      	add	r3, pc, #500	; (adr r3, 8008e60 <__ieee754_pow+0x6f0>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	f7f7 fcc0 	bl	80005f8 <__aeabi_dmul>
 8008c78:	a37b      	add	r3, pc, #492	; (adr r3, 8008e68 <__ieee754_pow+0x6f8>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fb05 	bl	800028c <__adddf3>
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	a379      	add	r3, pc, #484	; (adr r3, 8008e70 <__ieee754_pow+0x700>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fafc 	bl	800028c <__adddf3>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	a376      	add	r3, pc, #472	; (adr r3, 8008e78 <__ieee754_pow+0x708>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 faf3 	bl	800028c <__adddf3>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	f7f7 fca5 	bl	80005f8 <__aeabi_dmul>
 8008cae:	a374      	add	r3, pc, #464	; (adr r3, 8008e80 <__ieee754_pow+0x710>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 faea 	bl	800028c <__adddf3>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	462b      	mov	r3, r5
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	a371      	add	r3, pc, #452	; (adr r3, 8008e88 <__ieee754_pow+0x718>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fae1 	bl	800028c <__adddf3>
 8008cca:	4622      	mov	r2, r4
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4630      	mov	r0, r6
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	4604      	mov	r4, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	464b      	mov	r3, r9
 8008cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cf2:	f7f7 facb 	bl	800028c <__adddf3>
 8008cf6:	ec53 2b18 	vmov	r2, r3, d8
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4622      	mov	r2, r4
 8008d00:	462b      	mov	r3, r5
 8008d02:	f7f7 fac3 	bl	800028c <__adddf3>
 8008d06:	4642      	mov	r2, r8
 8008d08:	4682      	mov	sl, r0
 8008d0a:	468b      	mov	fp, r1
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	4b6c      	ldr	r3, [pc, #432]	; (8008ec8 <__ieee754_pow+0x758>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	f7f7 fab5 	bl	800028c <__adddf3>
 8008d22:	4652      	mov	r2, sl
 8008d24:	465b      	mov	r3, fp
 8008d26:	f7f7 fab1 	bl	800028c <__adddf3>
 8008d2a:	9c04      	ldr	r4, [sp, #16]
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	4622      	mov	r2, r4
 8008d30:	460b      	mov	r3, r1
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	4b63      	ldr	r3, [pc, #396]	; (8008ec8 <__ieee754_pow+0x758>)
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	2200      	movs	r2, #0
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	f7f7 fa9b 	bl	8000288 <__aeabi_dsub>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4650      	mov	r0, sl
 8008d58:	4659      	mov	r1, fp
 8008d5a:	f7f7 fa95 	bl	8000288 <__aeabi_dsub>
 8008d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4622      	mov	r2, r4
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	ec51 0b18 	vmov	r0, r1, d8
 8008d72:	f7f7 fc41 	bl	80005f8 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fa85 	bl	800028c <__adddf3>
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fa7d 	bl	800028c <__adddf3>
 8008d92:	9c04      	ldr	r4, [sp, #16]
 8008d94:	a33e      	add	r3, pc, #248	; (adr r3, 8008e90 <__ieee754_pow+0x720>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	f7f7 fc2b 	bl	80005f8 <__aeabi_dmul>
 8008da2:	4642      	mov	r2, r8
 8008da4:	ec41 0b18 	vmov	d8, r0, r1
 8008da8:	464b      	mov	r3, r9
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fa65 	bl	8000288 <__aeabi_dsub>
 8008dbe:	a336      	add	r3, pc, #216	; (adr r3, 8008e98 <__ieee754_pow+0x728>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f7f7 fc18 	bl	80005f8 <__aeabi_dmul>
 8008dc8:	a335      	add	r3, pc, #212	; (adr r3, 8008ea0 <__ieee754_pow+0x730>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4630      	mov	r0, r6
 8008de0:	4639      	mov	r1, r7
 8008de2:	f7f7 fa53 	bl	800028c <__adddf3>
 8008de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008de8:	4b38      	ldr	r3, [pc, #224]	; (8008ecc <__ieee754_pow+0x75c>)
 8008dea:	4413      	add	r3, r2
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	f7f7 fa4c 	bl	800028c <__adddf3>
 8008df4:	4682      	mov	sl, r0
 8008df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008df8:	468b      	mov	fp, r1
 8008dfa:	f7f7 fb93 	bl	8000524 <__aeabi_i2d>
 8008dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e00:	4b33      	ldr	r3, [pc, #204]	; (8008ed0 <__ieee754_pow+0x760>)
 8008e02:	4413      	add	r3, r2
 8008e04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e08:	4606      	mov	r6, r0
 8008e0a:	460f      	mov	r7, r1
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	465b      	mov	r3, fp
 8008e10:	ec51 0b18 	vmov	r0, r1, d8
 8008e14:	f7f7 fa3a 	bl	800028c <__adddf3>
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	f7f7 fa36 	bl	800028c <__adddf3>
 8008e20:	4632      	mov	r2, r6
 8008e22:	463b      	mov	r3, r7
 8008e24:	f7f7 fa32 	bl	800028c <__adddf3>
 8008e28:	9c04      	ldr	r4, [sp, #16]
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	4620      	mov	r0, r4
 8008e30:	460d      	mov	r5, r1
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	4642      	mov	r2, r8
 8008e38:	464b      	mov	r3, r9
 8008e3a:	f7f7 fa25 	bl	8000288 <__aeabi_dsub>
 8008e3e:	ec53 2b18 	vmov	r2, r3, d8
 8008e42:	f7f7 fa21 	bl	8000288 <__aeabi_dsub>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	e606      	b.n	8008a5e <__ieee754_pow+0x2ee>
 8008e50:	2401      	movs	r4, #1
 8008e52:	e6a0      	b.n	8008b96 <__ieee754_pow+0x426>
 8008e54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008ea8 <__ieee754_pow+0x738>
 8008e58:	e60d      	b.n	8008a76 <__ieee754_pow+0x306>
 8008e5a:	bf00      	nop
 8008e5c:	f3af 8000 	nop.w
 8008e60:	4a454eef 	.word	0x4a454eef
 8008e64:	3fca7e28 	.word	0x3fca7e28
 8008e68:	93c9db65 	.word	0x93c9db65
 8008e6c:	3fcd864a 	.word	0x3fcd864a
 8008e70:	a91d4101 	.word	0xa91d4101
 8008e74:	3fd17460 	.word	0x3fd17460
 8008e78:	518f264d 	.word	0x518f264d
 8008e7c:	3fd55555 	.word	0x3fd55555
 8008e80:	db6fabff 	.word	0xdb6fabff
 8008e84:	3fdb6db6 	.word	0x3fdb6db6
 8008e88:	33333303 	.word	0x33333303
 8008e8c:	3fe33333 	.word	0x3fe33333
 8008e90:	e0000000 	.word	0xe0000000
 8008e94:	3feec709 	.word	0x3feec709
 8008e98:	dc3a03fd 	.word	0xdc3a03fd
 8008e9c:	3feec709 	.word	0x3feec709
 8008ea0:	145b01f5 	.word	0x145b01f5
 8008ea4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	3ff00000 	.word	0x3ff00000
 8008eb0:	7ff00000 	.word	0x7ff00000
 8008eb4:	43400000 	.word	0x43400000
 8008eb8:	0003988e 	.word	0x0003988e
 8008ebc:	000bb679 	.word	0x000bb679
 8008ec0:	0800c810 	.word	0x0800c810
 8008ec4:	3ff00000 	.word	0x3ff00000
 8008ec8:	40080000 	.word	0x40080000
 8008ecc:	0800c830 	.word	0x0800c830
 8008ed0:	0800c820 	.word	0x0800c820
 8008ed4:	a3b5      	add	r3, pc, #724	; (adr r3, 80091ac <__ieee754_pow+0xa3c>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 f9d5 	bl	800028c <__adddf3>
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	ec41 0b1a 	vmov	d10, r0, r1
 8008ee8:	462b      	mov	r3, r5
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 f9cb 	bl	8000288 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	ec51 0b1a 	vmov	r0, r1, d10
 8008efa:	f7f7 fe0d 	bl	8000b18 <__aeabi_dcmpgt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f47f adf8 	bne.w	8008af4 <__ieee754_pow+0x384>
 8008f04:	4aa4      	ldr	r2, [pc, #656]	; (8009198 <__ieee754_pow+0xa28>)
 8008f06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	f340 810b 	ble.w	8009126 <__ieee754_pow+0x9b6>
 8008f10:	151b      	asrs	r3, r3, #20
 8008f12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008f16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008f1a:	fa4a f303 	asr.w	r3, sl, r3
 8008f1e:	445b      	add	r3, fp
 8008f20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f24:	4e9d      	ldr	r6, [pc, #628]	; (800919c <__ieee754_pow+0xa2c>)
 8008f26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f2a:	4116      	asrs	r6, r2
 8008f2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008f30:	2000      	movs	r0, #0
 8008f32:	ea23 0106 	bic.w	r1, r3, r6
 8008f36:	f1c2 0214 	rsb	r2, r2, #20
 8008f3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008f3e:	fa4a fa02 	asr.w	sl, sl, r2
 8008f42:	f1bb 0f00 	cmp.w	fp, #0
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	bfb8      	it	lt
 8008f50:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f54:	f7f7 f998 	bl	8000288 <__aeabi_dsub>
 8008f58:	ec41 0b19 	vmov	d9, r0, r1
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	ec51 0b19 	vmov	r0, r1, d9
 8008f64:	f7f7 f992 	bl	800028c <__adddf3>
 8008f68:	2400      	movs	r4, #0
 8008f6a:	a379      	add	r3, pc, #484	; (adr r3, 8009150 <__ieee754_pow+0x9e0>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	4620      	mov	r0, r4
 8008f72:	460d      	mov	r5, r1
 8008f74:	f7f7 fb40 	bl	80005f8 <__aeabi_dmul>
 8008f78:	ec53 2b19 	vmov	r2, r3, d9
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	4649      	mov	r1, r9
 8008f90:	f7f7 f97a 	bl	8000288 <__aeabi_dsub>
 8008f94:	a370      	add	r3, pc, #448	; (adr r3, 8009158 <__ieee754_pow+0x9e8>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	a370      	add	r3, pc, #448	; (adr r3, 8009160 <__ieee754_pow+0x9f0>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	4689      	mov	r9, r1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_dmul>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 f968 	bl	800028c <__adddf3>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 f960 	bl	800028c <__adddf3>
 8008fcc:	4632      	mov	r2, r6
 8008fce:	463b      	mov	r3, r7
 8008fd0:	4680      	mov	r8, r0
 8008fd2:	4689      	mov	r9, r1
 8008fd4:	f7f7 f958 	bl	8000288 <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 f952 	bl	8000288 <__aeabi_dsub>
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	464b      	mov	r3, r9
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	a35c      	add	r3, pc, #368	; (adr r3, 8009168 <__ieee754_pow+0x9f8>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	f7f7 fafb 	bl	80005f8 <__aeabi_dmul>
 8009002:	a35b      	add	r3, pc, #364	; (adr r3, 8009170 <__ieee754_pow+0xa00>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 f93e 	bl	8000288 <__aeabi_dsub>
 800900c:	4622      	mov	r2, r4
 800900e:	462b      	mov	r3, r5
 8009010:	f7f7 faf2 	bl	80005f8 <__aeabi_dmul>
 8009014:	a358      	add	r3, pc, #352	; (adr r3, 8009178 <__ieee754_pow+0xa08>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f937 	bl	800028c <__adddf3>
 800901e:	4622      	mov	r2, r4
 8009020:	462b      	mov	r3, r5
 8009022:	f7f7 fae9 	bl	80005f8 <__aeabi_dmul>
 8009026:	a356      	add	r3, pc, #344	; (adr r3, 8009180 <__ieee754_pow+0xa10>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 f92c 	bl	8000288 <__aeabi_dsub>
 8009030:	4622      	mov	r2, r4
 8009032:	462b      	mov	r3, r5
 8009034:	f7f7 fae0 	bl	80005f8 <__aeabi_dmul>
 8009038:	a353      	add	r3, pc, #332	; (adr r3, 8009188 <__ieee754_pow+0xa18>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 f925 	bl	800028c <__adddf3>
 8009042:	4622      	mov	r2, r4
 8009044:	462b      	mov	r3, r5
 8009046:	f7f7 fad7 	bl	80005f8 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 f919 	bl	8000288 <__aeabi_dsub>
 8009056:	4604      	mov	r4, r0
 8009058:	460d      	mov	r5, r1
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fac9 	bl	80005f8 <__aeabi_dmul>
 8009066:	2200      	movs	r2, #0
 8009068:	ec41 0b19 	vmov	d9, r0, r1
 800906c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	ec51 0b19 	vmov	r0, r1, d9
 8009080:	f7f7 fbe4 	bl	800084c <__aeabi_ddiv>
 8009084:	4632      	mov	r2, r6
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	463b      	mov	r3, r7
 800908c:	4640      	mov	r0, r8
 800908e:	4649      	mov	r1, r9
 8009090:	f7f7 fab2 	bl	80005f8 <__aeabi_dmul>
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	f7f7 f8f8 	bl	800028c <__adddf3>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 f8f0 	bl	8000288 <__aeabi_dsub>
 80090a8:	4642      	mov	r2, r8
 80090aa:	464b      	mov	r3, r9
 80090ac:	f7f7 f8ec 	bl	8000288 <__aeabi_dsub>
 80090b0:	460b      	mov	r3, r1
 80090b2:	4602      	mov	r2, r0
 80090b4:	493a      	ldr	r1, [pc, #232]	; (80091a0 <__ieee754_pow+0xa30>)
 80090b6:	2000      	movs	r0, #0
 80090b8:	f7f7 f8e6 	bl	8000288 <__aeabi_dsub>
 80090bc:	e9cd 0100 	strd	r0, r1, [sp]
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80090c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ca:	da2f      	bge.n	800912c <__ieee754_pow+0x9bc>
 80090cc:	4650      	mov	r0, sl
 80090ce:	ed9d 0b00 	vldr	d0, [sp]
 80090d2:	f000 fa25 	bl	8009520 <scalbn>
 80090d6:	ec51 0b10 	vmov	r0, r1, d0
 80090da:	ec53 2b18 	vmov	r2, r3, d8
 80090de:	f7ff bbe0 	b.w	80088a2 <__ieee754_pow+0x132>
 80090e2:	4b30      	ldr	r3, [pc, #192]	; (80091a4 <__ieee754_pow+0xa34>)
 80090e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80090e8:	429e      	cmp	r6, r3
 80090ea:	f77f af0b 	ble.w	8008f04 <__ieee754_pow+0x794>
 80090ee:	4b2e      	ldr	r3, [pc, #184]	; (80091a8 <__ieee754_pow+0xa38>)
 80090f0:	440b      	add	r3, r1
 80090f2:	4303      	orrs	r3, r0
 80090f4:	d00b      	beq.n	800910e <__ieee754_pow+0x99e>
 80090f6:	a326      	add	r3, pc, #152	; (adr r3, 8009190 <__ieee754_pow+0xa20>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	ec51 0b18 	vmov	r0, r1, d8
 8009100:	f7f7 fa7a 	bl	80005f8 <__aeabi_dmul>
 8009104:	a322      	add	r3, pc, #136	; (adr r3, 8009190 <__ieee754_pow+0xa20>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7ff bbca 	b.w	80088a2 <__ieee754_pow+0x132>
 800910e:	4622      	mov	r2, r4
 8009110:	462b      	mov	r3, r5
 8009112:	f7f7 f8b9 	bl	8000288 <__aeabi_dsub>
 8009116:	4642      	mov	r2, r8
 8009118:	464b      	mov	r3, r9
 800911a:	f7f7 fcf3 	bl	8000b04 <__aeabi_dcmpge>
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f aef0 	beq.w	8008f04 <__ieee754_pow+0x794>
 8009124:	e7e7      	b.n	80090f6 <__ieee754_pow+0x986>
 8009126:	f04f 0a00 	mov.w	sl, #0
 800912a:	e717      	b.n	8008f5c <__ieee754_pow+0x7ec>
 800912c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009130:	4619      	mov	r1, r3
 8009132:	e7d2      	b.n	80090da <__ieee754_pow+0x96a>
 8009134:	491a      	ldr	r1, [pc, #104]	; (80091a0 <__ieee754_pow+0xa30>)
 8009136:	2000      	movs	r0, #0
 8009138:	f7ff bb9e 	b.w	8008878 <__ieee754_pow+0x108>
 800913c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009140:	f7ff bb9a 	b.w	8008878 <__ieee754_pow+0x108>
 8009144:	9000      	str	r0, [sp, #0]
 8009146:	f7ff bb76 	b.w	8008836 <__ieee754_pow+0xc6>
 800914a:	2100      	movs	r1, #0
 800914c:	f7ff bb60 	b.w	8008810 <__ieee754_pow+0xa0>
 8009150:	00000000 	.word	0x00000000
 8009154:	3fe62e43 	.word	0x3fe62e43
 8009158:	fefa39ef 	.word	0xfefa39ef
 800915c:	3fe62e42 	.word	0x3fe62e42
 8009160:	0ca86c39 	.word	0x0ca86c39
 8009164:	be205c61 	.word	0xbe205c61
 8009168:	72bea4d0 	.word	0x72bea4d0
 800916c:	3e663769 	.word	0x3e663769
 8009170:	c5d26bf1 	.word	0xc5d26bf1
 8009174:	3ebbbd41 	.word	0x3ebbbd41
 8009178:	af25de2c 	.word	0xaf25de2c
 800917c:	3f11566a 	.word	0x3f11566a
 8009180:	16bebd93 	.word	0x16bebd93
 8009184:	3f66c16c 	.word	0x3f66c16c
 8009188:	5555553e 	.word	0x5555553e
 800918c:	3fc55555 	.word	0x3fc55555
 8009190:	c2f8f359 	.word	0xc2f8f359
 8009194:	01a56e1f 	.word	0x01a56e1f
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	000fffff 	.word	0x000fffff
 80091a0:	3ff00000 	.word	0x3ff00000
 80091a4:	4090cbff 	.word	0x4090cbff
 80091a8:	3f6f3400 	.word	0x3f6f3400
 80091ac:	652b82fe 	.word	0x652b82fe
 80091b0:	3c971547 	.word	0x3c971547

080091b4 <__ieee754_sqrt>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	ec55 4b10 	vmov	r4, r5, d0
 80091bc:	4e56      	ldr	r6, [pc, #344]	; (8009318 <__ieee754_sqrt+0x164>)
 80091be:	43ae      	bics	r6, r5
 80091c0:	ee10 0a10 	vmov	r0, s0
 80091c4:	ee10 3a10 	vmov	r3, s0
 80091c8:	4629      	mov	r1, r5
 80091ca:	462a      	mov	r2, r5
 80091cc:	d110      	bne.n	80091f0 <__ieee754_sqrt+0x3c>
 80091ce:	ee10 2a10 	vmov	r2, s0
 80091d2:	462b      	mov	r3, r5
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 f854 	bl	800028c <__adddf3>
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	ec45 4b10 	vmov	d0, r4, r5
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	dc10      	bgt.n	8009216 <__ieee754_sqrt+0x62>
 80091f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80091f8:	4330      	orrs	r0, r6
 80091fa:	d0f5      	beq.n	80091e8 <__ieee754_sqrt+0x34>
 80091fc:	b15d      	cbz	r5, 8009216 <__ieee754_sqrt+0x62>
 80091fe:	ee10 2a10 	vmov	r2, s0
 8009202:	462b      	mov	r3, r5
 8009204:	ee10 0a10 	vmov	r0, s0
 8009208:	f7f7 f83e 	bl	8000288 <__aeabi_dsub>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	f7f7 fb1c 	bl	800084c <__aeabi_ddiv>
 8009214:	e7e6      	b.n	80091e4 <__ieee754_sqrt+0x30>
 8009216:	1509      	asrs	r1, r1, #20
 8009218:	d076      	beq.n	8009308 <__ieee754_sqrt+0x154>
 800921a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800921e:	07ce      	lsls	r6, r1, #31
 8009220:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009224:	bf5e      	ittt	pl
 8009226:	0fda      	lsrpl	r2, r3, #31
 8009228:	005b      	lslpl	r3, r3, #1
 800922a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800922e:	0fda      	lsrs	r2, r3, #31
 8009230:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009234:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009238:	2000      	movs	r0, #0
 800923a:	106d      	asrs	r5, r5, #1
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	f04f 0e16 	mov.w	lr, #22
 8009242:	4684      	mov	ip, r0
 8009244:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009248:	eb0c 0401 	add.w	r4, ip, r1
 800924c:	4294      	cmp	r4, r2
 800924e:	bfde      	ittt	le
 8009250:	1b12      	suble	r2, r2, r4
 8009252:	eb04 0c01 	addle.w	ip, r4, r1
 8009256:	1840      	addle	r0, r0, r1
 8009258:	0052      	lsls	r2, r2, #1
 800925a:	f1be 0e01 	subs.w	lr, lr, #1
 800925e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009262:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009266:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800926a:	d1ed      	bne.n	8009248 <__ieee754_sqrt+0x94>
 800926c:	4671      	mov	r1, lr
 800926e:	2720      	movs	r7, #32
 8009270:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009274:	4562      	cmp	r2, ip
 8009276:	eb04 060e 	add.w	r6, r4, lr
 800927a:	dc02      	bgt.n	8009282 <__ieee754_sqrt+0xce>
 800927c:	d113      	bne.n	80092a6 <__ieee754_sqrt+0xf2>
 800927e:	429e      	cmp	r6, r3
 8009280:	d811      	bhi.n	80092a6 <__ieee754_sqrt+0xf2>
 8009282:	2e00      	cmp	r6, #0
 8009284:	eb06 0e04 	add.w	lr, r6, r4
 8009288:	da43      	bge.n	8009312 <__ieee754_sqrt+0x15e>
 800928a:	f1be 0f00 	cmp.w	lr, #0
 800928e:	db40      	blt.n	8009312 <__ieee754_sqrt+0x15e>
 8009290:	f10c 0801 	add.w	r8, ip, #1
 8009294:	eba2 020c 	sub.w	r2, r2, ip
 8009298:	429e      	cmp	r6, r3
 800929a:	bf88      	it	hi
 800929c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80092a0:	1b9b      	subs	r3, r3, r6
 80092a2:	4421      	add	r1, r4
 80092a4:	46c4      	mov	ip, r8
 80092a6:	0052      	lsls	r2, r2, #1
 80092a8:	3f01      	subs	r7, #1
 80092aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80092ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80092b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092b6:	d1dd      	bne.n	8009274 <__ieee754_sqrt+0xc0>
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d006      	beq.n	80092ca <__ieee754_sqrt+0x116>
 80092bc:	1c4c      	adds	r4, r1, #1
 80092be:	bf13      	iteet	ne
 80092c0:	3101      	addne	r1, #1
 80092c2:	3001      	addeq	r0, #1
 80092c4:	4639      	moveq	r1, r7
 80092c6:	f021 0101 	bicne.w	r1, r1, #1
 80092ca:	1043      	asrs	r3, r0, #1
 80092cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80092d0:	0849      	lsrs	r1, r1, #1
 80092d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80092d6:	07c2      	lsls	r2, r0, #31
 80092d8:	bf48      	it	mi
 80092da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80092de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80092e2:	460c      	mov	r4, r1
 80092e4:	463d      	mov	r5, r7
 80092e6:	e77f      	b.n	80091e8 <__ieee754_sqrt+0x34>
 80092e8:	0ada      	lsrs	r2, r3, #11
 80092ea:	3815      	subs	r0, #21
 80092ec:	055b      	lsls	r3, r3, #21
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	d0fa      	beq.n	80092e8 <__ieee754_sqrt+0x134>
 80092f2:	02d7      	lsls	r7, r2, #11
 80092f4:	d50a      	bpl.n	800930c <__ieee754_sqrt+0x158>
 80092f6:	f1c1 0420 	rsb	r4, r1, #32
 80092fa:	fa23 f404 	lsr.w	r4, r3, r4
 80092fe:	1e4d      	subs	r5, r1, #1
 8009300:	408b      	lsls	r3, r1
 8009302:	4322      	orrs	r2, r4
 8009304:	1b41      	subs	r1, r0, r5
 8009306:	e788      	b.n	800921a <__ieee754_sqrt+0x66>
 8009308:	4608      	mov	r0, r1
 800930a:	e7f0      	b.n	80092ee <__ieee754_sqrt+0x13a>
 800930c:	0052      	lsls	r2, r2, #1
 800930e:	3101      	adds	r1, #1
 8009310:	e7ef      	b.n	80092f2 <__ieee754_sqrt+0x13e>
 8009312:	46e0      	mov	r8, ip
 8009314:	e7be      	b.n	8009294 <__ieee754_sqrt+0xe0>
 8009316:	bf00      	nop
 8009318:	7ff00000 	.word	0x7ff00000

0800931c <__ieee754_log10f>:
 800931c:	b508      	push	{r3, lr}
 800931e:	ee10 2a10 	vmov	r2, s0
 8009322:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009326:	ed2d 8b02 	vpush	{d8}
 800932a:	d108      	bne.n	800933e <__ieee754_log10f+0x22>
 800932c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80093b4 <__ieee754_log10f+0x98>
 8009330:	eddf 7a21 	vldr	s15, [pc, #132]	; 80093b8 <__ieee754_log10f+0x9c>
 8009334:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009338:	ecbd 8b02 	vpop	{d8}
 800933c:	bd08      	pop	{r3, pc}
 800933e:	2a00      	cmp	r2, #0
 8009340:	da02      	bge.n	8009348 <__ieee754_log10f+0x2c>
 8009342:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009346:	e7f3      	b.n	8009330 <__ieee754_log10f+0x14>
 8009348:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800934c:	db02      	blt.n	8009354 <__ieee754_log10f+0x38>
 800934e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009352:	e7f1      	b.n	8009338 <__ieee754_log10f+0x1c>
 8009354:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009358:	bfbf      	itttt	lt
 800935a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80093bc <__ieee754_log10f+0xa0>
 800935e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009362:	f06f 0118 	mvnlt.w	r1, #24
 8009366:	ee17 2a90 	vmovlt	r2, s15
 800936a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800936e:	bfa8      	it	ge
 8009370:	2100      	movge	r1, #0
 8009372:	3b7f      	subs	r3, #127	; 0x7f
 8009374:	440b      	add	r3, r1
 8009376:	0fd9      	lsrs	r1, r3, #31
 8009378:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009384:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8009388:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800938c:	ee00 3a10 	vmov	s0, r3
 8009390:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009394:	f000 f950 	bl	8009638 <__ieee754_logf>
 8009398:	eddf 7a09 	vldr	s15, [pc, #36]	; 80093c0 <__ieee754_log10f+0xa4>
 800939c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80093a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80093c4 <__ieee754_log10f+0xa8>
 80093a4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80093a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80093c8 <__ieee754_log10f+0xac>
 80093ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 80093b0:	e7c2      	b.n	8009338 <__ieee754_log10f+0x1c>
 80093b2:	bf00      	nop
 80093b4:	cc000000 	.word	0xcc000000
 80093b8:	00000000 	.word	0x00000000
 80093bc:	4c000000 	.word	0x4c000000
 80093c0:	3ede5bd9 	.word	0x3ede5bd9
 80093c4:	355427db 	.word	0x355427db
 80093c8:	3e9a2080 	.word	0x3e9a2080

080093cc <fabs>:
 80093cc:	ec51 0b10 	vmov	r0, r1, d0
 80093d0:	ee10 2a10 	vmov	r2, s0
 80093d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093d8:	ec43 2b10 	vmov	d0, r2, r3
 80093dc:	4770      	bx	lr

080093de <finite>:
 80093de:	b082      	sub	sp, #8
 80093e0:	ed8d 0b00 	vstr	d0, [sp]
 80093e4:	9801      	ldr	r0, [sp, #4]
 80093e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80093ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80093ee:	0fc0      	lsrs	r0, r0, #31
 80093f0:	b002      	add	sp, #8
 80093f2:	4770      	bx	lr
 80093f4:	0000      	movs	r0, r0
	...

080093f8 <nan>:
 80093f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009400 <nan+0x8>
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	00000000 	.word	0x00000000
 8009404:	7ff80000 	.word	0x7ff80000

08009408 <rint>:
 8009408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940a:	ec51 0b10 	vmov	r0, r1, d0
 800940e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009412:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009416:	2e13      	cmp	r6, #19
 8009418:	ee10 4a10 	vmov	r4, s0
 800941c:	460b      	mov	r3, r1
 800941e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009422:	dc58      	bgt.n	80094d6 <rint+0xce>
 8009424:	2e00      	cmp	r6, #0
 8009426:	da2b      	bge.n	8009480 <rint+0x78>
 8009428:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800942c:	4302      	orrs	r2, r0
 800942e:	d023      	beq.n	8009478 <rint+0x70>
 8009430:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009434:	4302      	orrs	r2, r0
 8009436:	4254      	negs	r4, r2
 8009438:	4314      	orrs	r4, r2
 800943a:	0c4b      	lsrs	r3, r1, #17
 800943c:	0b24      	lsrs	r4, r4, #12
 800943e:	045b      	lsls	r3, r3, #17
 8009440:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009444:	ea44 0103 	orr.w	r1, r4, r3
 8009448:	4b32      	ldr	r3, [pc, #200]	; (8009514 <rint+0x10c>)
 800944a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800944e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	f7f6 ff17 	bl	800028c <__adddf3>
 800945e:	e9cd 0100 	strd	r0, r1, [sp]
 8009462:	463b      	mov	r3, r7
 8009464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009468:	4632      	mov	r2, r6
 800946a:	f7f6 ff0d 	bl	8000288 <__aeabi_dsub>
 800946e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009472:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009476:	4639      	mov	r1, r7
 8009478:	ec41 0b10 	vmov	d0, r0, r1
 800947c:	b003      	add	sp, #12
 800947e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009480:	4a25      	ldr	r2, [pc, #148]	; (8009518 <rint+0x110>)
 8009482:	4132      	asrs	r2, r6
 8009484:	ea01 0702 	and.w	r7, r1, r2
 8009488:	4307      	orrs	r7, r0
 800948a:	d0f5      	beq.n	8009478 <rint+0x70>
 800948c:	0851      	lsrs	r1, r2, #1
 800948e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009492:	4314      	orrs	r4, r2
 8009494:	d00c      	beq.n	80094b0 <rint+0xa8>
 8009496:	ea23 0201 	bic.w	r2, r3, r1
 800949a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800949e:	2e13      	cmp	r6, #19
 80094a0:	fa43 f606 	asr.w	r6, r3, r6
 80094a4:	bf0c      	ite	eq
 80094a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80094aa:	2400      	movne	r4, #0
 80094ac:	ea42 0306 	orr.w	r3, r2, r6
 80094b0:	4918      	ldr	r1, [pc, #96]	; (8009514 <rint+0x10c>)
 80094b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80094b6:	4622      	mov	r2, r4
 80094b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f6 fee4 	bl	800028c <__adddf3>
 80094c4:	e9cd 0100 	strd	r0, r1, [sp]
 80094c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094cc:	4622      	mov	r2, r4
 80094ce:	462b      	mov	r3, r5
 80094d0:	f7f6 feda 	bl	8000288 <__aeabi_dsub>
 80094d4:	e7d0      	b.n	8009478 <rint+0x70>
 80094d6:	2e33      	cmp	r6, #51	; 0x33
 80094d8:	dd07      	ble.n	80094ea <rint+0xe2>
 80094da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80094de:	d1cb      	bne.n	8009478 <rint+0x70>
 80094e0:	ee10 2a10 	vmov	r2, s0
 80094e4:	f7f6 fed2 	bl	800028c <__adddf3>
 80094e8:	e7c6      	b.n	8009478 <rint+0x70>
 80094ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80094ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80094f2:	40d6      	lsrs	r6, r2
 80094f4:	4230      	tst	r0, r6
 80094f6:	d0bf      	beq.n	8009478 <rint+0x70>
 80094f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80094fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009500:	bf1f      	itttt	ne
 8009502:	ea24 0101 	bicne.w	r1, r4, r1
 8009506:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800950a:	fa44 f202 	asrne.w	r2, r4, r2
 800950e:	ea41 0402 	orrne.w	r4, r1, r2
 8009512:	e7cd      	b.n	80094b0 <rint+0xa8>
 8009514:	0800c840 	.word	0x0800c840
 8009518:	000fffff 	.word	0x000fffff
 800951c:	00000000 	.word	0x00000000

08009520 <scalbn>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	ec55 4b10 	vmov	r4, r5, d0
 8009526:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800952a:	4606      	mov	r6, r0
 800952c:	462b      	mov	r3, r5
 800952e:	b99a      	cbnz	r2, 8009558 <scalbn+0x38>
 8009530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009534:	4323      	orrs	r3, r4
 8009536:	d036      	beq.n	80095a6 <scalbn+0x86>
 8009538:	4b39      	ldr	r3, [pc, #228]	; (8009620 <scalbn+0x100>)
 800953a:	4629      	mov	r1, r5
 800953c:	ee10 0a10 	vmov	r0, s0
 8009540:	2200      	movs	r2, #0
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	4b37      	ldr	r3, [pc, #220]	; (8009624 <scalbn+0x104>)
 8009548:	429e      	cmp	r6, r3
 800954a:	4604      	mov	r4, r0
 800954c:	460d      	mov	r5, r1
 800954e:	da10      	bge.n	8009572 <scalbn+0x52>
 8009550:	a32b      	add	r3, pc, #172	; (adr r3, 8009600 <scalbn+0xe0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	e03a      	b.n	80095ce <scalbn+0xae>
 8009558:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800955c:	428a      	cmp	r2, r1
 800955e:	d10c      	bne.n	800957a <scalbn+0x5a>
 8009560:	ee10 2a10 	vmov	r2, s0
 8009564:	4620      	mov	r0, r4
 8009566:	4629      	mov	r1, r5
 8009568:	f7f6 fe90 	bl	800028c <__adddf3>
 800956c:	4604      	mov	r4, r0
 800956e:	460d      	mov	r5, r1
 8009570:	e019      	b.n	80095a6 <scalbn+0x86>
 8009572:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009576:	460b      	mov	r3, r1
 8009578:	3a36      	subs	r2, #54	; 0x36
 800957a:	4432      	add	r2, r6
 800957c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009580:	428a      	cmp	r2, r1
 8009582:	dd08      	ble.n	8009596 <scalbn+0x76>
 8009584:	2d00      	cmp	r5, #0
 8009586:	a120      	add	r1, pc, #128	; (adr r1, 8009608 <scalbn+0xe8>)
 8009588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800958c:	da1c      	bge.n	80095c8 <scalbn+0xa8>
 800958e:	a120      	add	r1, pc, #128	; (adr r1, 8009610 <scalbn+0xf0>)
 8009590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009594:	e018      	b.n	80095c8 <scalbn+0xa8>
 8009596:	2a00      	cmp	r2, #0
 8009598:	dd08      	ble.n	80095ac <scalbn+0x8c>
 800959a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800959e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095a6:	ec45 4b10 	vmov	d0, r4, r5
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80095b0:	da19      	bge.n	80095e6 <scalbn+0xc6>
 80095b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80095b6:	429e      	cmp	r6, r3
 80095b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80095bc:	dd0a      	ble.n	80095d4 <scalbn+0xb4>
 80095be:	a112      	add	r1, pc, #72	; (adr r1, 8009608 <scalbn+0xe8>)
 80095c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e2      	bne.n	800958e <scalbn+0x6e>
 80095c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009608 <scalbn+0xe8>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	e7cb      	b.n	800956c <scalbn+0x4c>
 80095d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009600 <scalbn+0xe0>)
 80095d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0b8      	beq.n	8009550 <scalbn+0x30>
 80095de:	a10e      	add	r1, pc, #56	; (adr r1, 8009618 <scalbn+0xf8>)
 80095e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e4:	e7b4      	b.n	8009550 <scalbn+0x30>
 80095e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095ea:	3236      	adds	r2, #54	; 0x36
 80095ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80095f4:	4620      	mov	r0, r4
 80095f6:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <scalbn+0x108>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	e7e8      	b.n	80095ce <scalbn+0xae>
 80095fc:	f3af 8000 	nop.w
 8009600:	c2f8f359 	.word	0xc2f8f359
 8009604:	01a56e1f 	.word	0x01a56e1f
 8009608:	8800759c 	.word	0x8800759c
 800960c:	7e37e43c 	.word	0x7e37e43c
 8009610:	8800759c 	.word	0x8800759c
 8009614:	fe37e43c 	.word	0xfe37e43c
 8009618:	c2f8f359 	.word	0xc2f8f359
 800961c:	81a56e1f 	.word	0x81a56e1f
 8009620:	43500000 	.word	0x43500000
 8009624:	ffff3cb0 	.word	0xffff3cb0
 8009628:	3c900000 	.word	0x3c900000

0800962c <nanf>:
 800962c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009634 <nanf+0x8>
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	7fc00000 	.word	0x7fc00000

08009638 <__ieee754_logf>:
 8009638:	ee10 3a10 	vmov	r3, s0
 800963c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009640:	d106      	bne.n	8009650 <__ieee754_logf+0x18>
 8009642:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80097d8 <__ieee754_logf+0x1a0>
 8009646:	eddf 7a65 	vldr	s15, [pc, #404]	; 80097dc <__ieee754_logf+0x1a4>
 800964a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800964e:	4770      	bx	lr
 8009650:	2b00      	cmp	r3, #0
 8009652:	da02      	bge.n	800965a <__ieee754_logf+0x22>
 8009654:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009658:	e7f5      	b.n	8009646 <__ieee754_logf+0xe>
 800965a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800965e:	db02      	blt.n	8009666 <__ieee754_logf+0x2e>
 8009660:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009664:	4770      	bx	lr
 8009666:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800966a:	bfb8      	it	lt
 800966c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80097e0 <__ieee754_logf+0x1a8>
 8009670:	485c      	ldr	r0, [pc, #368]	; (80097e4 <__ieee754_logf+0x1ac>)
 8009672:	bfbe      	ittt	lt
 8009674:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009678:	f06f 0118 	mvnlt.w	r1, #24
 800967c:	ee17 3a90 	vmovlt	r3, s15
 8009680:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009684:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009688:	4418      	add	r0, r3
 800968a:	bfa8      	it	ge
 800968c:	2100      	movge	r1, #0
 800968e:	3a7f      	subs	r2, #127	; 0x7f
 8009690:	440a      	add	r2, r1
 8009692:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8009696:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800969a:	4319      	orrs	r1, r3
 800969c:	ee00 1a10 	vmov	s0, r1
 80096a0:	4951      	ldr	r1, [pc, #324]	; (80097e8 <__ieee754_logf+0x1b0>)
 80096a2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80096a6:	f103 000f 	add.w	r0, r3, #15
 80096aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096ae:	4001      	ands	r1, r0
 80096b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096b4:	bb89      	cbnz	r1, 800971a <__ieee754_logf+0xe2>
 80096b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096be:	d10f      	bne.n	80096e0 <__ieee754_logf+0xa8>
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	f000 8085 	beq.w	80097d0 <__ieee754_logf+0x198>
 80096c6:	ee07 2a90 	vmov	s15, r2
 80096ca:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80097ec <__ieee754_logf+0x1b4>
 80096ce:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80097f0 <__ieee754_logf+0x1b8>
 80096d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80096da:	eea7 0a87 	vfma.f32	s0, s15, s14
 80096de:	4770      	bx	lr
 80096e0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80097f4 <__ieee754_logf+0x1bc>
 80096e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80096e8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80096ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80096f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096f4:	b912      	cbnz	r2, 80096fc <__ieee754_logf+0xc4>
 80096f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80096fa:	4770      	bx	lr
 80096fc:	ee07 2a90 	vmov	s15, r2
 8009700:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80097ec <__ieee754_logf+0x1b4>
 8009704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009708:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800970c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009710:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80097f0 <__ieee754_logf+0x1b8>
 8009714:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009718:	4770      	bx	lr
 800971a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800971e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009722:	eddf 5a35 	vldr	s11, [pc, #212]	; 80097f8 <__ieee754_logf+0x1c0>
 8009726:	eddf 4a35 	vldr	s9, [pc, #212]	; 80097fc <__ieee754_logf+0x1c4>
 800972a:	4935      	ldr	r1, [pc, #212]	; (8009800 <__ieee754_logf+0x1c8>)
 800972c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009730:	4419      	add	r1, r3
 8009732:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8009736:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800973a:	430b      	orrs	r3, r1
 800973c:	2b00      	cmp	r3, #0
 800973e:	ee07 2a90 	vmov	s15, r2
 8009742:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009746:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800974a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800974e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8009804 <__ieee754_logf+0x1cc>
 8009752:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009756:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8009808 <__ieee754_logf+0x1d0>
 800975a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800975e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800980c <__ieee754_logf+0x1d4>
 8009762:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009766:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8009810 <__ieee754_logf+0x1d8>
 800976a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800976e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009814 <__ieee754_logf+0x1dc>
 8009772:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009776:	ee67 7a85 	vmul.f32	s15, s15, s10
 800977a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800977e:	dd1c      	ble.n	80097ba <__ieee754_logf+0x182>
 8009780:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009784:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009788:	ee27 7a00 	vmul.f32	s14, s14, s0
 800978c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009790:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009794:	b922      	cbnz	r2, 80097a0 <__ieee754_logf+0x168>
 8009796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800979a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800979e:	4770      	bx	lr
 80097a0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80097ec <__ieee754_logf+0x1b4>
 80097a4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80097a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80097b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80097f0 <__ieee754_logf+0x1b8>
 80097b4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80097b8:	4770      	bx	lr
 80097ba:	ee70 7a67 	vsub.f32	s15, s0, s15
 80097be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d0e9      	beq.n	800979a <__ieee754_logf+0x162>
 80097c6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80097ec <__ieee754_logf+0x1b4>
 80097ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80097ce:	e7ed      	b.n	80097ac <__ieee754_logf+0x174>
 80097d0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80097dc <__ieee754_logf+0x1a4>
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	cc000000 	.word	0xcc000000
 80097dc:	00000000 	.word	0x00000000
 80097e0:	4c000000 	.word	0x4c000000
 80097e4:	004afb20 	.word	0x004afb20
 80097e8:	007ffff0 	.word	0x007ffff0
 80097ec:	3717f7d1 	.word	0x3717f7d1
 80097f0:	3f317180 	.word	0x3f317180
 80097f4:	3eaaaaab 	.word	0x3eaaaaab
 80097f8:	3e1cd04f 	.word	0x3e1cd04f
 80097fc:	3e178897 	.word	0x3e178897
 8009800:	ffcf5c30 	.word	0xffcf5c30
 8009804:	3e638e29 	.word	0x3e638e29
 8009808:	3ecccccd 	.word	0x3ecccccd
 800980c:	3e3a3325 	.word	0x3e3a3325
 8009810:	3e924925 	.word	0x3e924925
 8009814:	3f2aaaab 	.word	0x3f2aaaab

08009818 <abort>:
 8009818:	b508      	push	{r3, lr}
 800981a:	2006      	movs	r0, #6
 800981c:	f000 fdd4 	bl	800a3c8 <raise>
 8009820:	2001      	movs	r0, #1
 8009822:	f7f9 fe4d 	bl	80034c0 <_exit>
	...

08009828 <__errno>:
 8009828:	4b01      	ldr	r3, [pc, #4]	; (8009830 <__errno+0x8>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000018 	.word	0x20000018

08009834 <__libc_init_array>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	4d0d      	ldr	r5, [pc, #52]	; (800986c <__libc_init_array+0x38>)
 8009838:	4c0d      	ldr	r4, [pc, #52]	; (8009870 <__libc_init_array+0x3c>)
 800983a:	1b64      	subs	r4, r4, r5
 800983c:	10a4      	asrs	r4, r4, #2
 800983e:	2600      	movs	r6, #0
 8009840:	42a6      	cmp	r6, r4
 8009842:	d109      	bne.n	8009858 <__libc_init_array+0x24>
 8009844:	4d0b      	ldr	r5, [pc, #44]	; (8009874 <__libc_init_array+0x40>)
 8009846:	4c0c      	ldr	r4, [pc, #48]	; (8009878 <__libc_init_array+0x44>)
 8009848:	f002 ff10 	bl	800c66c <_init>
 800984c:	1b64      	subs	r4, r4, r5
 800984e:	10a4      	asrs	r4, r4, #2
 8009850:	2600      	movs	r6, #0
 8009852:	42a6      	cmp	r6, r4
 8009854:	d105      	bne.n	8009862 <__libc_init_array+0x2e>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	f855 3b04 	ldr.w	r3, [r5], #4
 800985c:	4798      	blx	r3
 800985e:	3601      	adds	r6, #1
 8009860:	e7ee      	b.n	8009840 <__libc_init_array+0xc>
 8009862:	f855 3b04 	ldr.w	r3, [r5], #4
 8009866:	4798      	blx	r3
 8009868:	3601      	adds	r6, #1
 800986a:	e7f2      	b.n	8009852 <__libc_init_array+0x1e>
 800986c:	0800cc5c 	.word	0x0800cc5c
 8009870:	0800cc5c 	.word	0x0800cc5c
 8009874:	0800cc5c 	.word	0x0800cc5c
 8009878:	0800cc64 	.word	0x0800cc64

0800987c <__itoa>:
 800987c:	1e93      	subs	r3, r2, #2
 800987e:	2b22      	cmp	r3, #34	; 0x22
 8009880:	b510      	push	{r4, lr}
 8009882:	460c      	mov	r4, r1
 8009884:	d904      	bls.n	8009890 <__itoa+0x14>
 8009886:	2300      	movs	r3, #0
 8009888:	700b      	strb	r3, [r1, #0]
 800988a:	461c      	mov	r4, r3
 800988c:	4620      	mov	r0, r4
 800988e:	bd10      	pop	{r4, pc}
 8009890:	2a0a      	cmp	r2, #10
 8009892:	d109      	bne.n	80098a8 <__itoa+0x2c>
 8009894:	2800      	cmp	r0, #0
 8009896:	da07      	bge.n	80098a8 <__itoa+0x2c>
 8009898:	232d      	movs	r3, #45	; 0x2d
 800989a:	700b      	strb	r3, [r1, #0]
 800989c:	4240      	negs	r0, r0
 800989e:	2101      	movs	r1, #1
 80098a0:	4421      	add	r1, r4
 80098a2:	f000 fdcd 	bl	800a440 <__utoa>
 80098a6:	e7f1      	b.n	800988c <__itoa+0x10>
 80098a8:	2100      	movs	r1, #0
 80098aa:	e7f9      	b.n	80098a0 <__itoa+0x24>

080098ac <itoa>:
 80098ac:	f7ff bfe6 	b.w	800987c <__itoa>

080098b0 <malloc>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <malloc+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f000 b88b 	b.w	80099d0 <_malloc_r>
 80098ba:	bf00      	nop
 80098bc:	20000018 	.word	0x20000018

080098c0 <free>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <free+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f000 b833 	b.w	8009930 <_free_r>
 80098ca:	bf00      	nop
 80098cc:	20000018 	.word	0x20000018

080098d0 <memcpy>:
 80098d0:	440a      	add	r2, r1
 80098d2:	4291      	cmp	r1, r2
 80098d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098d8:	d100      	bne.n	80098dc <memcpy+0xc>
 80098da:	4770      	bx	lr
 80098dc:	b510      	push	{r4, lr}
 80098de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e6:	4291      	cmp	r1, r2
 80098e8:	d1f9      	bne.n	80098de <memcpy+0xe>
 80098ea:	bd10      	pop	{r4, pc}

080098ec <memmove>:
 80098ec:	4288      	cmp	r0, r1
 80098ee:	b510      	push	{r4, lr}
 80098f0:	eb01 0402 	add.w	r4, r1, r2
 80098f4:	d902      	bls.n	80098fc <memmove+0x10>
 80098f6:	4284      	cmp	r4, r0
 80098f8:	4623      	mov	r3, r4
 80098fa:	d807      	bhi.n	800990c <memmove+0x20>
 80098fc:	1e43      	subs	r3, r0, #1
 80098fe:	42a1      	cmp	r1, r4
 8009900:	d008      	beq.n	8009914 <memmove+0x28>
 8009902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800990a:	e7f8      	b.n	80098fe <memmove+0x12>
 800990c:	4402      	add	r2, r0
 800990e:	4601      	mov	r1, r0
 8009910:	428a      	cmp	r2, r1
 8009912:	d100      	bne.n	8009916 <memmove+0x2a>
 8009914:	bd10      	pop	{r4, pc}
 8009916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800991a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800991e:	e7f7      	b.n	8009910 <memmove+0x24>

08009920 <memset>:
 8009920:	4402      	add	r2, r0
 8009922:	4603      	mov	r3, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <_free_r>:
 8009930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009932:	2900      	cmp	r1, #0
 8009934:	d048      	beq.n	80099c8 <_free_r+0x98>
 8009936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993a:	9001      	str	r0, [sp, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f1a1 0404 	sub.w	r4, r1, #4
 8009942:	bfb8      	it	lt
 8009944:	18e4      	addlt	r4, r4, r3
 8009946:	f001 fc3b 	bl	800b1c0 <__malloc_lock>
 800994a:	4a20      	ldr	r2, [pc, #128]	; (80099cc <_free_r+0x9c>)
 800994c:	9801      	ldr	r0, [sp, #4]
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	4615      	mov	r5, r2
 8009952:	b933      	cbnz	r3, 8009962 <_free_r+0x32>
 8009954:	6063      	str	r3, [r4, #4]
 8009956:	6014      	str	r4, [r2, #0]
 8009958:	b003      	add	sp, #12
 800995a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800995e:	f001 bc35 	b.w	800b1cc <__malloc_unlock>
 8009962:	42a3      	cmp	r3, r4
 8009964:	d90b      	bls.n	800997e <_free_r+0x4e>
 8009966:	6821      	ldr	r1, [r4, #0]
 8009968:	1862      	adds	r2, r4, r1
 800996a:	4293      	cmp	r3, r2
 800996c:	bf04      	itt	eq
 800996e:	681a      	ldreq	r2, [r3, #0]
 8009970:	685b      	ldreq	r3, [r3, #4]
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	bf04      	itt	eq
 8009976:	1852      	addeq	r2, r2, r1
 8009978:	6022      	streq	r2, [r4, #0]
 800997a:	602c      	str	r4, [r5, #0]
 800997c:	e7ec      	b.n	8009958 <_free_r+0x28>
 800997e:	461a      	mov	r2, r3
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	b10b      	cbz	r3, 8009988 <_free_r+0x58>
 8009984:	42a3      	cmp	r3, r4
 8009986:	d9fa      	bls.n	800997e <_free_r+0x4e>
 8009988:	6811      	ldr	r1, [r2, #0]
 800998a:	1855      	adds	r5, r2, r1
 800998c:	42a5      	cmp	r5, r4
 800998e:	d10b      	bne.n	80099a8 <_free_r+0x78>
 8009990:	6824      	ldr	r4, [r4, #0]
 8009992:	4421      	add	r1, r4
 8009994:	1854      	adds	r4, r2, r1
 8009996:	42a3      	cmp	r3, r4
 8009998:	6011      	str	r1, [r2, #0]
 800999a:	d1dd      	bne.n	8009958 <_free_r+0x28>
 800999c:	681c      	ldr	r4, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	6053      	str	r3, [r2, #4]
 80099a2:	4421      	add	r1, r4
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	e7d7      	b.n	8009958 <_free_r+0x28>
 80099a8:	d902      	bls.n	80099b0 <_free_r+0x80>
 80099aa:	230c      	movs	r3, #12
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	e7d3      	b.n	8009958 <_free_r+0x28>
 80099b0:	6825      	ldr	r5, [r4, #0]
 80099b2:	1961      	adds	r1, r4, r5
 80099b4:	428b      	cmp	r3, r1
 80099b6:	bf04      	itt	eq
 80099b8:	6819      	ldreq	r1, [r3, #0]
 80099ba:	685b      	ldreq	r3, [r3, #4]
 80099bc:	6063      	str	r3, [r4, #4]
 80099be:	bf04      	itt	eq
 80099c0:	1949      	addeq	r1, r1, r5
 80099c2:	6021      	streq	r1, [r4, #0]
 80099c4:	6054      	str	r4, [r2, #4]
 80099c6:	e7c7      	b.n	8009958 <_free_r+0x28>
 80099c8:	b003      	add	sp, #12
 80099ca:	bd30      	pop	{r4, r5, pc}
 80099cc:	200005d4 	.word	0x200005d4

080099d0 <_malloc_r>:
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d2:	1ccd      	adds	r5, r1, #3
 80099d4:	f025 0503 	bic.w	r5, r5, #3
 80099d8:	3508      	adds	r5, #8
 80099da:	2d0c      	cmp	r5, #12
 80099dc:	bf38      	it	cc
 80099de:	250c      	movcc	r5, #12
 80099e0:	2d00      	cmp	r5, #0
 80099e2:	4606      	mov	r6, r0
 80099e4:	db01      	blt.n	80099ea <_malloc_r+0x1a>
 80099e6:	42a9      	cmp	r1, r5
 80099e8:	d903      	bls.n	80099f2 <_malloc_r+0x22>
 80099ea:	230c      	movs	r3, #12
 80099ec:	6033      	str	r3, [r6, #0]
 80099ee:	2000      	movs	r0, #0
 80099f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f2:	f001 fbe5 	bl	800b1c0 <__malloc_lock>
 80099f6:	4921      	ldr	r1, [pc, #132]	; (8009a7c <_malloc_r+0xac>)
 80099f8:	680a      	ldr	r2, [r1, #0]
 80099fa:	4614      	mov	r4, r2
 80099fc:	b99c      	cbnz	r4, 8009a26 <_malloc_r+0x56>
 80099fe:	4f20      	ldr	r7, [pc, #128]	; (8009a80 <_malloc_r+0xb0>)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	b923      	cbnz	r3, 8009a0e <_malloc_r+0x3e>
 8009a04:	4621      	mov	r1, r4
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 fca6 	bl	800a358 <_sbrk_r>
 8009a0c:	6038      	str	r0, [r7, #0]
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 fca1 	bl	800a358 <_sbrk_r>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d123      	bne.n	8009a62 <_malloc_r+0x92>
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f001 fbd4 	bl	800b1cc <__malloc_unlock>
 8009a24:	e7e3      	b.n	80099ee <_malloc_r+0x1e>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	1b5b      	subs	r3, r3, r5
 8009a2a:	d417      	bmi.n	8009a5c <_malloc_r+0x8c>
 8009a2c:	2b0b      	cmp	r3, #11
 8009a2e:	d903      	bls.n	8009a38 <_malloc_r+0x68>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	441c      	add	r4, r3
 8009a34:	6025      	str	r5, [r4, #0]
 8009a36:	e004      	b.n	8009a42 <_malloc_r+0x72>
 8009a38:	6863      	ldr	r3, [r4, #4]
 8009a3a:	42a2      	cmp	r2, r4
 8009a3c:	bf0c      	ite	eq
 8009a3e:	600b      	streq	r3, [r1, #0]
 8009a40:	6053      	strne	r3, [r2, #4]
 8009a42:	4630      	mov	r0, r6
 8009a44:	f001 fbc2 	bl	800b1cc <__malloc_unlock>
 8009a48:	f104 000b 	add.w	r0, r4, #11
 8009a4c:	1d23      	adds	r3, r4, #4
 8009a4e:	f020 0007 	bic.w	r0, r0, #7
 8009a52:	1ac2      	subs	r2, r0, r3
 8009a54:	d0cc      	beq.n	80099f0 <_malloc_r+0x20>
 8009a56:	1a1b      	subs	r3, r3, r0
 8009a58:	50a3      	str	r3, [r4, r2]
 8009a5a:	e7c9      	b.n	80099f0 <_malloc_r+0x20>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	6864      	ldr	r4, [r4, #4]
 8009a60:	e7cc      	b.n	80099fc <_malloc_r+0x2c>
 8009a62:	1cc4      	adds	r4, r0, #3
 8009a64:	f024 0403 	bic.w	r4, r4, #3
 8009a68:	42a0      	cmp	r0, r4
 8009a6a:	d0e3      	beq.n	8009a34 <_malloc_r+0x64>
 8009a6c:	1a21      	subs	r1, r4, r0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 fc72 	bl	800a358 <_sbrk_r>
 8009a74:	3001      	adds	r0, #1
 8009a76:	d1dd      	bne.n	8009a34 <_malloc_r+0x64>
 8009a78:	e7cf      	b.n	8009a1a <_malloc_r+0x4a>
 8009a7a:	bf00      	nop
 8009a7c:	200005d4 	.word	0x200005d4
 8009a80:	200005d8 	.word	0x200005d8

08009a84 <__cvt>:
 8009a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	ec55 4b10 	vmov	r4, r5, d0
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	460e      	mov	r6, r1
 8009a90:	4619      	mov	r1, r3
 8009a92:	462b      	mov	r3, r5
 8009a94:	bfbb      	ittet	lt
 8009a96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a9a:	461d      	movlt	r5, r3
 8009a9c:	2300      	movge	r3, #0
 8009a9e:	232d      	movlt	r3, #45	; 0x2d
 8009aa0:	700b      	strb	r3, [r1, #0]
 8009aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009aa8:	4691      	mov	r9, r2
 8009aaa:	f023 0820 	bic.w	r8, r3, #32
 8009aae:	bfbc      	itt	lt
 8009ab0:	4622      	movlt	r2, r4
 8009ab2:	4614      	movlt	r4, r2
 8009ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ab8:	d005      	beq.n	8009ac6 <__cvt+0x42>
 8009aba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009abe:	d100      	bne.n	8009ac2 <__cvt+0x3e>
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	2102      	movs	r1, #2
 8009ac4:	e000      	b.n	8009ac8 <__cvt+0x44>
 8009ac6:	2103      	movs	r1, #3
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	ab02      	add	r3, sp, #8
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	ec45 4b10 	vmov	d0, r4, r5
 8009ad4:	4653      	mov	r3, sl
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	f000 fd82 	bl	800a5e0 <_dtoa_r>
 8009adc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	d102      	bne.n	8009aea <__cvt+0x66>
 8009ae4:	f019 0f01 	tst.w	r9, #1
 8009ae8:	d022      	beq.n	8009b30 <__cvt+0xac>
 8009aea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aee:	eb07 0906 	add.w	r9, r7, r6
 8009af2:	d110      	bne.n	8009b16 <__cvt+0x92>
 8009af4:	783b      	ldrb	r3, [r7, #0]
 8009af6:	2b30      	cmp	r3, #48	; 0x30
 8009af8:	d10a      	bne.n	8009b10 <__cvt+0x8c>
 8009afa:	2200      	movs	r2, #0
 8009afc:	2300      	movs	r3, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b06:	b918      	cbnz	r0, 8009b10 <__cvt+0x8c>
 8009b08:	f1c6 0601 	rsb	r6, r6, #1
 8009b0c:	f8ca 6000 	str.w	r6, [sl]
 8009b10:	f8da 3000 	ldr.w	r3, [sl]
 8009b14:	4499      	add	r9, r3
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f6 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b22:	b108      	cbz	r0, 8009b28 <__cvt+0xa4>
 8009b24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b28:	2230      	movs	r2, #48	; 0x30
 8009b2a:	9b03      	ldr	r3, [sp, #12]
 8009b2c:	454b      	cmp	r3, r9
 8009b2e:	d307      	bcc.n	8009b40 <__cvt+0xbc>
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b34:	1bdb      	subs	r3, r3, r7
 8009b36:	4638      	mov	r0, r7
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	b004      	add	sp, #16
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	1c59      	adds	r1, r3, #1
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e7f0      	b.n	8009b2a <__cvt+0xa6>

08009b48 <__exponent>:
 8009b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	bfb8      	it	lt
 8009b50:	4249      	neglt	r1, r1
 8009b52:	f803 2b02 	strb.w	r2, [r3], #2
 8009b56:	bfb4      	ite	lt
 8009b58:	222d      	movlt	r2, #45	; 0x2d
 8009b5a:	222b      	movge	r2, #43	; 0x2b
 8009b5c:	2909      	cmp	r1, #9
 8009b5e:	7042      	strb	r2, [r0, #1]
 8009b60:	dd2a      	ble.n	8009bb8 <__exponent+0x70>
 8009b62:	f10d 0407 	add.w	r4, sp, #7
 8009b66:	46a4      	mov	ip, r4
 8009b68:	270a      	movs	r7, #10
 8009b6a:	46a6      	mov	lr, r4
 8009b6c:	460a      	mov	r2, r1
 8009b6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b72:	fb07 1516 	mls	r5, r7, r6, r1
 8009b76:	3530      	adds	r5, #48	; 0x30
 8009b78:	2a63      	cmp	r2, #99	; 0x63
 8009b7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009b7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b82:	4631      	mov	r1, r6
 8009b84:	dcf1      	bgt.n	8009b6a <__exponent+0x22>
 8009b86:	3130      	adds	r1, #48	; 0x30
 8009b88:	f1ae 0502 	sub.w	r5, lr, #2
 8009b8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b90:	1c44      	adds	r4, r0, #1
 8009b92:	4629      	mov	r1, r5
 8009b94:	4561      	cmp	r1, ip
 8009b96:	d30a      	bcc.n	8009bae <__exponent+0x66>
 8009b98:	f10d 0209 	add.w	r2, sp, #9
 8009b9c:	eba2 020e 	sub.w	r2, r2, lr
 8009ba0:	4565      	cmp	r5, ip
 8009ba2:	bf88      	it	hi
 8009ba4:	2200      	movhi	r2, #0
 8009ba6:	4413      	add	r3, r2
 8009ba8:	1a18      	subs	r0, r3, r0
 8009baa:	b003      	add	sp, #12
 8009bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009bb6:	e7ed      	b.n	8009b94 <__exponent+0x4c>
 8009bb8:	2330      	movs	r3, #48	; 0x30
 8009bba:	3130      	adds	r1, #48	; 0x30
 8009bbc:	7083      	strb	r3, [r0, #2]
 8009bbe:	70c1      	strb	r1, [r0, #3]
 8009bc0:	1d03      	adds	r3, r0, #4
 8009bc2:	e7f1      	b.n	8009ba8 <__exponent+0x60>

08009bc4 <_printf_float>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	ed2d 8b02 	vpush	{d8}
 8009bcc:	b08d      	sub	sp, #52	; 0x34
 8009bce:	460c      	mov	r4, r1
 8009bd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bd4:	4616      	mov	r6, r2
 8009bd6:	461f      	mov	r7, r3
 8009bd8:	4605      	mov	r5, r0
 8009bda:	f001 faed 	bl	800b1b8 <_localeconv_r>
 8009bde:	f8d0 a000 	ldr.w	sl, [r0]
 8009be2:	4650      	mov	r0, sl
 8009be4:	f7f6 fb44 	bl	8000270 <strlen>
 8009be8:	2300      	movs	r3, #0
 8009bea:	930a      	str	r3, [sp, #40]	; 0x28
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bf8:	3307      	adds	r3, #7
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	f103 0208 	add.w	r2, r3, #8
 8009c02:	f8c8 2000 	str.w	r2, [r8]
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c1c:	ee08 0a10 	vmov	s16, r0
 8009c20:	4b9f      	ldr	r3, [pc, #636]	; (8009ea0 <_printf_float+0x2dc>)
 8009c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c2a:	f7f6 ff7f 	bl	8000b2c <__aeabi_dcmpun>
 8009c2e:	bb88      	cbnz	r0, 8009c94 <_printf_float+0xd0>
 8009c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c34:	4b9a      	ldr	r3, [pc, #616]	; (8009ea0 <_printf_float+0x2dc>)
 8009c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c3a:	f7f6 ff59 	bl	8000af0 <__aeabi_dcmple>
 8009c3e:	bb48      	cbnz	r0, 8009c94 <_printf_float+0xd0>
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 ff48 	bl	8000adc <__aeabi_dcmplt>
 8009c4c:	b110      	cbz	r0, 8009c54 <_printf_float+0x90>
 8009c4e:	232d      	movs	r3, #45	; 0x2d
 8009c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c54:	4b93      	ldr	r3, [pc, #588]	; (8009ea4 <_printf_float+0x2e0>)
 8009c56:	4894      	ldr	r0, [pc, #592]	; (8009ea8 <_printf_float+0x2e4>)
 8009c58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c5c:	bf94      	ite	ls
 8009c5e:	4698      	movls	r8, r3
 8009c60:	4680      	movhi	r8, r0
 8009c62:	2303      	movs	r3, #3
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	f023 0204 	bic.w	r2, r3, #4
 8009c6c:	6022      	str	r2, [r4, #0]
 8009c6e:	f04f 0900 	mov.w	r9, #0
 8009c72:	9700      	str	r7, [sp, #0]
 8009c74:	4633      	mov	r3, r6
 8009c76:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 f9d8 	bl	800a030 <_printf_common>
 8009c80:	3001      	adds	r0, #1
 8009c82:	f040 8090 	bne.w	8009da6 <_printf_float+0x1e2>
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8a:	b00d      	add	sp, #52	; 0x34
 8009c8c:	ecbd 8b02 	vpop	{d8}
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8009ca0:	b140      	cbz	r0, 8009cb4 <_printf_float+0xf0>
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfbc      	itt	lt
 8009ca8:	232d      	movlt	r3, #45	; 0x2d
 8009caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cae:	487f      	ldr	r0, [pc, #508]	; (8009eac <_printf_float+0x2e8>)
 8009cb0:	4b7f      	ldr	r3, [pc, #508]	; (8009eb0 <_printf_float+0x2ec>)
 8009cb2:	e7d1      	b.n	8009c58 <_printf_float+0x94>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009cba:	9206      	str	r2, [sp, #24]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	d13f      	bne.n	8009d40 <_printf_float+0x17c>
 8009cc0:	2306      	movs	r3, #6
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	9b05      	ldr	r3, [sp, #20]
 8009cc6:	6861      	ldr	r1, [r4, #4]
 8009cc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	ab0a      	add	r3, sp, #40	; 0x28
 8009cd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cd6:	ab09      	add	r3, sp, #36	; 0x24
 8009cd8:	ec49 8b10 	vmov	d0, r8, r9
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	6022      	str	r2, [r4, #0]
 8009ce0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f7ff fecd 	bl	8009a84 <__cvt>
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cee:	2b47      	cmp	r3, #71	; 0x47
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	d108      	bne.n	8009d06 <_printf_float+0x142>
 8009cf4:	1cc8      	adds	r0, r1, #3
 8009cf6:	db02      	blt.n	8009cfe <_printf_float+0x13a>
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	dd41      	ble.n	8009d82 <_printf_float+0x1be>
 8009cfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d02:	fa5f fb8b 	uxtb.w	fp, fp
 8009d06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d0a:	d820      	bhi.n	8009d4e <_printf_float+0x18a>
 8009d0c:	3901      	subs	r1, #1
 8009d0e:	465a      	mov	r2, fp
 8009d10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d14:	9109      	str	r1, [sp, #36]	; 0x24
 8009d16:	f7ff ff17 	bl	8009b48 <__exponent>
 8009d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d1c:	1813      	adds	r3, r2, r0
 8009d1e:	2a01      	cmp	r2, #1
 8009d20:	4681      	mov	r9, r0
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	dc02      	bgt.n	8009d2c <_printf_float+0x168>
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	07d2      	lsls	r2, r2, #31
 8009d2a:	d501      	bpl.n	8009d30 <_printf_float+0x16c>
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	6123      	str	r3, [r4, #16]
 8009d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d09c      	beq.n	8009c72 <_printf_float+0xae>
 8009d38:	232d      	movs	r3, #45	; 0x2d
 8009d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3e:	e798      	b.n	8009c72 <_printf_float+0xae>
 8009d40:	9a06      	ldr	r2, [sp, #24]
 8009d42:	2a47      	cmp	r2, #71	; 0x47
 8009d44:	d1be      	bne.n	8009cc4 <_printf_float+0x100>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1bc      	bne.n	8009cc4 <_printf_float+0x100>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e7b9      	b.n	8009cc2 <_printf_float+0xfe>
 8009d4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d52:	d118      	bne.n	8009d86 <_printf_float+0x1c2>
 8009d54:	2900      	cmp	r1, #0
 8009d56:	6863      	ldr	r3, [r4, #4]
 8009d58:	dd0b      	ble.n	8009d72 <_printf_float+0x1ae>
 8009d5a:	6121      	str	r1, [r4, #16]
 8009d5c:	b913      	cbnz	r3, 8009d64 <_printf_float+0x1a0>
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	07d0      	lsls	r0, r2, #31
 8009d62:	d502      	bpl.n	8009d6a <_printf_float+0x1a6>
 8009d64:	3301      	adds	r3, #1
 8009d66:	440b      	add	r3, r1
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d6c:	f04f 0900 	mov.w	r9, #0
 8009d70:	e7de      	b.n	8009d30 <_printf_float+0x16c>
 8009d72:	b913      	cbnz	r3, 8009d7a <_printf_float+0x1b6>
 8009d74:	6822      	ldr	r2, [r4, #0]
 8009d76:	07d2      	lsls	r2, r2, #31
 8009d78:	d501      	bpl.n	8009d7e <_printf_float+0x1ba>
 8009d7a:	3302      	adds	r3, #2
 8009d7c:	e7f4      	b.n	8009d68 <_printf_float+0x1a4>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e7f2      	b.n	8009d68 <_printf_float+0x1a4>
 8009d82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	db05      	blt.n	8009d98 <_printf_float+0x1d4>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	6121      	str	r1, [r4, #16]
 8009d90:	07d8      	lsls	r0, r3, #31
 8009d92:	d5ea      	bpl.n	8009d6a <_printf_float+0x1a6>
 8009d94:	1c4b      	adds	r3, r1, #1
 8009d96:	e7e7      	b.n	8009d68 <_printf_float+0x1a4>
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	bfd4      	ite	le
 8009d9c:	f1c1 0202 	rsble	r2, r1, #2
 8009da0:	2201      	movgt	r2, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	e7e0      	b.n	8009d68 <_printf_float+0x1a4>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	055a      	lsls	r2, r3, #21
 8009daa:	d407      	bmi.n	8009dbc <_printf_float+0x1f8>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	4642      	mov	r2, r8
 8009db0:	4631      	mov	r1, r6
 8009db2:	4628      	mov	r0, r5
 8009db4:	47b8      	blx	r7
 8009db6:	3001      	adds	r0, #1
 8009db8:	d12c      	bne.n	8009e14 <_printf_float+0x250>
 8009dba:	e764      	b.n	8009c86 <_printf_float+0xc2>
 8009dbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dc0:	f240 80e0 	bls.w	8009f84 <_printf_float+0x3c0>
 8009dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dc8:	2200      	movs	r2, #0
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f7f6 fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d034      	beq.n	8009e3e <_printf_float+0x27a>
 8009dd4:	4a37      	ldr	r2, [pc, #220]	; (8009eb4 <_printf_float+0x2f0>)
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f af51 	beq.w	8009c86 <_printf_float+0xc2>
 8009de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009de8:	429a      	cmp	r2, r3
 8009dea:	db02      	blt.n	8009df2 <_printf_float+0x22e>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	07d8      	lsls	r0, r3, #31
 8009df0:	d510      	bpl.n	8009e14 <_printf_float+0x250>
 8009df2:	ee18 3a10 	vmov	r3, s16
 8009df6:	4652      	mov	r2, sl
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f af41 	beq.w	8009c86 <_printf_float+0xc2>
 8009e04:	f04f 0800 	mov.w	r8, #0
 8009e08:	f104 091a 	add.w	r9, r4, #26
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4543      	cmp	r3, r8
 8009e12:	dc09      	bgt.n	8009e28 <_printf_float+0x264>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	079b      	lsls	r3, r3, #30
 8009e18:	f100 8105 	bmi.w	800a026 <_printf_float+0x462>
 8009e1c:	68e0      	ldr	r0, [r4, #12]
 8009e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e20:	4298      	cmp	r0, r3
 8009e22:	bfb8      	it	lt
 8009e24:	4618      	movlt	r0, r3
 8009e26:	e730      	b.n	8009c8a <_printf_float+0xc6>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	464a      	mov	r2, r9
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af27 	beq.w	8009c86 <_printf_float+0xc2>
 8009e38:	f108 0801 	add.w	r8, r8, #1
 8009e3c:	e7e6      	b.n	8009e0c <_printf_float+0x248>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dc39      	bgt.n	8009eb8 <_printf_float+0x2f4>
 8009e44:	4a1b      	ldr	r2, [pc, #108]	; (8009eb4 <_printf_float+0x2f0>)
 8009e46:	2301      	movs	r3, #1
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f af19 	beq.w	8009c86 <_printf_float+0xc2>
 8009e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	d102      	bne.n	8009e62 <_printf_float+0x29e>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	07d9      	lsls	r1, r3, #31
 8009e60:	d5d8      	bpl.n	8009e14 <_printf_float+0x250>
 8009e62:	ee18 3a10 	vmov	r3, s16
 8009e66:	4652      	mov	r2, sl
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f af09 	beq.w	8009c86 <_printf_float+0xc2>
 8009e74:	f04f 0900 	mov.w	r9, #0
 8009e78:	f104 0a1a 	add.w	sl, r4, #26
 8009e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7e:	425b      	negs	r3, r3
 8009e80:	454b      	cmp	r3, r9
 8009e82:	dc01      	bgt.n	8009e88 <_printf_float+0x2c4>
 8009e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e86:	e792      	b.n	8009dae <_printf_float+0x1ea>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4628      	mov	r0, r5
 8009e90:	47b8      	blx	r7
 8009e92:	3001      	adds	r0, #1
 8009e94:	f43f aef7 	beq.w	8009c86 <_printf_float+0xc2>
 8009e98:	f109 0901 	add.w	r9, r9, #1
 8009e9c:	e7ee      	b.n	8009e7c <_printf_float+0x2b8>
 8009e9e:	bf00      	nop
 8009ea0:	7fefffff 	.word	0x7fefffff
 8009ea4:	0800c854 	.word	0x0800c854
 8009ea8:	0800c858 	.word	0x0800c858
 8009eac:	0800c860 	.word	0x0800c860
 8009eb0:	0800c85c 	.word	0x0800c85c
 8009eb4:	0800c864 	.word	0x0800c864
 8009eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	bfa8      	it	ge
 8009ec0:	461a      	movge	r2, r3
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	dc37      	bgt.n	8009f38 <_printf_float+0x374>
 8009ec8:	f04f 0b00 	mov.w	fp, #0
 8009ecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ed0:	f104 021a 	add.w	r2, r4, #26
 8009ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ed6:	9305      	str	r3, [sp, #20]
 8009ed8:	eba3 0309 	sub.w	r3, r3, r9
 8009edc:	455b      	cmp	r3, fp
 8009ede:	dc33      	bgt.n	8009f48 <_printf_float+0x384>
 8009ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	db3b      	blt.n	8009f60 <_printf_float+0x39c>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	07da      	lsls	r2, r3, #31
 8009eec:	d438      	bmi.n	8009f60 <_printf_float+0x39c>
 8009eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef0:	9b05      	ldr	r3, [sp, #20]
 8009ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	eba2 0901 	sub.w	r9, r2, r1
 8009efa:	4599      	cmp	r9, r3
 8009efc:	bfa8      	it	ge
 8009efe:	4699      	movge	r9, r3
 8009f00:	f1b9 0f00 	cmp.w	r9, #0
 8009f04:	dc35      	bgt.n	8009f72 <_printf_float+0x3ae>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f0e:	f104 0a1a 	add.w	sl, r4, #26
 8009f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	eba3 0309 	sub.w	r3, r3, r9
 8009f1c:	4543      	cmp	r3, r8
 8009f1e:	f77f af79 	ble.w	8009e14 <_printf_float+0x250>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4652      	mov	r2, sl
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	f43f aeaa 	beq.w	8009c86 <_printf_float+0xc2>
 8009f32:	f108 0801 	add.w	r8, r8, #1
 8009f36:	e7ec      	b.n	8009f12 <_printf_float+0x34e>
 8009f38:	4613      	mov	r3, r2
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	d1c0      	bne.n	8009ec8 <_printf_float+0x304>
 8009f46:	e69e      	b.n	8009c86 <_printf_float+0xc2>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	9205      	str	r2, [sp, #20]
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f ae97 	beq.w	8009c86 <_printf_float+0xc2>
 8009f58:	9a05      	ldr	r2, [sp, #20]
 8009f5a:	f10b 0b01 	add.w	fp, fp, #1
 8009f5e:	e7b9      	b.n	8009ed4 <_printf_float+0x310>
 8009f60:	ee18 3a10 	vmov	r3, s16
 8009f64:	4652      	mov	r2, sl
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d1be      	bne.n	8009eee <_printf_float+0x32a>
 8009f70:	e689      	b.n	8009c86 <_printf_float+0xc2>
 8009f72:	9a05      	ldr	r2, [sp, #20]
 8009f74:	464b      	mov	r3, r9
 8009f76:	4442      	add	r2, r8
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d1c1      	bne.n	8009f06 <_printf_float+0x342>
 8009f82:	e680      	b.n	8009c86 <_printf_float+0xc2>
 8009f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f86:	2a01      	cmp	r2, #1
 8009f88:	dc01      	bgt.n	8009f8e <_printf_float+0x3ca>
 8009f8a:	07db      	lsls	r3, r3, #31
 8009f8c:	d538      	bpl.n	800a000 <_printf_float+0x43c>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4642      	mov	r2, r8
 8009f92:	4631      	mov	r1, r6
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b8      	blx	r7
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f43f ae74 	beq.w	8009c86 <_printf_float+0xc2>
 8009f9e:	ee18 3a10 	vmov	r3, s16
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	f43f ae6b 	beq.w	8009c86 <_printf_float+0xc2>
 8009fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f7f6 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fbc:	b9d8      	cbnz	r0, 8009ff6 <_printf_float+0x432>
 8009fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc0:	f108 0201 	add.w	r2, r8, #1
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b8      	blx	r7
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d10e      	bne.n	8009fee <_printf_float+0x42a>
 8009fd0:	e659      	b.n	8009c86 <_printf_float+0xc2>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f ae52 	beq.w	8009c86 <_printf_float+0xc2>
 8009fe2:	f108 0801 	add.w	r8, r8, #1
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	4543      	cmp	r3, r8
 8009fec:	dcf1      	bgt.n	8009fd2 <_printf_float+0x40e>
 8009fee:	464b      	mov	r3, r9
 8009ff0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ff4:	e6dc      	b.n	8009db0 <_printf_float+0x1ec>
 8009ff6:	f04f 0800 	mov.w	r8, #0
 8009ffa:	f104 0a1a 	add.w	sl, r4, #26
 8009ffe:	e7f2      	b.n	8009fe6 <_printf_float+0x422>
 800a000:	2301      	movs	r3, #1
 800a002:	4642      	mov	r2, r8
 800a004:	e7df      	b.n	8009fc6 <_printf_float+0x402>
 800a006:	2301      	movs	r3, #1
 800a008:	464a      	mov	r2, r9
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae38 	beq.w	8009c86 <_printf_float+0xc2>
 800a016:	f108 0801 	add.w	r8, r8, #1
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a01e:	1a5b      	subs	r3, r3, r1
 800a020:	4543      	cmp	r3, r8
 800a022:	dcf0      	bgt.n	800a006 <_printf_float+0x442>
 800a024:	e6fa      	b.n	8009e1c <_printf_float+0x258>
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	f104 0919 	add.w	r9, r4, #25
 800a02e:	e7f4      	b.n	800a01a <_printf_float+0x456>

0800a030 <_printf_common>:
 800a030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a034:	4616      	mov	r6, r2
 800a036:	4699      	mov	r9, r3
 800a038:	688a      	ldr	r2, [r1, #8]
 800a03a:	690b      	ldr	r3, [r1, #16]
 800a03c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a040:	4293      	cmp	r3, r2
 800a042:	bfb8      	it	lt
 800a044:	4613      	movlt	r3, r2
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a04c:	4607      	mov	r7, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	b10a      	cbz	r2, 800a056 <_printf_common+0x26>
 800a052:	3301      	adds	r3, #1
 800a054:	6033      	str	r3, [r6, #0]
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	0699      	lsls	r1, r3, #26
 800a05a:	bf42      	ittt	mi
 800a05c:	6833      	ldrmi	r3, [r6, #0]
 800a05e:	3302      	addmi	r3, #2
 800a060:	6033      	strmi	r3, [r6, #0]
 800a062:	6825      	ldr	r5, [r4, #0]
 800a064:	f015 0506 	ands.w	r5, r5, #6
 800a068:	d106      	bne.n	800a078 <_printf_common+0x48>
 800a06a:	f104 0a19 	add.w	sl, r4, #25
 800a06e:	68e3      	ldr	r3, [r4, #12]
 800a070:	6832      	ldr	r2, [r6, #0]
 800a072:	1a9b      	subs	r3, r3, r2
 800a074:	42ab      	cmp	r3, r5
 800a076:	dc26      	bgt.n	800a0c6 <_printf_common+0x96>
 800a078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a07c:	1e13      	subs	r3, r2, #0
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	bf18      	it	ne
 800a082:	2301      	movne	r3, #1
 800a084:	0692      	lsls	r2, r2, #26
 800a086:	d42b      	bmi.n	800a0e0 <_printf_common+0xb0>
 800a088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a08c:	4649      	mov	r1, r9
 800a08e:	4638      	mov	r0, r7
 800a090:	47c0      	blx	r8
 800a092:	3001      	adds	r0, #1
 800a094:	d01e      	beq.n	800a0d4 <_printf_common+0xa4>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	68e5      	ldr	r5, [r4, #12]
 800a09a:	6832      	ldr	r2, [r6, #0]
 800a09c:	f003 0306 	and.w	r3, r3, #6
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	bf08      	it	eq
 800a0a4:	1aad      	subeq	r5, r5, r2
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	bf0c      	ite	eq
 800a0ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0b0:	2500      	movne	r5, #0
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bfc4      	itt	gt
 800a0b6:	1a9b      	subgt	r3, r3, r2
 800a0b8:	18ed      	addgt	r5, r5, r3
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	341a      	adds	r4, #26
 800a0be:	42b5      	cmp	r5, r6
 800a0c0:	d11a      	bne.n	800a0f8 <_printf_common+0xc8>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	e008      	b.n	800a0d8 <_printf_common+0xa8>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4652      	mov	r2, sl
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	47c0      	blx	r8
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d103      	bne.n	800a0dc <_printf_common+0xac>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0dc:	3501      	adds	r5, #1
 800a0de:	e7c6      	b.n	800a06e <_printf_common+0x3e>
 800a0e0:	18e1      	adds	r1, r4, r3
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	2030      	movs	r0, #48	; 0x30
 800a0e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ea:	4422      	add	r2, r4
 800a0ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	e7c7      	b.n	800a088 <_printf_common+0x58>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	4638      	mov	r0, r7
 800a100:	47c0      	blx	r8
 800a102:	3001      	adds	r0, #1
 800a104:	d0e6      	beq.n	800a0d4 <_printf_common+0xa4>
 800a106:	3601      	adds	r6, #1
 800a108:	e7d9      	b.n	800a0be <_printf_common+0x8e>
	...

0800a10c <_printf_i>:
 800a10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	460c      	mov	r4, r1
 800a112:	4691      	mov	r9, r2
 800a114:	7e27      	ldrb	r7, [r4, #24]
 800a116:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a118:	2f78      	cmp	r7, #120	; 0x78
 800a11a:	4680      	mov	r8, r0
 800a11c:	469a      	mov	sl, r3
 800a11e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a122:	d807      	bhi.n	800a134 <_printf_i+0x28>
 800a124:	2f62      	cmp	r7, #98	; 0x62
 800a126:	d80a      	bhi.n	800a13e <_printf_i+0x32>
 800a128:	2f00      	cmp	r7, #0
 800a12a:	f000 80d8 	beq.w	800a2de <_printf_i+0x1d2>
 800a12e:	2f58      	cmp	r7, #88	; 0x58
 800a130:	f000 80a3 	beq.w	800a27a <_printf_i+0x16e>
 800a134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a13c:	e03a      	b.n	800a1b4 <_printf_i+0xa8>
 800a13e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a142:	2b15      	cmp	r3, #21
 800a144:	d8f6      	bhi.n	800a134 <_printf_i+0x28>
 800a146:	a001      	add	r0, pc, #4	; (adr r0, 800a14c <_printf_i+0x40>)
 800a148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a14c:	0800a1a5 	.word	0x0800a1a5
 800a150:	0800a1b9 	.word	0x0800a1b9
 800a154:	0800a135 	.word	0x0800a135
 800a158:	0800a135 	.word	0x0800a135
 800a15c:	0800a135 	.word	0x0800a135
 800a160:	0800a135 	.word	0x0800a135
 800a164:	0800a1b9 	.word	0x0800a1b9
 800a168:	0800a135 	.word	0x0800a135
 800a16c:	0800a135 	.word	0x0800a135
 800a170:	0800a135 	.word	0x0800a135
 800a174:	0800a135 	.word	0x0800a135
 800a178:	0800a2c5 	.word	0x0800a2c5
 800a17c:	0800a1e9 	.word	0x0800a1e9
 800a180:	0800a2a7 	.word	0x0800a2a7
 800a184:	0800a135 	.word	0x0800a135
 800a188:	0800a135 	.word	0x0800a135
 800a18c:	0800a2e7 	.word	0x0800a2e7
 800a190:	0800a135 	.word	0x0800a135
 800a194:	0800a1e9 	.word	0x0800a1e9
 800a198:	0800a135 	.word	0x0800a135
 800a19c:	0800a135 	.word	0x0800a135
 800a1a0:	0800a2af 	.word	0x0800a2af
 800a1a4:	680b      	ldr	r3, [r1, #0]
 800a1a6:	1d1a      	adds	r2, r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	600a      	str	r2, [r1, #0]
 800a1ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e0a3      	b.n	800a300 <_printf_i+0x1f4>
 800a1b8:	6825      	ldr	r5, [r4, #0]
 800a1ba:	6808      	ldr	r0, [r1, #0]
 800a1bc:	062e      	lsls	r6, r5, #24
 800a1be:	f100 0304 	add.w	r3, r0, #4
 800a1c2:	d50a      	bpl.n	800a1da <_printf_i+0xce>
 800a1c4:	6805      	ldr	r5, [r0, #0]
 800a1c6:	600b      	str	r3, [r1, #0]
 800a1c8:	2d00      	cmp	r5, #0
 800a1ca:	da03      	bge.n	800a1d4 <_printf_i+0xc8>
 800a1cc:	232d      	movs	r3, #45	; 0x2d
 800a1ce:	426d      	negs	r5, r5
 800a1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d4:	485e      	ldr	r0, [pc, #376]	; (800a350 <_printf_i+0x244>)
 800a1d6:	230a      	movs	r3, #10
 800a1d8:	e019      	b.n	800a20e <_printf_i+0x102>
 800a1da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a1de:	6805      	ldr	r5, [r0, #0]
 800a1e0:	600b      	str	r3, [r1, #0]
 800a1e2:	bf18      	it	ne
 800a1e4:	b22d      	sxthne	r5, r5
 800a1e6:	e7ef      	b.n	800a1c8 <_printf_i+0xbc>
 800a1e8:	680b      	ldr	r3, [r1, #0]
 800a1ea:	6825      	ldr	r5, [r4, #0]
 800a1ec:	1d18      	adds	r0, r3, #4
 800a1ee:	6008      	str	r0, [r1, #0]
 800a1f0:	0628      	lsls	r0, r5, #24
 800a1f2:	d501      	bpl.n	800a1f8 <_printf_i+0xec>
 800a1f4:	681d      	ldr	r5, [r3, #0]
 800a1f6:	e002      	b.n	800a1fe <_printf_i+0xf2>
 800a1f8:	0669      	lsls	r1, r5, #25
 800a1fa:	d5fb      	bpl.n	800a1f4 <_printf_i+0xe8>
 800a1fc:	881d      	ldrh	r5, [r3, #0]
 800a1fe:	4854      	ldr	r0, [pc, #336]	; (800a350 <_printf_i+0x244>)
 800a200:	2f6f      	cmp	r7, #111	; 0x6f
 800a202:	bf0c      	ite	eq
 800a204:	2308      	moveq	r3, #8
 800a206:	230a      	movne	r3, #10
 800a208:	2100      	movs	r1, #0
 800a20a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a20e:	6866      	ldr	r6, [r4, #4]
 800a210:	60a6      	str	r6, [r4, #8]
 800a212:	2e00      	cmp	r6, #0
 800a214:	bfa2      	ittt	ge
 800a216:	6821      	ldrge	r1, [r4, #0]
 800a218:	f021 0104 	bicge.w	r1, r1, #4
 800a21c:	6021      	strge	r1, [r4, #0]
 800a21e:	b90d      	cbnz	r5, 800a224 <_printf_i+0x118>
 800a220:	2e00      	cmp	r6, #0
 800a222:	d04d      	beq.n	800a2c0 <_printf_i+0x1b4>
 800a224:	4616      	mov	r6, r2
 800a226:	fbb5 f1f3 	udiv	r1, r5, r3
 800a22a:	fb03 5711 	mls	r7, r3, r1, r5
 800a22e:	5dc7      	ldrb	r7, [r0, r7]
 800a230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a234:	462f      	mov	r7, r5
 800a236:	42bb      	cmp	r3, r7
 800a238:	460d      	mov	r5, r1
 800a23a:	d9f4      	bls.n	800a226 <_printf_i+0x11a>
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d10b      	bne.n	800a258 <_printf_i+0x14c>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	07df      	lsls	r7, r3, #31
 800a244:	d508      	bpl.n	800a258 <_printf_i+0x14c>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	6861      	ldr	r1, [r4, #4]
 800a24a:	4299      	cmp	r1, r3
 800a24c:	bfde      	ittt	le
 800a24e:	2330      	movle	r3, #48	; 0x30
 800a250:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a254:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a258:	1b92      	subs	r2, r2, r6
 800a25a:	6122      	str	r2, [r4, #16]
 800a25c:	f8cd a000 	str.w	sl, [sp]
 800a260:	464b      	mov	r3, r9
 800a262:	aa03      	add	r2, sp, #12
 800a264:	4621      	mov	r1, r4
 800a266:	4640      	mov	r0, r8
 800a268:	f7ff fee2 	bl	800a030 <_printf_common>
 800a26c:	3001      	adds	r0, #1
 800a26e:	d14c      	bne.n	800a30a <_printf_i+0x1fe>
 800a270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a274:	b004      	add	sp, #16
 800a276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27a:	4835      	ldr	r0, [pc, #212]	; (800a350 <_printf_i+0x244>)
 800a27c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	680e      	ldr	r6, [r1, #0]
 800a284:	061f      	lsls	r7, r3, #24
 800a286:	f856 5b04 	ldr.w	r5, [r6], #4
 800a28a:	600e      	str	r6, [r1, #0]
 800a28c:	d514      	bpl.n	800a2b8 <_printf_i+0x1ac>
 800a28e:	07d9      	lsls	r1, r3, #31
 800a290:	bf44      	itt	mi
 800a292:	f043 0320 	orrmi.w	r3, r3, #32
 800a296:	6023      	strmi	r3, [r4, #0]
 800a298:	b91d      	cbnz	r5, 800a2a2 <_printf_i+0x196>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	f023 0320 	bic.w	r3, r3, #32
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	e7b0      	b.n	800a208 <_printf_i+0xfc>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	f043 0320 	orr.w	r3, r3, #32
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	2378      	movs	r3, #120	; 0x78
 800a2b0:	4828      	ldr	r0, [pc, #160]	; (800a354 <_printf_i+0x248>)
 800a2b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2b6:	e7e3      	b.n	800a280 <_printf_i+0x174>
 800a2b8:	065e      	lsls	r6, r3, #25
 800a2ba:	bf48      	it	mi
 800a2bc:	b2ad      	uxthmi	r5, r5
 800a2be:	e7e6      	b.n	800a28e <_printf_i+0x182>
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	e7bb      	b.n	800a23c <_printf_i+0x130>
 800a2c4:	680b      	ldr	r3, [r1, #0]
 800a2c6:	6826      	ldr	r6, [r4, #0]
 800a2c8:	6960      	ldr	r0, [r4, #20]
 800a2ca:	1d1d      	adds	r5, r3, #4
 800a2cc:	600d      	str	r5, [r1, #0]
 800a2ce:	0635      	lsls	r5, r6, #24
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	d501      	bpl.n	800a2d8 <_printf_i+0x1cc>
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	e002      	b.n	800a2de <_printf_i+0x1d2>
 800a2d8:	0671      	lsls	r1, r6, #25
 800a2da:	d5fb      	bpl.n	800a2d4 <_printf_i+0x1c8>
 800a2dc:	8018      	strh	r0, [r3, #0]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	4616      	mov	r6, r2
 800a2e4:	e7ba      	b.n	800a25c <_printf_i+0x150>
 800a2e6:	680b      	ldr	r3, [r1, #0]
 800a2e8:	1d1a      	adds	r2, r3, #4
 800a2ea:	600a      	str	r2, [r1, #0]
 800a2ec:	681e      	ldr	r6, [r3, #0]
 800a2ee:	6862      	ldr	r2, [r4, #4]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7f5 ff6c 	bl	80001d0 <memchr>
 800a2f8:	b108      	cbz	r0, 800a2fe <_printf_i+0x1f2>
 800a2fa:	1b80      	subs	r0, r0, r6
 800a2fc:	6060      	str	r0, [r4, #4]
 800a2fe:	6863      	ldr	r3, [r4, #4]
 800a300:	6123      	str	r3, [r4, #16]
 800a302:	2300      	movs	r3, #0
 800a304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a308:	e7a8      	b.n	800a25c <_printf_i+0x150>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	4632      	mov	r2, r6
 800a30e:	4649      	mov	r1, r9
 800a310:	4640      	mov	r0, r8
 800a312:	47d0      	blx	sl
 800a314:	3001      	adds	r0, #1
 800a316:	d0ab      	beq.n	800a270 <_printf_i+0x164>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	079b      	lsls	r3, r3, #30
 800a31c:	d413      	bmi.n	800a346 <_printf_i+0x23a>
 800a31e:	68e0      	ldr	r0, [r4, #12]
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	4298      	cmp	r0, r3
 800a324:	bfb8      	it	lt
 800a326:	4618      	movlt	r0, r3
 800a328:	e7a4      	b.n	800a274 <_printf_i+0x168>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4632      	mov	r2, r6
 800a32e:	4649      	mov	r1, r9
 800a330:	4640      	mov	r0, r8
 800a332:	47d0      	blx	sl
 800a334:	3001      	adds	r0, #1
 800a336:	d09b      	beq.n	800a270 <_printf_i+0x164>
 800a338:	3501      	adds	r5, #1
 800a33a:	68e3      	ldr	r3, [r4, #12]
 800a33c:	9903      	ldr	r1, [sp, #12]
 800a33e:	1a5b      	subs	r3, r3, r1
 800a340:	42ab      	cmp	r3, r5
 800a342:	dcf2      	bgt.n	800a32a <_printf_i+0x21e>
 800a344:	e7eb      	b.n	800a31e <_printf_i+0x212>
 800a346:	2500      	movs	r5, #0
 800a348:	f104 0619 	add.w	r6, r4, #25
 800a34c:	e7f5      	b.n	800a33a <_printf_i+0x22e>
 800a34e:	bf00      	nop
 800a350:	0800c866 	.word	0x0800c866
 800a354:	0800c877 	.word	0x0800c877

0800a358 <_sbrk_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d06      	ldr	r5, [pc, #24]	; (800a374 <_sbrk_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	f7f9 f924 	bl	80035b0 <_sbrk>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_sbrk_r+0x1a>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_sbrk_r+0x1a>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	200005e0 	.word	0x200005e0

0800a378 <_raise_r>:
 800a378:	291f      	cmp	r1, #31
 800a37a:	b538      	push	{r3, r4, r5, lr}
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	d904      	bls.n	800a38c <_raise_r+0x14>
 800a382:	2316      	movs	r3, #22
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a38e:	b112      	cbz	r2, 800a396 <_raise_r+0x1e>
 800a390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a394:	b94b      	cbnz	r3, 800a3aa <_raise_r+0x32>
 800a396:	4620      	mov	r0, r4
 800a398:	f000 f830 	bl	800a3fc <_getpid_r>
 800a39c:	462a      	mov	r2, r5
 800a39e:	4601      	mov	r1, r0
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3a6:	f000 b817 	b.w	800a3d8 <_kill_r>
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d00a      	beq.n	800a3c4 <_raise_r+0x4c>
 800a3ae:	1c59      	adds	r1, r3, #1
 800a3b0:	d103      	bne.n	800a3ba <_raise_r+0x42>
 800a3b2:	2316      	movs	r3, #22
 800a3b4:	6003      	str	r3, [r0, #0]
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	e7e7      	b.n	800a38a <_raise_r+0x12>
 800a3ba:	2400      	movs	r4, #0
 800a3bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	4798      	blx	r3
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e7e0      	b.n	800a38a <_raise_r+0x12>

0800a3c8 <raise>:
 800a3c8:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <raise+0xc>)
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f7ff bfd3 	b.w	800a378 <_raise_r>
 800a3d2:	bf00      	nop
 800a3d4:	20000018 	.word	0x20000018

0800a3d8 <_kill_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	; (800a3f8 <_kill_r+0x20>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	f7f9 f85b 	bl	80034a0 <_kill>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	d102      	bne.n	800a3f4 <_kill_r+0x1c>
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	b103      	cbz	r3, 800a3f4 <_kill_r+0x1c>
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	bd38      	pop	{r3, r4, r5, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200005e0 	.word	0x200005e0

0800a3fc <_getpid_r>:
 800a3fc:	f7f9 b848 	b.w	8003490 <_getpid>

0800a400 <siprintf>:
 800a400:	b40e      	push	{r1, r2, r3}
 800a402:	b500      	push	{lr}
 800a404:	b09c      	sub	sp, #112	; 0x70
 800a406:	ab1d      	add	r3, sp, #116	; 0x74
 800a408:	9002      	str	r0, [sp, #8]
 800a40a:	9006      	str	r0, [sp, #24]
 800a40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a410:	4809      	ldr	r0, [pc, #36]	; (800a438 <siprintf+0x38>)
 800a412:	9107      	str	r1, [sp, #28]
 800a414:	9104      	str	r1, [sp, #16]
 800a416:	4909      	ldr	r1, [pc, #36]	; (800a43c <siprintf+0x3c>)
 800a418:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41c:	9105      	str	r1, [sp, #20]
 800a41e:	6800      	ldr	r0, [r0, #0]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	a902      	add	r1, sp, #8
 800a424:	f001 fac0 	bl	800b9a8 <_svfiprintf_r>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	b01c      	add	sp, #112	; 0x70
 800a430:	f85d eb04 	ldr.w	lr, [sp], #4
 800a434:	b003      	add	sp, #12
 800a436:	4770      	bx	lr
 800a438:	20000018 	.word	0x20000018
 800a43c:	ffff0208 	.word	0xffff0208

0800a440 <__utoa>:
 800a440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a442:	4c1f      	ldr	r4, [pc, #124]	; (800a4c0 <__utoa+0x80>)
 800a444:	b08b      	sub	sp, #44	; 0x2c
 800a446:	4605      	mov	r5, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	466e      	mov	r6, sp
 800a44c:	f104 0c20 	add.w	ip, r4, #32
 800a450:	6820      	ldr	r0, [r4, #0]
 800a452:	6861      	ldr	r1, [r4, #4]
 800a454:	4637      	mov	r7, r6
 800a456:	c703      	stmia	r7!, {r0, r1}
 800a458:	3408      	adds	r4, #8
 800a45a:	4564      	cmp	r4, ip
 800a45c:	463e      	mov	r6, r7
 800a45e:	d1f7      	bne.n	800a450 <__utoa+0x10>
 800a460:	7921      	ldrb	r1, [r4, #4]
 800a462:	7139      	strb	r1, [r7, #4]
 800a464:	1e91      	subs	r1, r2, #2
 800a466:	6820      	ldr	r0, [r4, #0]
 800a468:	6038      	str	r0, [r7, #0]
 800a46a:	2922      	cmp	r1, #34	; 0x22
 800a46c:	f04f 0100 	mov.w	r1, #0
 800a470:	d904      	bls.n	800a47c <__utoa+0x3c>
 800a472:	7019      	strb	r1, [r3, #0]
 800a474:	460b      	mov	r3, r1
 800a476:	4618      	mov	r0, r3
 800a478:	b00b      	add	sp, #44	; 0x2c
 800a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47c:	1e58      	subs	r0, r3, #1
 800a47e:	4684      	mov	ip, r0
 800a480:	fbb5 f7f2 	udiv	r7, r5, r2
 800a484:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a488:	fb02 5617 	mls	r6, r2, r7, r5
 800a48c:	4476      	add	r6, lr
 800a48e:	460c      	mov	r4, r1
 800a490:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a494:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a498:	462e      	mov	r6, r5
 800a49a:	42b2      	cmp	r2, r6
 800a49c:	f101 0101 	add.w	r1, r1, #1
 800a4a0:	463d      	mov	r5, r7
 800a4a2:	d9ed      	bls.n	800a480 <__utoa+0x40>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	545a      	strb	r2, [r3, r1]
 800a4a8:	1919      	adds	r1, r3, r4
 800a4aa:	1aa5      	subs	r5, r4, r2
 800a4ac:	42aa      	cmp	r2, r5
 800a4ae:	dae2      	bge.n	800a476 <__utoa+0x36>
 800a4b0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a4b4:	780e      	ldrb	r6, [r1, #0]
 800a4b6:	7006      	strb	r6, [r0, #0]
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	f801 5901 	strb.w	r5, [r1], #-1
 800a4be:	e7f4      	b.n	800a4aa <__utoa+0x6a>
 800a4c0:	0800c888 	.word	0x0800c888

0800a4c4 <quorem>:
 800a4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	6903      	ldr	r3, [r0, #16]
 800a4ca:	690c      	ldr	r4, [r1, #16]
 800a4cc:	42a3      	cmp	r3, r4
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f2c0 8081 	blt.w	800a5d6 <quorem+0x112>
 800a4d4:	3c01      	subs	r4, #1
 800a4d6:	f101 0814 	add.w	r8, r1, #20
 800a4da:	f100 0514 	add.w	r5, r0, #20
 800a4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4fc:	d331      	bcc.n	800a562 <quorem+0x9e>
 800a4fe:	f04f 0e00 	mov.w	lr, #0
 800a502:	4640      	mov	r0, r8
 800a504:	46ac      	mov	ip, r5
 800a506:	46f2      	mov	sl, lr
 800a508:	f850 2b04 	ldr.w	r2, [r0], #4
 800a50c:	b293      	uxth	r3, r2
 800a50e:	fb06 e303 	mla	r3, r6, r3, lr
 800a512:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a516:	b29b      	uxth	r3, r3
 800a518:	ebaa 0303 	sub.w	r3, sl, r3
 800a51c:	0c12      	lsrs	r2, r2, #16
 800a51e:	f8dc a000 	ldr.w	sl, [ip]
 800a522:	fb06 e202 	mla	r2, r6, r2, lr
 800a526:	fa13 f38a 	uxtah	r3, r3, sl
 800a52a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a52e:	fa1f fa82 	uxth.w	sl, r2
 800a532:	f8dc 2000 	ldr.w	r2, [ip]
 800a536:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a53a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a53e:	b29b      	uxth	r3, r3
 800a540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a544:	4581      	cmp	r9, r0
 800a546:	f84c 3b04 	str.w	r3, [ip], #4
 800a54a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a54e:	d2db      	bcs.n	800a508 <quorem+0x44>
 800a550:	f855 300b 	ldr.w	r3, [r5, fp]
 800a554:	b92b      	cbnz	r3, 800a562 <quorem+0x9e>
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	3b04      	subs	r3, #4
 800a55a:	429d      	cmp	r5, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	d32e      	bcc.n	800a5be <quorem+0xfa>
 800a560:	613c      	str	r4, [r7, #16]
 800a562:	4638      	mov	r0, r7
 800a564:	f001 f8b6 	bl	800b6d4 <__mcmp>
 800a568:	2800      	cmp	r0, #0
 800a56a:	db24      	blt.n	800a5b6 <quorem+0xf2>
 800a56c:	3601      	adds	r6, #1
 800a56e:	4628      	mov	r0, r5
 800a570:	f04f 0c00 	mov.w	ip, #0
 800a574:	f858 2b04 	ldr.w	r2, [r8], #4
 800a578:	f8d0 e000 	ldr.w	lr, [r0]
 800a57c:	b293      	uxth	r3, r2
 800a57e:	ebac 0303 	sub.w	r3, ip, r3
 800a582:	0c12      	lsrs	r2, r2, #16
 800a584:	fa13 f38e 	uxtah	r3, r3, lr
 800a588:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a58c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a590:	b29b      	uxth	r3, r3
 800a592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a596:	45c1      	cmp	r9, r8
 800a598:	f840 3b04 	str.w	r3, [r0], #4
 800a59c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5a0:	d2e8      	bcs.n	800a574 <quorem+0xb0>
 800a5a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5aa:	b922      	cbnz	r2, 800a5b6 <quorem+0xf2>
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	d30a      	bcc.n	800a5ca <quorem+0x106>
 800a5b4:	613c      	str	r4, [r7, #16]
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	b003      	add	sp, #12
 800a5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5be:	6812      	ldr	r2, [r2, #0]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	d1cc      	bne.n	800a560 <quorem+0x9c>
 800a5c6:	3c01      	subs	r4, #1
 800a5c8:	e7c7      	b.n	800a55a <quorem+0x96>
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	3b04      	subs	r3, #4
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	d1f0      	bne.n	800a5b4 <quorem+0xf0>
 800a5d2:	3c01      	subs	r4, #1
 800a5d4:	e7eb      	b.n	800a5ae <quorem+0xea>
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	e7ee      	b.n	800a5b8 <quorem+0xf4>
 800a5da:	0000      	movs	r0, r0
 800a5dc:	0000      	movs	r0, r0
	...

0800a5e0 <_dtoa_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	ed2d 8b02 	vpush	{d8}
 800a5e8:	ec57 6b10 	vmov	r6, r7, d0
 800a5ec:	b095      	sub	sp, #84	; 0x54
 800a5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5f4:	9105      	str	r1, [sp, #20]
 800a5f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a600:	b975      	cbnz	r5, 800a620 <_dtoa_r+0x40>
 800a602:	2010      	movs	r0, #16
 800a604:	f7ff f954 	bl	80098b0 <malloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	6260      	str	r0, [r4, #36]	; 0x24
 800a60c:	b920      	cbnz	r0, 800a618 <_dtoa_r+0x38>
 800a60e:	4bb2      	ldr	r3, [pc, #712]	; (800a8d8 <_dtoa_r+0x2f8>)
 800a610:	21ea      	movs	r1, #234	; 0xea
 800a612:	48b2      	ldr	r0, [pc, #712]	; (800a8dc <_dtoa_r+0x2fc>)
 800a614:	f001 fac8 	bl	800bba8 <__assert_func>
 800a618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a61c:	6005      	str	r5, [r0, #0]
 800a61e:	60c5      	str	r5, [r0, #12]
 800a620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a622:	6819      	ldr	r1, [r3, #0]
 800a624:	b151      	cbz	r1, 800a63c <_dtoa_r+0x5c>
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	604a      	str	r2, [r1, #4]
 800a62a:	2301      	movs	r3, #1
 800a62c:	4093      	lsls	r3, r2
 800a62e:	608b      	str	r3, [r1, #8]
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fe11 	bl	800b258 <_Bfree>
 800a636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	1e3b      	subs	r3, r7, #0
 800a63e:	bfb9      	ittee	lt
 800a640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a644:	9303      	strlt	r3, [sp, #12]
 800a646:	2300      	movge	r3, #0
 800a648:	f8c8 3000 	strge.w	r3, [r8]
 800a64c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a650:	4ba3      	ldr	r3, [pc, #652]	; (800a8e0 <_dtoa_r+0x300>)
 800a652:	bfbc      	itt	lt
 800a654:	2201      	movlt	r2, #1
 800a656:	f8c8 2000 	strlt.w	r2, [r8]
 800a65a:	ea33 0309 	bics.w	r3, r3, r9
 800a65e:	d11b      	bne.n	800a698 <_dtoa_r+0xb8>
 800a660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a662:	f242 730f 	movw	r3, #9999	; 0x270f
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a66c:	4333      	orrs	r3, r6
 800a66e:	f000 857a 	beq.w	800b166 <_dtoa_r+0xb86>
 800a672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a674:	b963      	cbnz	r3, 800a690 <_dtoa_r+0xb0>
 800a676:	4b9b      	ldr	r3, [pc, #620]	; (800a8e4 <_dtoa_r+0x304>)
 800a678:	e024      	b.n	800a6c4 <_dtoa_r+0xe4>
 800a67a:	4b9b      	ldr	r3, [pc, #620]	; (800a8e8 <_dtoa_r+0x308>)
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	3308      	adds	r3, #8
 800a680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	9800      	ldr	r0, [sp, #0]
 800a686:	b015      	add	sp, #84	; 0x54
 800a688:	ecbd 8b02 	vpop	{d8}
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	4b94      	ldr	r3, [pc, #592]	; (800a8e4 <_dtoa_r+0x304>)
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	3303      	adds	r3, #3
 800a696:	e7f3      	b.n	800a680 <_dtoa_r+0xa0>
 800a698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a69c:	2200      	movs	r2, #0
 800a69e:	ec51 0b17 	vmov	r0, r1, d7
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a6a8:	f7f6 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	b158      	cbz	r0, 800a6c8 <_dtoa_r+0xe8>
 800a6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 8551 	beq.w	800b160 <_dtoa_r+0xb80>
 800a6be:	488b      	ldr	r0, [pc, #556]	; (800a8ec <_dtoa_r+0x30c>)
 800a6c0:	6018      	str	r0, [r3, #0]
 800a6c2:	1e43      	subs	r3, r0, #1
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	e7dd      	b.n	800a684 <_dtoa_r+0xa4>
 800a6c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a6cc:	aa12      	add	r2, sp, #72	; 0x48
 800a6ce:	a913      	add	r1, sp, #76	; 0x4c
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 f8a3 	bl	800b81c <__d2b>
 800a6d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6da:	4683      	mov	fp, r0
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	d07c      	beq.n	800a7da <_dtoa_r+0x1fa>
 800a6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a6e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a6ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6fa:	4b7d      	ldr	r3, [pc, #500]	; (800a8f0 <_dtoa_r+0x310>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4630      	mov	r0, r6
 800a700:	4639      	mov	r1, r7
 800a702:	f7f5 fdc1 	bl	8000288 <__aeabi_dsub>
 800a706:	a36e      	add	r3, pc, #440	; (adr r3, 800a8c0 <_dtoa_r+0x2e0>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f5 ff74 	bl	80005f8 <__aeabi_dmul>
 800a710:	a36d      	add	r3, pc, #436	; (adr r3, 800a8c8 <_dtoa_r+0x2e8>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f7f5 fdb9 	bl	800028c <__adddf3>
 800a71a:	4606      	mov	r6, r0
 800a71c:	4628      	mov	r0, r5
 800a71e:	460f      	mov	r7, r1
 800a720:	f7f5 ff00 	bl	8000524 <__aeabi_i2d>
 800a724:	a36a      	add	r3, pc, #424	; (adr r3, 800a8d0 <_dtoa_r+0x2f0>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 ff65 	bl	80005f8 <__aeabi_dmul>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	f7f5 fda9 	bl	800028c <__adddf3>
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	f7f6 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800a742:	2200      	movs	r2, #0
 800a744:	4682      	mov	sl, r0
 800a746:	2300      	movs	r3, #0
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800a750:	b148      	cbz	r0, 800a766 <_dtoa_r+0x186>
 800a752:	4650      	mov	r0, sl
 800a754:	f7f5 fee6 	bl	8000524 <__aeabi_i2d>
 800a758:	4632      	mov	r2, r6
 800a75a:	463b      	mov	r3, r7
 800a75c:	f7f6 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a760:	b908      	cbnz	r0, 800a766 <_dtoa_r+0x186>
 800a762:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a766:	f1ba 0f16 	cmp.w	sl, #22
 800a76a:	d854      	bhi.n	800a816 <_dtoa_r+0x236>
 800a76c:	4b61      	ldr	r3, [pc, #388]	; (800a8f4 <_dtoa_r+0x314>)
 800a76e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a77a:	f7f6 f9af 	bl	8000adc <__aeabi_dcmplt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d04b      	beq.n	800a81a <_dtoa_r+0x23a>
 800a782:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a786:	2300      	movs	r3, #0
 800a788:	930e      	str	r3, [sp, #56]	; 0x38
 800a78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a78c:	1b5d      	subs	r5, r3, r5
 800a78e:	1e6b      	subs	r3, r5, #1
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	bf43      	ittte	mi
 800a794:	2300      	movmi	r3, #0
 800a796:	f1c5 0801 	rsbmi	r8, r5, #1
 800a79a:	9304      	strmi	r3, [sp, #16]
 800a79c:	f04f 0800 	movpl.w	r8, #0
 800a7a0:	f1ba 0f00 	cmp.w	sl, #0
 800a7a4:	db3b      	blt.n	800a81e <_dtoa_r+0x23e>
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a7ac:	4453      	add	r3, sl
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d869      	bhi.n	800a88e <_dtoa_r+0x2ae>
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	bfc4      	itt	gt
 800a7be:	3b04      	subgt	r3, #4
 800a7c0:	9305      	strgt	r3, [sp, #20]
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	f1a3 0302 	sub.w	r3, r3, #2
 800a7c8:	bfcc      	ite	gt
 800a7ca:	2500      	movgt	r5, #0
 800a7cc:	2501      	movle	r5, #1
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d869      	bhi.n	800a8a6 <_dtoa_r+0x2c6>
 800a7d2:	e8df f003 	tbb	[pc, r3]
 800a7d6:	4e2c      	.short	0x4e2c
 800a7d8:	5a4c      	.short	0x5a4c
 800a7da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a7de:	441d      	add	r5, r3
 800a7e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	bfc1      	itttt	gt
 800a7e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a7f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7f8:	bfda      	itte	le
 800a7fa:	f1c3 0320 	rsble	r3, r3, #32
 800a7fe:	fa06 f003 	lslle.w	r0, r6, r3
 800a802:	4318      	orrgt	r0, r3
 800a804:	f7f5 fe7e 	bl	8000504 <__aeabi_ui2d>
 800a808:	2301      	movs	r3, #1
 800a80a:	4606      	mov	r6, r0
 800a80c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a810:	3d01      	subs	r5, #1
 800a812:	9310      	str	r3, [sp, #64]	; 0x40
 800a814:	e771      	b.n	800a6fa <_dtoa_r+0x11a>
 800a816:	2301      	movs	r3, #1
 800a818:	e7b6      	b.n	800a788 <_dtoa_r+0x1a8>
 800a81a:	900e      	str	r0, [sp, #56]	; 0x38
 800a81c:	e7b5      	b.n	800a78a <_dtoa_r+0x1aa>
 800a81e:	f1ca 0300 	rsb	r3, sl, #0
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	2300      	movs	r3, #0
 800a826:	eba8 080a 	sub.w	r8, r8, sl
 800a82a:	930d      	str	r3, [sp, #52]	; 0x34
 800a82c:	e7c2      	b.n	800a7b4 <_dtoa_r+0x1d4>
 800a82e:	2300      	movs	r3, #0
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	dc39      	bgt.n	800a8ac <_dtoa_r+0x2cc>
 800a838:	f04f 0901 	mov.w	r9, #1
 800a83c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a840:	464b      	mov	r3, r9
 800a842:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a848:	2200      	movs	r2, #0
 800a84a:	6042      	str	r2, [r0, #4]
 800a84c:	2204      	movs	r2, #4
 800a84e:	f102 0614 	add.w	r6, r2, #20
 800a852:	429e      	cmp	r6, r3
 800a854:	6841      	ldr	r1, [r0, #4]
 800a856:	d92f      	bls.n	800a8b8 <_dtoa_r+0x2d8>
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fcbd 	bl	800b1d8 <_Balloc>
 800a85e:	9000      	str	r0, [sp, #0]
 800a860:	2800      	cmp	r0, #0
 800a862:	d14b      	bne.n	800a8fc <_dtoa_r+0x31c>
 800a864:	4b24      	ldr	r3, [pc, #144]	; (800a8f8 <_dtoa_r+0x318>)
 800a866:	4602      	mov	r2, r0
 800a868:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a86c:	e6d1      	b.n	800a612 <_dtoa_r+0x32>
 800a86e:	2301      	movs	r3, #1
 800a870:	e7de      	b.n	800a830 <_dtoa_r+0x250>
 800a872:	2300      	movs	r3, #0
 800a874:	9308      	str	r3, [sp, #32]
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	eb0a 0903 	add.w	r9, sl, r3
 800a87c:	f109 0301 	add.w	r3, r9, #1
 800a880:	2b01      	cmp	r3, #1
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	bfb8      	it	lt
 800a886:	2301      	movlt	r3, #1
 800a888:	e7dd      	b.n	800a846 <_dtoa_r+0x266>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e7f2      	b.n	800a874 <_dtoa_r+0x294>
 800a88e:	2501      	movs	r5, #1
 800a890:	2300      	movs	r3, #0
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	9508      	str	r5, [sp, #32]
 800a896:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8a0:	2312      	movs	r3, #18
 800a8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a4:	e7cf      	b.n	800a846 <_dtoa_r+0x266>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	9308      	str	r3, [sp, #32]
 800a8aa:	e7f4      	b.n	800a896 <_dtoa_r+0x2b6>
 800a8ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a8b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8b4:	464b      	mov	r3, r9
 800a8b6:	e7c6      	b.n	800a846 <_dtoa_r+0x266>
 800a8b8:	3101      	adds	r1, #1
 800a8ba:	6041      	str	r1, [r0, #4]
 800a8bc:	0052      	lsls	r2, r2, #1
 800a8be:	e7c6      	b.n	800a84e <_dtoa_r+0x26e>
 800a8c0:	636f4361 	.word	0x636f4361
 800a8c4:	3fd287a7 	.word	0x3fd287a7
 800a8c8:	8b60c8b3 	.word	0x8b60c8b3
 800a8cc:	3fc68a28 	.word	0x3fc68a28
 800a8d0:	509f79fb 	.word	0x509f79fb
 800a8d4:	3fd34413 	.word	0x3fd34413
 800a8d8:	0800c8ba 	.word	0x0800c8ba
 800a8dc:	0800c8d1 	.word	0x0800c8d1
 800a8e0:	7ff00000 	.word	0x7ff00000
 800a8e4:	0800c8b6 	.word	0x0800c8b6
 800a8e8:	0800c8ad 	.word	0x0800c8ad
 800a8ec:	0800c865 	.word	0x0800c865
 800a8f0:	3ff80000 	.word	0x3ff80000
 800a8f4:	0800c9d0 	.word	0x0800c9d0
 800a8f8:	0800c930 	.word	0x0800c930
 800a8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8fe:	9a00      	ldr	r2, [sp, #0]
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	2b0e      	cmp	r3, #14
 800a906:	f200 80ad 	bhi.w	800aa64 <_dtoa_r+0x484>
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	f000 80aa 	beq.w	800aa64 <_dtoa_r+0x484>
 800a910:	f1ba 0f00 	cmp.w	sl, #0
 800a914:	dd36      	ble.n	800a984 <_dtoa_r+0x3a4>
 800a916:	4ac3      	ldr	r2, [pc, #780]	; (800ac24 <_dtoa_r+0x644>)
 800a918:	f00a 030f 	and.w	r3, sl, #15
 800a91c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a920:	ed93 7b00 	vldr	d7, [r3]
 800a924:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a928:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a92c:	eeb0 8a47 	vmov.f32	s16, s14
 800a930:	eef0 8a67 	vmov.f32	s17, s15
 800a934:	d016      	beq.n	800a964 <_dtoa_r+0x384>
 800a936:	4bbc      	ldr	r3, [pc, #752]	; (800ac28 <_dtoa_r+0x648>)
 800a938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a93c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a940:	f7f5 ff84 	bl	800084c <__aeabi_ddiv>
 800a944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a948:	f007 070f 	and.w	r7, r7, #15
 800a94c:	2503      	movs	r5, #3
 800a94e:	4eb6      	ldr	r6, [pc, #728]	; (800ac28 <_dtoa_r+0x648>)
 800a950:	b957      	cbnz	r7, 800a968 <_dtoa_r+0x388>
 800a952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a956:	ec53 2b18 	vmov	r2, r3, d8
 800a95a:	f7f5 ff77 	bl	800084c <__aeabi_ddiv>
 800a95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a962:	e029      	b.n	800a9b8 <_dtoa_r+0x3d8>
 800a964:	2502      	movs	r5, #2
 800a966:	e7f2      	b.n	800a94e <_dtoa_r+0x36e>
 800a968:	07f9      	lsls	r1, r7, #31
 800a96a:	d508      	bpl.n	800a97e <_dtoa_r+0x39e>
 800a96c:	ec51 0b18 	vmov	r0, r1, d8
 800a970:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a974:	f7f5 fe40 	bl	80005f8 <__aeabi_dmul>
 800a978:	ec41 0b18 	vmov	d8, r0, r1
 800a97c:	3501      	adds	r5, #1
 800a97e:	107f      	asrs	r7, r7, #1
 800a980:	3608      	adds	r6, #8
 800a982:	e7e5      	b.n	800a950 <_dtoa_r+0x370>
 800a984:	f000 80a6 	beq.w	800aad4 <_dtoa_r+0x4f4>
 800a988:	f1ca 0600 	rsb	r6, sl, #0
 800a98c:	4ba5      	ldr	r3, [pc, #660]	; (800ac24 <_dtoa_r+0x644>)
 800a98e:	4fa6      	ldr	r7, [pc, #664]	; (800ac28 <_dtoa_r+0x648>)
 800a990:	f006 020f 	and.w	r2, r6, #15
 800a994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9a0:	f7f5 fe2a 	bl	80005f8 <__aeabi_dmul>
 800a9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a8:	1136      	asrs	r6, r6, #4
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2502      	movs	r5, #2
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	f040 8085 	bne.w	800aabe <_dtoa_r+0x4de>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1d2      	bne.n	800a95e <_dtoa_r+0x37e>
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 808c 	beq.w	800aad8 <_dtoa_r+0x4f8>
 800a9c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9c4:	4b99      	ldr	r3, [pc, #612]	; (800ac2c <_dtoa_r+0x64c>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f6 f886 	bl	8000adc <__aeabi_dcmplt>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f000 8081 	beq.w	800aad8 <_dtoa_r+0x4f8>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d07d      	beq.n	800aad8 <_dtoa_r+0x4f8>
 800a9dc:	f1b9 0f00 	cmp.w	r9, #0
 800a9e0:	dd3c      	ble.n	800aa5c <_dtoa_r+0x47c>
 800a9e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4b91      	ldr	r3, [pc, #580]	; (800ac30 <_dtoa_r+0x650>)
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f7f5 fe02 	bl	80005f8 <__aeabi_dmul>
 800a9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a9fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa02:	4628      	mov	r0, r5
 800aa04:	f7f5 fd8e 	bl	8000524 <__aeabi_i2d>
 800aa08:	4632      	mov	r2, r6
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	f7f5 fdf4 	bl	80005f8 <__aeabi_dmul>
 800aa10:	4b88      	ldr	r3, [pc, #544]	; (800ac34 <_dtoa_r+0x654>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	f7f5 fc3a 	bl	800028c <__adddf3>
 800aa18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aa1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d15c      	bne.n	800aae2 <_dtoa_r+0x502>
 800aa28:	4b83      	ldr	r3, [pc, #524]	; (800ac38 <_dtoa_r+0x658>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f5 fc2a 	bl	8000288 <__aeabi_dsub>
 800aa34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa38:	4606      	mov	r6, r0
 800aa3a:	460f      	mov	r7, r1
 800aa3c:	f7f6 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f040 8296 	bne.w	800af72 <_dtoa_r+0x992>
 800aa46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa50:	4639      	mov	r1, r7
 800aa52:	f7f6 f843 	bl	8000adc <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8288 	bne.w	800af6c <_dtoa_r+0x98c>
 800aa5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f2c0 8158 	blt.w	800ad1c <_dtoa_r+0x73c>
 800aa6c:	f1ba 0f0e 	cmp.w	sl, #14
 800aa70:	f300 8154 	bgt.w	800ad1c <_dtoa_r+0x73c>
 800aa74:	4b6b      	ldr	r3, [pc, #428]	; (800ac24 <_dtoa_r+0x644>)
 800aa76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f280 80e3 	bge.w	800ac4c <_dtoa_r+0x66c>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f300 80df 	bgt.w	800ac4c <_dtoa_r+0x66c>
 800aa8e:	f040 826d 	bne.w	800af6c <_dtoa_r+0x98c>
 800aa92:	4b69      	ldr	r3, [pc, #420]	; (800ac38 <_dtoa_r+0x658>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	4640      	mov	r0, r8
 800aa98:	4649      	mov	r1, r9
 800aa9a:	f7f5 fdad 	bl	80005f8 <__aeabi_dmul>
 800aa9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaa2:	f7f6 f82f 	bl	8000b04 <__aeabi_dcmpge>
 800aaa6:	9e01      	ldr	r6, [sp, #4]
 800aaa8:	4637      	mov	r7, r6
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f040 8243 	bne.w	800af36 <_dtoa_r+0x956>
 800aab0:	9d00      	ldr	r5, [sp, #0]
 800aab2:	2331      	movs	r3, #49	; 0x31
 800aab4:	f805 3b01 	strb.w	r3, [r5], #1
 800aab8:	f10a 0a01 	add.w	sl, sl, #1
 800aabc:	e23f      	b.n	800af3e <_dtoa_r+0x95e>
 800aabe:	07f2      	lsls	r2, r6, #31
 800aac0:	d505      	bpl.n	800aace <_dtoa_r+0x4ee>
 800aac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac6:	f7f5 fd97 	bl	80005f8 <__aeabi_dmul>
 800aaca:	3501      	adds	r5, #1
 800aacc:	2301      	movs	r3, #1
 800aace:	1076      	asrs	r6, r6, #1
 800aad0:	3708      	adds	r7, #8
 800aad2:	e76c      	b.n	800a9ae <_dtoa_r+0x3ce>
 800aad4:	2502      	movs	r5, #2
 800aad6:	e76f      	b.n	800a9b8 <_dtoa_r+0x3d8>
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	f8cd a01c 	str.w	sl, [sp, #28]
 800aade:	930c      	str	r3, [sp, #48]	; 0x30
 800aae0:	e78d      	b.n	800a9fe <_dtoa_r+0x41e>
 800aae2:	9900      	ldr	r1, [sp, #0]
 800aae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aae8:	4b4e      	ldr	r3, [pc, #312]	; (800ac24 <_dtoa_r+0x644>)
 800aaea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aaee:	4401      	add	r1, r0
 800aaf0:	9102      	str	r1, [sp, #8]
 800aaf2:	9908      	ldr	r1, [sp, #32]
 800aaf4:	eeb0 8a47 	vmov.f32	s16, s14
 800aaf8:	eef0 8a67 	vmov.f32	s17, s15
 800aafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab04:	2900      	cmp	r1, #0
 800ab06:	d045      	beq.n	800ab94 <_dtoa_r+0x5b4>
 800ab08:	494c      	ldr	r1, [pc, #304]	; (800ac3c <_dtoa_r+0x65c>)
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	f7f5 fe9e 	bl	800084c <__aeabi_ddiv>
 800ab10:	ec53 2b18 	vmov	r2, r3, d8
 800ab14:	f7f5 fbb8 	bl	8000288 <__aeabi_dsub>
 800ab18:	9d00      	ldr	r5, [sp, #0]
 800ab1a:	ec41 0b18 	vmov	d8, r0, r1
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7f6 f819 	bl	8000b58 <__aeabi_d2iz>
 800ab26:	900c      	str	r0, [sp, #48]	; 0x30
 800ab28:	f7f5 fcfc 	bl	8000524 <__aeabi_i2d>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fba8 	bl	8000288 <__aeabi_dsub>
 800ab38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab3a:	3330      	adds	r3, #48	; 0x30
 800ab3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ab40:	ec53 2b18 	vmov	r2, r3, d8
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	f7f5 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d165      	bne.n	800ac1c <_dtoa_r+0x63c>
 800ab50:	4632      	mov	r2, r6
 800ab52:	463b      	mov	r3, r7
 800ab54:	4935      	ldr	r1, [pc, #212]	; (800ac2c <_dtoa_r+0x64c>)
 800ab56:	2000      	movs	r0, #0
 800ab58:	f7f5 fb96 	bl	8000288 <__aeabi_dsub>
 800ab5c:	ec53 2b18 	vmov	r2, r3, d8
 800ab60:	f7f5 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 80b9 	bne.w	800acdc <_dtoa_r+0x6fc>
 800ab6a:	9b02      	ldr	r3, [sp, #8]
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	f43f af75 	beq.w	800aa5c <_dtoa_r+0x47c>
 800ab72:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <_dtoa_r+0x650>)
 800ab74:	ec51 0b18 	vmov	r0, r1, d8
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f7f5 fd3d 	bl	80005f8 <__aeabi_dmul>
 800ab7e:	4b2c      	ldr	r3, [pc, #176]	; (800ac30 <_dtoa_r+0x650>)
 800ab80:	ec41 0b18 	vmov	d8, r0, r1
 800ab84:	2200      	movs	r2, #0
 800ab86:	4630      	mov	r0, r6
 800ab88:	4639      	mov	r1, r7
 800ab8a:	f7f5 fd35 	bl	80005f8 <__aeabi_dmul>
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460f      	mov	r7, r1
 800ab92:	e7c4      	b.n	800ab1e <_dtoa_r+0x53e>
 800ab94:	ec51 0b17 	vmov	r0, r1, d7
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	9b02      	ldr	r3, [sp, #8]
 800ab9e:	9d00      	ldr	r5, [sp, #0]
 800aba0:	930c      	str	r3, [sp, #48]	; 0x30
 800aba2:	ec41 0b18 	vmov	d8, r0, r1
 800aba6:	4639      	mov	r1, r7
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7f5 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800abae:	9011      	str	r0, [sp, #68]	; 0x44
 800abb0:	f7f5 fcb8 	bl	8000524 <__aeabi_i2d>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4630      	mov	r0, r6
 800abba:	4639      	mov	r1, r7
 800abbc:	f7f5 fb64 	bl	8000288 <__aeabi_dsub>
 800abc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abc2:	3330      	adds	r3, #48	; 0x30
 800abc4:	f805 3b01 	strb.w	r3, [r5], #1
 800abc8:	9b02      	ldr	r3, [sp, #8]
 800abca:	429d      	cmp	r5, r3
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	f04f 0200 	mov.w	r2, #0
 800abd4:	d134      	bne.n	800ac40 <_dtoa_r+0x660>
 800abd6:	4b19      	ldr	r3, [pc, #100]	; (800ac3c <_dtoa_r+0x65c>)
 800abd8:	ec51 0b18 	vmov	r0, r1, d8
 800abdc:	f7f5 fb56 	bl	800028c <__adddf3>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d175      	bne.n	800acdc <_dtoa_r+0x6fc>
 800abf0:	ec53 2b18 	vmov	r2, r3, d8
 800abf4:	4911      	ldr	r1, [pc, #68]	; (800ac3c <_dtoa_r+0x65c>)
 800abf6:	2000      	movs	r0, #0
 800abf8:	f7f5 fb46 	bl	8000288 <__aeabi_dsub>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	f43f af27 	beq.w	800aa5c <_dtoa_r+0x47c>
 800ac0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac10:	1e6b      	subs	r3, r5, #1
 800ac12:	930c      	str	r3, [sp, #48]	; 0x30
 800ac14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac18:	2b30      	cmp	r3, #48	; 0x30
 800ac1a:	d0f8      	beq.n	800ac0e <_dtoa_r+0x62e>
 800ac1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac20:	e04a      	b.n	800acb8 <_dtoa_r+0x6d8>
 800ac22:	bf00      	nop
 800ac24:	0800c9d0 	.word	0x0800c9d0
 800ac28:	0800c9a8 	.word	0x0800c9a8
 800ac2c:	3ff00000 	.word	0x3ff00000
 800ac30:	40240000 	.word	0x40240000
 800ac34:	401c0000 	.word	0x401c0000
 800ac38:	40140000 	.word	0x40140000
 800ac3c:	3fe00000 	.word	0x3fe00000
 800ac40:	4baf      	ldr	r3, [pc, #700]	; (800af00 <_dtoa_r+0x920>)
 800ac42:	f7f5 fcd9 	bl	80005f8 <__aeabi_dmul>
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	e7ac      	b.n	800aba6 <_dtoa_r+0x5c6>
 800ac4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac50:	9d00      	ldr	r5, [sp, #0]
 800ac52:	4642      	mov	r2, r8
 800ac54:	464b      	mov	r3, r9
 800ac56:	4630      	mov	r0, r6
 800ac58:	4639      	mov	r1, r7
 800ac5a:	f7f5 fdf7 	bl	800084c <__aeabi_ddiv>
 800ac5e:	f7f5 ff7b 	bl	8000b58 <__aeabi_d2iz>
 800ac62:	9002      	str	r0, [sp, #8]
 800ac64:	f7f5 fc5e 	bl	8000524 <__aeabi_i2d>
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4630      	mov	r0, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 fb06 	bl	8000288 <__aeabi_dsub>
 800ac7c:	9e02      	ldr	r6, [sp, #8]
 800ac7e:	9f01      	ldr	r7, [sp, #4]
 800ac80:	3630      	adds	r6, #48	; 0x30
 800ac82:	f805 6b01 	strb.w	r6, [r5], #1
 800ac86:	9e00      	ldr	r6, [sp, #0]
 800ac88:	1bae      	subs	r6, r5, r6
 800ac8a:	42b7      	cmp	r7, r6
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	d137      	bne.n	800ad02 <_dtoa_r+0x722>
 800ac92:	f7f5 fafb 	bl	800028c <__adddf3>
 800ac96:	4642      	mov	r2, r8
 800ac98:	464b      	mov	r3, r9
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f7f5 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800aca2:	b9c8      	cbnz	r0, 800acd8 <_dtoa_r+0x6f8>
 800aca4:	4642      	mov	r2, r8
 800aca6:	464b      	mov	r3, r9
 800aca8:	4630      	mov	r0, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb0:	b110      	cbz	r0, 800acb8 <_dtoa_r+0x6d8>
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	07d9      	lsls	r1, r3, #31
 800acb6:	d40f      	bmi.n	800acd8 <_dtoa_r+0x6f8>
 800acb8:	4620      	mov	r0, r4
 800acba:	4659      	mov	r1, fp
 800acbc:	f000 facc 	bl	800b258 <_Bfree>
 800acc0:	2300      	movs	r3, #0
 800acc2:	702b      	strb	r3, [r5, #0]
 800acc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acc6:	f10a 0001 	add.w	r0, sl, #1
 800acca:	6018      	str	r0, [r3, #0]
 800accc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f43f acd8 	beq.w	800a684 <_dtoa_r+0xa4>
 800acd4:	601d      	str	r5, [r3, #0]
 800acd6:	e4d5      	b.n	800a684 <_dtoa_r+0xa4>
 800acd8:	f8cd a01c 	str.w	sl, [sp, #28]
 800acdc:	462b      	mov	r3, r5
 800acde:	461d      	mov	r5, r3
 800ace0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ace4:	2a39      	cmp	r2, #57	; 0x39
 800ace6:	d108      	bne.n	800acfa <_dtoa_r+0x71a>
 800ace8:	9a00      	ldr	r2, [sp, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d1f7      	bne.n	800acde <_dtoa_r+0x6fe>
 800acee:	9a07      	ldr	r2, [sp, #28]
 800acf0:	9900      	ldr	r1, [sp, #0]
 800acf2:	3201      	adds	r2, #1
 800acf4:	9207      	str	r2, [sp, #28]
 800acf6:	2230      	movs	r2, #48	; 0x30
 800acf8:	700a      	strb	r2, [r1, #0]
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	3201      	adds	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	e78c      	b.n	800ac1c <_dtoa_r+0x63c>
 800ad02:	4b7f      	ldr	r3, [pc, #508]	; (800af00 <_dtoa_r+0x920>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460f      	mov	r7, r1
 800ad12:	f7f5 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d09b      	beq.n	800ac52 <_dtoa_r+0x672>
 800ad1a:	e7cd      	b.n	800acb8 <_dtoa_r+0x6d8>
 800ad1c:	9a08      	ldr	r2, [sp, #32]
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	f000 80c4 	beq.w	800aeac <_dtoa_r+0x8cc>
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	2a01      	cmp	r2, #1
 800ad28:	f300 80a8 	bgt.w	800ae7c <_dtoa_r+0x89c>
 800ad2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	f000 80a0 	beq.w	800ae74 <_dtoa_r+0x894>
 800ad34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad38:	9e06      	ldr	r6, [sp, #24]
 800ad3a:	4645      	mov	r5, r8
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	2101      	movs	r1, #1
 800ad40:	441a      	add	r2, r3
 800ad42:	4620      	mov	r0, r4
 800ad44:	4498      	add	r8, r3
 800ad46:	9204      	str	r2, [sp, #16]
 800ad48:	f000 fb42 	bl	800b3d0 <__i2b>
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	2d00      	cmp	r5, #0
 800ad50:	dd0b      	ble.n	800ad6a <_dtoa_r+0x78a>
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd08      	ble.n	800ad6a <_dtoa_r+0x78a>
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	9a04      	ldr	r2, [sp, #16]
 800ad5c:	bfa8      	it	ge
 800ad5e:	462b      	movge	r3, r5
 800ad60:	eba8 0803 	sub.w	r8, r8, r3
 800ad64:	1aed      	subs	r5, r5, r3
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	9b06      	ldr	r3, [sp, #24]
 800ad6c:	b1fb      	cbz	r3, 800adae <_dtoa_r+0x7ce>
 800ad6e:	9b08      	ldr	r3, [sp, #32]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 809f 	beq.w	800aeb4 <_dtoa_r+0x8d4>
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	dd11      	ble.n	800ad9e <_dtoa_r+0x7be>
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fbe2 	bl	800b548 <__pow5mult>
 800ad84:	465a      	mov	r2, fp
 800ad86:	4601      	mov	r1, r0
 800ad88:	4607      	mov	r7, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fb36 	bl	800b3fc <__multiply>
 800ad90:	4659      	mov	r1, fp
 800ad92:	9007      	str	r0, [sp, #28]
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fa5f 	bl	800b258 <_Bfree>
 800ad9a:	9b07      	ldr	r3, [sp, #28]
 800ad9c:	469b      	mov	fp, r3
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	1b9a      	subs	r2, r3, r6
 800ada2:	d004      	beq.n	800adae <_dtoa_r+0x7ce>
 800ada4:	4659      	mov	r1, fp
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fbce 	bl	800b548 <__pow5mult>
 800adac:	4683      	mov	fp, r0
 800adae:	2101      	movs	r1, #1
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fb0d 	bl	800b3d0 <__i2b>
 800adb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adb8:	2b00      	cmp	r3, #0
 800adba:	4606      	mov	r6, r0
 800adbc:	dd7c      	ble.n	800aeb8 <_dtoa_r+0x8d8>
 800adbe:	461a      	mov	r2, r3
 800adc0:	4601      	mov	r1, r0
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fbc0 	bl	800b548 <__pow5mult>
 800adc8:	9b05      	ldr	r3, [sp, #20]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	4606      	mov	r6, r0
 800adce:	dd76      	ble.n	800aebe <_dtoa_r+0x8de>
 800add0:	2300      	movs	r3, #0
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	6933      	ldr	r3, [r6, #16]
 800add6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adda:	6918      	ldr	r0, [r3, #16]
 800addc:	f000 faa8 	bl	800b330 <__hi0bits>
 800ade0:	f1c0 0020 	rsb	r0, r0, #32
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	4418      	add	r0, r3
 800ade8:	f010 001f 	ands.w	r0, r0, #31
 800adec:	f000 8086 	beq.w	800aefc <_dtoa_r+0x91c>
 800adf0:	f1c0 0320 	rsb	r3, r0, #32
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	dd7f      	ble.n	800aef8 <_dtoa_r+0x918>
 800adf8:	f1c0 001c 	rsb	r0, r0, #28
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	4403      	add	r3, r0
 800ae00:	4480      	add	r8, r0
 800ae02:	4405      	add	r5, r0
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	f1b8 0f00 	cmp.w	r8, #0
 800ae0a:	dd05      	ble.n	800ae18 <_dtoa_r+0x838>
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	4642      	mov	r2, r8
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fbf3 	bl	800b5fc <__lshift>
 800ae16:	4683      	mov	fp, r0
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dd05      	ble.n	800ae2a <_dtoa_r+0x84a>
 800ae1e:	4631      	mov	r1, r6
 800ae20:	461a      	mov	r2, r3
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fbea 	bl	800b5fc <__lshift>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d069      	beq.n	800af04 <_dtoa_r+0x924>
 800ae30:	4631      	mov	r1, r6
 800ae32:	4658      	mov	r0, fp
 800ae34:	f000 fc4e 	bl	800b6d4 <__mcmp>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	da63      	bge.n	800af04 <_dtoa_r+0x924>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4659      	mov	r1, fp
 800ae40:	220a      	movs	r2, #10
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 fa2a 	bl	800b29c <__multadd>
 800ae48:	9b08      	ldr	r3, [sp, #32]
 800ae4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ae4e:	4683      	mov	fp, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 818f 	beq.w	800b174 <_dtoa_r+0xb94>
 800ae56:	4639      	mov	r1, r7
 800ae58:	2300      	movs	r3, #0
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 fa1d 	bl	800b29c <__multadd>
 800ae62:	f1b9 0f00 	cmp.w	r9, #0
 800ae66:	4607      	mov	r7, r0
 800ae68:	f300 808e 	bgt.w	800af88 <_dtoa_r+0x9a8>
 800ae6c:	9b05      	ldr	r3, [sp, #20]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	dc50      	bgt.n	800af14 <_dtoa_r+0x934>
 800ae72:	e089      	b.n	800af88 <_dtoa_r+0x9a8>
 800ae74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae7a:	e75d      	b.n	800ad38 <_dtoa_r+0x758>
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	1e5e      	subs	r6, r3, #1
 800ae80:	9b06      	ldr	r3, [sp, #24]
 800ae82:	42b3      	cmp	r3, r6
 800ae84:	bfbf      	itttt	lt
 800ae86:	9b06      	ldrlt	r3, [sp, #24]
 800ae88:	9606      	strlt	r6, [sp, #24]
 800ae8a:	1af2      	sublt	r2, r6, r3
 800ae8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ae8e:	bfb6      	itet	lt
 800ae90:	189b      	addlt	r3, r3, r2
 800ae92:	1b9e      	subge	r6, r3, r6
 800ae94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	bfb8      	it	lt
 800ae9a:	2600      	movlt	r6, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb5      	itete	lt
 800aea0:	eba8 0503 	sublt.w	r5, r8, r3
 800aea4:	9b01      	ldrge	r3, [sp, #4]
 800aea6:	2300      	movlt	r3, #0
 800aea8:	4645      	movge	r5, r8
 800aeaa:	e747      	b.n	800ad3c <_dtoa_r+0x75c>
 800aeac:	9e06      	ldr	r6, [sp, #24]
 800aeae:	9f08      	ldr	r7, [sp, #32]
 800aeb0:	4645      	mov	r5, r8
 800aeb2:	e74c      	b.n	800ad4e <_dtoa_r+0x76e>
 800aeb4:	9a06      	ldr	r2, [sp, #24]
 800aeb6:	e775      	b.n	800ada4 <_dtoa_r+0x7c4>
 800aeb8:	9b05      	ldr	r3, [sp, #20]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	dc18      	bgt.n	800aef0 <_dtoa_r+0x910>
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	b9b3      	cbnz	r3, 800aef0 <_dtoa_r+0x910>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aec8:	b9a3      	cbnz	r3, 800aef4 <_dtoa_r+0x914>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aed0:	0d1b      	lsrs	r3, r3, #20
 800aed2:	051b      	lsls	r3, r3, #20
 800aed4:	b12b      	cbz	r3, 800aee2 <_dtoa_r+0x902>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	3301      	adds	r3, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	f108 0801 	add.w	r8, r8, #1
 800aee0:	2301      	movs	r3, #1
 800aee2:	9306      	str	r3, [sp, #24]
 800aee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f47f af74 	bne.w	800add4 <_dtoa_r+0x7f4>
 800aeec:	2001      	movs	r0, #1
 800aeee:	e779      	b.n	800ade4 <_dtoa_r+0x804>
 800aef0:	2300      	movs	r3, #0
 800aef2:	e7f6      	b.n	800aee2 <_dtoa_r+0x902>
 800aef4:	9b02      	ldr	r3, [sp, #8]
 800aef6:	e7f4      	b.n	800aee2 <_dtoa_r+0x902>
 800aef8:	d085      	beq.n	800ae06 <_dtoa_r+0x826>
 800aefa:	4618      	mov	r0, r3
 800aefc:	301c      	adds	r0, #28
 800aefe:	e77d      	b.n	800adfc <_dtoa_r+0x81c>
 800af00:	40240000 	.word	0x40240000
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dc38      	bgt.n	800af7c <_dtoa_r+0x99c>
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	dd35      	ble.n	800af7c <_dtoa_r+0x99c>
 800af10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af14:	f1b9 0f00 	cmp.w	r9, #0
 800af18:	d10d      	bne.n	800af36 <_dtoa_r+0x956>
 800af1a:	4631      	mov	r1, r6
 800af1c:	464b      	mov	r3, r9
 800af1e:	2205      	movs	r2, #5
 800af20:	4620      	mov	r0, r4
 800af22:	f000 f9bb 	bl	800b29c <__multadd>
 800af26:	4601      	mov	r1, r0
 800af28:	4606      	mov	r6, r0
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fbd2 	bl	800b6d4 <__mcmp>
 800af30:	2800      	cmp	r0, #0
 800af32:	f73f adbd 	bgt.w	800aab0 <_dtoa_r+0x4d0>
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	9d00      	ldr	r5, [sp, #0]
 800af3a:	ea6f 0a03 	mvn.w	sl, r3
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	4631      	mov	r1, r6
 800af44:	4620      	mov	r0, r4
 800af46:	f000 f987 	bl	800b258 <_Bfree>
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	f43f aeb4 	beq.w	800acb8 <_dtoa_r+0x6d8>
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	d005      	beq.n	800af62 <_dtoa_r+0x982>
 800af56:	45b8      	cmp	r8, r7
 800af58:	d003      	beq.n	800af62 <_dtoa_r+0x982>
 800af5a:	4641      	mov	r1, r8
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f97b 	bl	800b258 <_Bfree>
 800af62:	4639      	mov	r1, r7
 800af64:	4620      	mov	r0, r4
 800af66:	f000 f977 	bl	800b258 <_Bfree>
 800af6a:	e6a5      	b.n	800acb8 <_dtoa_r+0x6d8>
 800af6c:	2600      	movs	r6, #0
 800af6e:	4637      	mov	r7, r6
 800af70:	e7e1      	b.n	800af36 <_dtoa_r+0x956>
 800af72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af78:	4637      	mov	r7, r6
 800af7a:	e599      	b.n	800aab0 <_dtoa_r+0x4d0>
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 80fd 	beq.w	800b182 <_dtoa_r+0xba2>
 800af88:	2d00      	cmp	r5, #0
 800af8a:	dd05      	ble.n	800af98 <_dtoa_r+0x9b8>
 800af8c:	4639      	mov	r1, r7
 800af8e:	462a      	mov	r2, r5
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fb33 	bl	800b5fc <__lshift>
 800af96:	4607      	mov	r7, r0
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d05c      	beq.n	800b058 <_dtoa_r+0xa78>
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 f919 	bl	800b1d8 <_Balloc>
 800afa6:	4605      	mov	r5, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <_dtoa_r+0x9d6>
 800afaa:	4b80      	ldr	r3, [pc, #512]	; (800b1ac <_dtoa_r+0xbcc>)
 800afac:	4602      	mov	r2, r0
 800afae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afb2:	f7ff bb2e 	b.w	800a612 <_dtoa_r+0x32>
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	f107 010c 	add.w	r1, r7, #12
 800afc0:	300c      	adds	r0, #12
 800afc2:	f7fe fc85 	bl	80098d0 <memcpy>
 800afc6:	2201      	movs	r2, #1
 800afc8:	4629      	mov	r1, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fb16 	bl	800b5fc <__lshift>
 800afd0:	9b00      	ldr	r3, [sp, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	9b00      	ldr	r3, [sp, #0]
 800afd8:	444b      	add	r3, r9
 800afda:	9307      	str	r3, [sp, #28]
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	46b8      	mov	r8, r7
 800afe4:	9306      	str	r3, [sp, #24]
 800afe6:	4607      	mov	r7, r0
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	4631      	mov	r1, r6
 800afec:	3b01      	subs	r3, #1
 800afee:	4658      	mov	r0, fp
 800aff0:	9302      	str	r3, [sp, #8]
 800aff2:	f7ff fa67 	bl	800a4c4 <quorem>
 800aff6:	4603      	mov	r3, r0
 800aff8:	3330      	adds	r3, #48	; 0x30
 800affa:	9004      	str	r0, [sp, #16]
 800affc:	4641      	mov	r1, r8
 800affe:	4658      	mov	r0, fp
 800b000:	9308      	str	r3, [sp, #32]
 800b002:	f000 fb67 	bl	800b6d4 <__mcmp>
 800b006:	463a      	mov	r2, r7
 800b008:	4681      	mov	r9, r0
 800b00a:	4631      	mov	r1, r6
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fb7d 	bl	800b70c <__mdiff>
 800b012:	68c2      	ldr	r2, [r0, #12]
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	4605      	mov	r5, r0
 800b018:	bb02      	cbnz	r2, 800b05c <_dtoa_r+0xa7c>
 800b01a:	4601      	mov	r1, r0
 800b01c:	4658      	mov	r0, fp
 800b01e:	f000 fb59 	bl	800b6d4 <__mcmp>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	4602      	mov	r2, r0
 800b026:	4629      	mov	r1, r5
 800b028:	4620      	mov	r0, r4
 800b02a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b02e:	f000 f913 	bl	800b258 <_Bfree>
 800b032:	9b05      	ldr	r3, [sp, #20]
 800b034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b036:	9d01      	ldr	r5, [sp, #4]
 800b038:	ea43 0102 	orr.w	r1, r3, r2
 800b03c:	9b06      	ldr	r3, [sp, #24]
 800b03e:	430b      	orrs	r3, r1
 800b040:	9b08      	ldr	r3, [sp, #32]
 800b042:	d10d      	bne.n	800b060 <_dtoa_r+0xa80>
 800b044:	2b39      	cmp	r3, #57	; 0x39
 800b046:	d029      	beq.n	800b09c <_dtoa_r+0xabc>
 800b048:	f1b9 0f00 	cmp.w	r9, #0
 800b04c:	dd01      	ble.n	800b052 <_dtoa_r+0xa72>
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	3331      	adds	r3, #49	; 0x31
 800b052:	9a02      	ldr	r2, [sp, #8]
 800b054:	7013      	strb	r3, [r2, #0]
 800b056:	e774      	b.n	800af42 <_dtoa_r+0x962>
 800b058:	4638      	mov	r0, r7
 800b05a:	e7b9      	b.n	800afd0 <_dtoa_r+0x9f0>
 800b05c:	2201      	movs	r2, #1
 800b05e:	e7e2      	b.n	800b026 <_dtoa_r+0xa46>
 800b060:	f1b9 0f00 	cmp.w	r9, #0
 800b064:	db06      	blt.n	800b074 <_dtoa_r+0xa94>
 800b066:	9905      	ldr	r1, [sp, #20]
 800b068:	ea41 0909 	orr.w	r9, r1, r9
 800b06c:	9906      	ldr	r1, [sp, #24]
 800b06e:	ea59 0101 	orrs.w	r1, r9, r1
 800b072:	d120      	bne.n	800b0b6 <_dtoa_r+0xad6>
 800b074:	2a00      	cmp	r2, #0
 800b076:	ddec      	ble.n	800b052 <_dtoa_r+0xa72>
 800b078:	4659      	mov	r1, fp
 800b07a:	2201      	movs	r2, #1
 800b07c:	4620      	mov	r0, r4
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	f000 fabc 	bl	800b5fc <__lshift>
 800b084:	4631      	mov	r1, r6
 800b086:	4683      	mov	fp, r0
 800b088:	f000 fb24 	bl	800b6d4 <__mcmp>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	dc02      	bgt.n	800b098 <_dtoa_r+0xab8>
 800b092:	d1de      	bne.n	800b052 <_dtoa_r+0xa72>
 800b094:	07da      	lsls	r2, r3, #31
 800b096:	d5dc      	bpl.n	800b052 <_dtoa_r+0xa72>
 800b098:	2b39      	cmp	r3, #57	; 0x39
 800b09a:	d1d8      	bne.n	800b04e <_dtoa_r+0xa6e>
 800b09c:	9a02      	ldr	r2, [sp, #8]
 800b09e:	2339      	movs	r3, #57	; 0x39
 800b0a0:	7013      	strb	r3, [r2, #0]
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	461d      	mov	r5, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0ac:	2a39      	cmp	r2, #57	; 0x39
 800b0ae:	d050      	beq.n	800b152 <_dtoa_r+0xb72>
 800b0b0:	3201      	adds	r2, #1
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	e745      	b.n	800af42 <_dtoa_r+0x962>
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	dd03      	ble.n	800b0c2 <_dtoa_r+0xae2>
 800b0ba:	2b39      	cmp	r3, #57	; 0x39
 800b0bc:	d0ee      	beq.n	800b09c <_dtoa_r+0xabc>
 800b0be:	3301      	adds	r3, #1
 800b0c0:	e7c7      	b.n	800b052 <_dtoa_r+0xa72>
 800b0c2:	9a01      	ldr	r2, [sp, #4]
 800b0c4:	9907      	ldr	r1, [sp, #28]
 800b0c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b0ca:	428a      	cmp	r2, r1
 800b0cc:	d02a      	beq.n	800b124 <_dtoa_r+0xb44>
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	220a      	movs	r2, #10
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 f8e1 	bl	800b29c <__multadd>
 800b0da:	45b8      	cmp	r8, r7
 800b0dc:	4683      	mov	fp, r0
 800b0de:	f04f 0300 	mov.w	r3, #0
 800b0e2:	f04f 020a 	mov.w	r2, #10
 800b0e6:	4641      	mov	r1, r8
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	d107      	bne.n	800b0fc <_dtoa_r+0xb1c>
 800b0ec:	f000 f8d6 	bl	800b29c <__multadd>
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4607      	mov	r7, r0
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	e775      	b.n	800afe8 <_dtoa_r+0xa08>
 800b0fc:	f000 f8ce 	bl	800b29c <__multadd>
 800b100:	4639      	mov	r1, r7
 800b102:	4680      	mov	r8, r0
 800b104:	2300      	movs	r3, #0
 800b106:	220a      	movs	r2, #10
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 f8c7 	bl	800b29c <__multadd>
 800b10e:	4607      	mov	r7, r0
 800b110:	e7f0      	b.n	800b0f4 <_dtoa_r+0xb14>
 800b112:	f1b9 0f00 	cmp.w	r9, #0
 800b116:	9a00      	ldr	r2, [sp, #0]
 800b118:	bfcc      	ite	gt
 800b11a:	464d      	movgt	r5, r9
 800b11c:	2501      	movle	r5, #1
 800b11e:	4415      	add	r5, r2
 800b120:	f04f 0800 	mov.w	r8, #0
 800b124:	4659      	mov	r1, fp
 800b126:	2201      	movs	r2, #1
 800b128:	4620      	mov	r0, r4
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	f000 fa66 	bl	800b5fc <__lshift>
 800b130:	4631      	mov	r1, r6
 800b132:	4683      	mov	fp, r0
 800b134:	f000 face 	bl	800b6d4 <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dcb2      	bgt.n	800b0a2 <_dtoa_r+0xac2>
 800b13c:	d102      	bne.n	800b144 <_dtoa_r+0xb64>
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	07db      	lsls	r3, r3, #31
 800b142:	d4ae      	bmi.n	800b0a2 <_dtoa_r+0xac2>
 800b144:	462b      	mov	r3, r5
 800b146:	461d      	mov	r5, r3
 800b148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b14c:	2a30      	cmp	r2, #48	; 0x30
 800b14e:	d0fa      	beq.n	800b146 <_dtoa_r+0xb66>
 800b150:	e6f7      	b.n	800af42 <_dtoa_r+0x962>
 800b152:	9a00      	ldr	r2, [sp, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d1a5      	bne.n	800b0a4 <_dtoa_r+0xac4>
 800b158:	f10a 0a01 	add.w	sl, sl, #1
 800b15c:	2331      	movs	r3, #49	; 0x31
 800b15e:	e779      	b.n	800b054 <_dtoa_r+0xa74>
 800b160:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <_dtoa_r+0xbd0>)
 800b162:	f7ff baaf 	b.w	800a6c4 <_dtoa_r+0xe4>
 800b166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f47f aa86 	bne.w	800a67a <_dtoa_r+0x9a>
 800b16e:	4b11      	ldr	r3, [pc, #68]	; (800b1b4 <_dtoa_r+0xbd4>)
 800b170:	f7ff baa8 	b.w	800a6c4 <_dtoa_r+0xe4>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	dc03      	bgt.n	800b182 <_dtoa_r+0xba2>
 800b17a:	9b05      	ldr	r3, [sp, #20]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	f73f aec9 	bgt.w	800af14 <_dtoa_r+0x934>
 800b182:	9d00      	ldr	r5, [sp, #0]
 800b184:	4631      	mov	r1, r6
 800b186:	4658      	mov	r0, fp
 800b188:	f7ff f99c 	bl	800a4c4 <quorem>
 800b18c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b190:	f805 3b01 	strb.w	r3, [r5], #1
 800b194:	9a00      	ldr	r2, [sp, #0]
 800b196:	1aaa      	subs	r2, r5, r2
 800b198:	4591      	cmp	r9, r2
 800b19a:	ddba      	ble.n	800b112 <_dtoa_r+0xb32>
 800b19c:	4659      	mov	r1, fp
 800b19e:	2300      	movs	r3, #0
 800b1a0:	220a      	movs	r2, #10
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 f87a 	bl	800b29c <__multadd>
 800b1a8:	4683      	mov	fp, r0
 800b1aa:	e7eb      	b.n	800b184 <_dtoa_r+0xba4>
 800b1ac:	0800c930 	.word	0x0800c930
 800b1b0:	0800c864 	.word	0x0800c864
 800b1b4:	0800c8ad 	.word	0x0800c8ad

0800b1b8 <_localeconv_r>:
 800b1b8:	4800      	ldr	r0, [pc, #0]	; (800b1bc <_localeconv_r+0x4>)
 800b1ba:	4770      	bx	lr
 800b1bc:	2000016c 	.word	0x2000016c

0800b1c0 <__malloc_lock>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__malloc_lock+0x8>)
 800b1c2:	f000 bd22 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	200005e8 	.word	0x200005e8

0800b1cc <__malloc_unlock>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__malloc_unlock+0x8>)
 800b1ce:	f000 bd1d 	b.w	800bc0c <__retarget_lock_release_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	200005e8 	.word	0x200005e8

0800b1d8 <_Balloc>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	b976      	cbnz	r6, 800b200 <_Balloc+0x28>
 800b1e2:	2010      	movs	r0, #16
 800b1e4:	f7fe fb64 	bl	80098b0 <malloc>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	6260      	str	r0, [r4, #36]	; 0x24
 800b1ec:	b920      	cbnz	r0, 800b1f8 <_Balloc+0x20>
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <_Balloc+0x78>)
 800b1f0:	4818      	ldr	r0, [pc, #96]	; (800b254 <_Balloc+0x7c>)
 800b1f2:	2166      	movs	r1, #102	; 0x66
 800b1f4:	f000 fcd8 	bl	800bba8 <__assert_func>
 800b1f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1fc:	6006      	str	r6, [r0, #0]
 800b1fe:	60c6      	str	r6, [r0, #12]
 800b200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b202:	68f3      	ldr	r3, [r6, #12]
 800b204:	b183      	cbz	r3, 800b228 <_Balloc+0x50>
 800b206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b20e:	b9b8      	cbnz	r0, 800b240 <_Balloc+0x68>
 800b210:	2101      	movs	r1, #1
 800b212:	fa01 f605 	lsl.w	r6, r1, r5
 800b216:	1d72      	adds	r2, r6, #5
 800b218:	0092      	lsls	r2, r2, #2
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fb5a 	bl	800b8d4 <_calloc_r>
 800b220:	b160      	cbz	r0, 800b23c <_Balloc+0x64>
 800b222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b226:	e00e      	b.n	800b246 <_Balloc+0x6e>
 800b228:	2221      	movs	r2, #33	; 0x21
 800b22a:	2104      	movs	r1, #4
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fb51 	bl	800b8d4 <_calloc_r>
 800b232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b234:	60f0      	str	r0, [r6, #12]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e4      	bne.n	800b206 <_Balloc+0x2e>
 800b23c:	2000      	movs	r0, #0
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	6802      	ldr	r2, [r0, #0]
 800b242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b246:	2300      	movs	r3, #0
 800b248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b24c:	e7f7      	b.n	800b23e <_Balloc+0x66>
 800b24e:	bf00      	nop
 800b250:	0800c8ba 	.word	0x0800c8ba
 800b254:	0800c941 	.word	0x0800c941

0800b258 <_Bfree>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b25c:	4605      	mov	r5, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b976      	cbnz	r6, 800b280 <_Bfree+0x28>
 800b262:	2010      	movs	r0, #16
 800b264:	f7fe fb24 	bl	80098b0 <malloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	6268      	str	r0, [r5, #36]	; 0x24
 800b26c:	b920      	cbnz	r0, 800b278 <_Bfree+0x20>
 800b26e:	4b09      	ldr	r3, [pc, #36]	; (800b294 <_Bfree+0x3c>)
 800b270:	4809      	ldr	r0, [pc, #36]	; (800b298 <_Bfree+0x40>)
 800b272:	218a      	movs	r1, #138	; 0x8a
 800b274:	f000 fc98 	bl	800bba8 <__assert_func>
 800b278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b27c:	6006      	str	r6, [r0, #0]
 800b27e:	60c6      	str	r6, [r0, #12]
 800b280:	b13c      	cbz	r4, 800b292 <_Bfree+0x3a>
 800b282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b284:	6862      	ldr	r2, [r4, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b28c:	6021      	str	r1, [r4, #0]
 800b28e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	0800c8ba 	.word	0x0800c8ba
 800b298:	0800c941 	.word	0x0800c941

0800b29c <__multadd>:
 800b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a0:	690e      	ldr	r6, [r1, #16]
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	4698      	mov	r8, r3
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	f101 0014 	add.w	r0, r1, #20
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6805      	ldr	r5, [r0, #0]
 800b2b0:	b2a9      	uxth	r1, r5
 800b2b2:	fb02 8101 	mla	r1, r2, r1, r8
 800b2b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b2ba:	0c2d      	lsrs	r5, r5, #16
 800b2bc:	fb02 c505 	mla	r5, r2, r5, ip
 800b2c0:	b289      	uxth	r1, r1
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b2c8:	429e      	cmp	r6, r3
 800b2ca:	f840 1b04 	str.w	r1, [r0], #4
 800b2ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b2d2:	dcec      	bgt.n	800b2ae <__multadd+0x12>
 800b2d4:	f1b8 0f00 	cmp.w	r8, #0
 800b2d8:	d022      	beq.n	800b320 <__multadd+0x84>
 800b2da:	68a3      	ldr	r3, [r4, #8]
 800b2dc:	42b3      	cmp	r3, r6
 800b2de:	dc19      	bgt.n	800b314 <__multadd+0x78>
 800b2e0:	6861      	ldr	r1, [r4, #4]
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	3101      	adds	r1, #1
 800b2e6:	f7ff ff77 	bl	800b1d8 <_Balloc>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b928      	cbnz	r0, 800b2fa <__multadd+0x5e>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4b0d      	ldr	r3, [pc, #52]	; (800b328 <__multadd+0x8c>)
 800b2f2:	480e      	ldr	r0, [pc, #56]	; (800b32c <__multadd+0x90>)
 800b2f4:	21b5      	movs	r1, #181	; 0xb5
 800b2f6:	f000 fc57 	bl	800bba8 <__assert_func>
 800b2fa:	6922      	ldr	r2, [r4, #16]
 800b2fc:	3202      	adds	r2, #2
 800b2fe:	f104 010c 	add.w	r1, r4, #12
 800b302:	0092      	lsls	r2, r2, #2
 800b304:	300c      	adds	r0, #12
 800b306:	f7fe fae3 	bl	80098d0 <memcpy>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4638      	mov	r0, r7
 800b30e:	f7ff ffa3 	bl	800b258 <_Bfree>
 800b312:	462c      	mov	r4, r5
 800b314:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b318:	3601      	adds	r6, #1
 800b31a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b31e:	6126      	str	r6, [r4, #16]
 800b320:	4620      	mov	r0, r4
 800b322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b326:	bf00      	nop
 800b328:	0800c930 	.word	0x0800c930
 800b32c:	0800c941 	.word	0x0800c941

0800b330 <__hi0bits>:
 800b330:	0c03      	lsrs	r3, r0, #16
 800b332:	041b      	lsls	r3, r3, #16
 800b334:	b9d3      	cbnz	r3, 800b36c <__hi0bits+0x3c>
 800b336:	0400      	lsls	r0, r0, #16
 800b338:	2310      	movs	r3, #16
 800b33a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b33e:	bf04      	itt	eq
 800b340:	0200      	lsleq	r0, r0, #8
 800b342:	3308      	addeq	r3, #8
 800b344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b348:	bf04      	itt	eq
 800b34a:	0100      	lsleq	r0, r0, #4
 800b34c:	3304      	addeq	r3, #4
 800b34e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b352:	bf04      	itt	eq
 800b354:	0080      	lsleq	r0, r0, #2
 800b356:	3302      	addeq	r3, #2
 800b358:	2800      	cmp	r0, #0
 800b35a:	db05      	blt.n	800b368 <__hi0bits+0x38>
 800b35c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b360:	f103 0301 	add.w	r3, r3, #1
 800b364:	bf08      	it	eq
 800b366:	2320      	moveq	r3, #32
 800b368:	4618      	mov	r0, r3
 800b36a:	4770      	bx	lr
 800b36c:	2300      	movs	r3, #0
 800b36e:	e7e4      	b.n	800b33a <__hi0bits+0xa>

0800b370 <__lo0bits>:
 800b370:	6803      	ldr	r3, [r0, #0]
 800b372:	f013 0207 	ands.w	r2, r3, #7
 800b376:	4601      	mov	r1, r0
 800b378:	d00b      	beq.n	800b392 <__lo0bits+0x22>
 800b37a:	07da      	lsls	r2, r3, #31
 800b37c:	d424      	bmi.n	800b3c8 <__lo0bits+0x58>
 800b37e:	0798      	lsls	r0, r3, #30
 800b380:	bf49      	itett	mi
 800b382:	085b      	lsrmi	r3, r3, #1
 800b384:	089b      	lsrpl	r3, r3, #2
 800b386:	2001      	movmi	r0, #1
 800b388:	600b      	strmi	r3, [r1, #0]
 800b38a:	bf5c      	itt	pl
 800b38c:	600b      	strpl	r3, [r1, #0]
 800b38e:	2002      	movpl	r0, #2
 800b390:	4770      	bx	lr
 800b392:	b298      	uxth	r0, r3
 800b394:	b9b0      	cbnz	r0, 800b3c4 <__lo0bits+0x54>
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	2010      	movs	r0, #16
 800b39a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b39e:	bf04      	itt	eq
 800b3a0:	0a1b      	lsreq	r3, r3, #8
 800b3a2:	3008      	addeq	r0, #8
 800b3a4:	071a      	lsls	r2, r3, #28
 800b3a6:	bf04      	itt	eq
 800b3a8:	091b      	lsreq	r3, r3, #4
 800b3aa:	3004      	addeq	r0, #4
 800b3ac:	079a      	lsls	r2, r3, #30
 800b3ae:	bf04      	itt	eq
 800b3b0:	089b      	lsreq	r3, r3, #2
 800b3b2:	3002      	addeq	r0, #2
 800b3b4:	07da      	lsls	r2, r3, #31
 800b3b6:	d403      	bmi.n	800b3c0 <__lo0bits+0x50>
 800b3b8:	085b      	lsrs	r3, r3, #1
 800b3ba:	f100 0001 	add.w	r0, r0, #1
 800b3be:	d005      	beq.n	800b3cc <__lo0bits+0x5c>
 800b3c0:	600b      	str	r3, [r1, #0]
 800b3c2:	4770      	bx	lr
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	e7e8      	b.n	800b39a <__lo0bits+0x2a>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	4770      	bx	lr
 800b3cc:	2020      	movs	r0, #32
 800b3ce:	4770      	bx	lr

0800b3d0 <__i2b>:
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	f7ff feff 	bl	800b1d8 <_Balloc>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	b928      	cbnz	r0, 800b3ea <__i2b+0x1a>
 800b3de:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <__i2b+0x24>)
 800b3e0:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <__i2b+0x28>)
 800b3e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3e6:	f000 fbdf 	bl	800bba8 <__assert_func>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	6144      	str	r4, [r0, #20]
 800b3ee:	6103      	str	r3, [r0, #16]
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800c930 	.word	0x0800c930
 800b3f8:	0800c941 	.word	0x0800c941

0800b3fc <__multiply>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	4614      	mov	r4, r2
 800b402:	690a      	ldr	r2, [r1, #16]
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	429a      	cmp	r2, r3
 800b408:	bfb8      	it	lt
 800b40a:	460b      	movlt	r3, r1
 800b40c:	460d      	mov	r5, r1
 800b40e:	bfbc      	itt	lt
 800b410:	4625      	movlt	r5, r4
 800b412:	461c      	movlt	r4, r3
 800b414:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b418:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b41c:	68ab      	ldr	r3, [r5, #8]
 800b41e:	6869      	ldr	r1, [r5, #4]
 800b420:	eb0a 0709 	add.w	r7, sl, r9
 800b424:	42bb      	cmp	r3, r7
 800b426:	b085      	sub	sp, #20
 800b428:	bfb8      	it	lt
 800b42a:	3101      	addlt	r1, #1
 800b42c:	f7ff fed4 	bl	800b1d8 <_Balloc>
 800b430:	b930      	cbnz	r0, 800b440 <__multiply+0x44>
 800b432:	4602      	mov	r2, r0
 800b434:	4b42      	ldr	r3, [pc, #264]	; (800b540 <__multiply+0x144>)
 800b436:	4843      	ldr	r0, [pc, #268]	; (800b544 <__multiply+0x148>)
 800b438:	f240 115d 	movw	r1, #349	; 0x15d
 800b43c:	f000 fbb4 	bl	800bba8 <__assert_func>
 800b440:	f100 0614 	add.w	r6, r0, #20
 800b444:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b448:	4633      	mov	r3, r6
 800b44a:	2200      	movs	r2, #0
 800b44c:	4543      	cmp	r3, r8
 800b44e:	d31e      	bcc.n	800b48e <__multiply+0x92>
 800b450:	f105 0c14 	add.w	ip, r5, #20
 800b454:	f104 0314 	add.w	r3, r4, #20
 800b458:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b45c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b460:	9202      	str	r2, [sp, #8]
 800b462:	ebac 0205 	sub.w	r2, ip, r5
 800b466:	3a15      	subs	r2, #21
 800b468:	f022 0203 	bic.w	r2, r2, #3
 800b46c:	3204      	adds	r2, #4
 800b46e:	f105 0115 	add.w	r1, r5, #21
 800b472:	458c      	cmp	ip, r1
 800b474:	bf38      	it	cc
 800b476:	2204      	movcc	r2, #4
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	9a02      	ldr	r2, [sp, #8]
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d808      	bhi.n	800b494 <__multiply+0x98>
 800b482:	2f00      	cmp	r7, #0
 800b484:	dc55      	bgt.n	800b532 <__multiply+0x136>
 800b486:	6107      	str	r7, [r0, #16]
 800b488:	b005      	add	sp, #20
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	f843 2b04 	str.w	r2, [r3], #4
 800b492:	e7db      	b.n	800b44c <__multiply+0x50>
 800b494:	f8b3 a000 	ldrh.w	sl, [r3]
 800b498:	f1ba 0f00 	cmp.w	sl, #0
 800b49c:	d020      	beq.n	800b4e0 <__multiply+0xe4>
 800b49e:	f105 0e14 	add.w	lr, r5, #20
 800b4a2:	46b1      	mov	r9, r6
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b4aa:	f8d9 b000 	ldr.w	fp, [r9]
 800b4ae:	b2a1      	uxth	r1, r4
 800b4b0:	fa1f fb8b 	uxth.w	fp, fp
 800b4b4:	fb0a b101 	mla	r1, sl, r1, fp
 800b4b8:	4411      	add	r1, r2
 800b4ba:	f8d9 2000 	ldr.w	r2, [r9]
 800b4be:	0c24      	lsrs	r4, r4, #16
 800b4c0:	0c12      	lsrs	r2, r2, #16
 800b4c2:	fb0a 2404 	mla	r4, sl, r4, r2
 800b4c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4d0:	45f4      	cmp	ip, lr
 800b4d2:	f849 1b04 	str.w	r1, [r9], #4
 800b4d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b4da:	d8e4      	bhi.n	800b4a6 <__multiply+0xaa>
 800b4dc:	9901      	ldr	r1, [sp, #4]
 800b4de:	5072      	str	r2, [r6, r1]
 800b4e0:	9a03      	ldr	r2, [sp, #12]
 800b4e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ec:	d01f      	beq.n	800b52e <__multiply+0x132>
 800b4ee:	6834      	ldr	r4, [r6, #0]
 800b4f0:	f105 0114 	add.w	r1, r5, #20
 800b4f4:	46b6      	mov	lr, r6
 800b4f6:	f04f 0a00 	mov.w	sl, #0
 800b4fa:	880a      	ldrh	r2, [r1, #0]
 800b4fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b500:	fb09 b202 	mla	r2, r9, r2, fp
 800b504:	4492      	add	sl, r2
 800b506:	b2a4      	uxth	r4, r4
 800b508:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b50c:	f84e 4b04 	str.w	r4, [lr], #4
 800b510:	f851 4b04 	ldr.w	r4, [r1], #4
 800b514:	f8be 2000 	ldrh.w	r2, [lr]
 800b518:	0c24      	lsrs	r4, r4, #16
 800b51a:	fb09 2404 	mla	r4, r9, r4, r2
 800b51e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b522:	458c      	cmp	ip, r1
 800b524:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b528:	d8e7      	bhi.n	800b4fa <__multiply+0xfe>
 800b52a:	9a01      	ldr	r2, [sp, #4]
 800b52c:	50b4      	str	r4, [r6, r2]
 800b52e:	3604      	adds	r6, #4
 800b530:	e7a3      	b.n	800b47a <__multiply+0x7e>
 800b532:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1a5      	bne.n	800b486 <__multiply+0x8a>
 800b53a:	3f01      	subs	r7, #1
 800b53c:	e7a1      	b.n	800b482 <__multiply+0x86>
 800b53e:	bf00      	nop
 800b540:	0800c930 	.word	0x0800c930
 800b544:	0800c941 	.word	0x0800c941

0800b548 <__pow5mult>:
 800b548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b54c:	4615      	mov	r5, r2
 800b54e:	f012 0203 	ands.w	r2, r2, #3
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	d007      	beq.n	800b568 <__pow5mult+0x20>
 800b558:	4c25      	ldr	r4, [pc, #148]	; (800b5f0 <__pow5mult+0xa8>)
 800b55a:	3a01      	subs	r2, #1
 800b55c:	2300      	movs	r3, #0
 800b55e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b562:	f7ff fe9b 	bl	800b29c <__multadd>
 800b566:	4607      	mov	r7, r0
 800b568:	10ad      	asrs	r5, r5, #2
 800b56a:	d03d      	beq.n	800b5e8 <__pow5mult+0xa0>
 800b56c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b56e:	b97c      	cbnz	r4, 800b590 <__pow5mult+0x48>
 800b570:	2010      	movs	r0, #16
 800b572:	f7fe f99d 	bl	80098b0 <malloc>
 800b576:	4602      	mov	r2, r0
 800b578:	6270      	str	r0, [r6, #36]	; 0x24
 800b57a:	b928      	cbnz	r0, 800b588 <__pow5mult+0x40>
 800b57c:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <__pow5mult+0xac>)
 800b57e:	481e      	ldr	r0, [pc, #120]	; (800b5f8 <__pow5mult+0xb0>)
 800b580:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b584:	f000 fb10 	bl	800bba8 <__assert_func>
 800b588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b58c:	6004      	str	r4, [r0, #0]
 800b58e:	60c4      	str	r4, [r0, #12]
 800b590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b598:	b94c      	cbnz	r4, 800b5ae <__pow5mult+0x66>
 800b59a:	f240 2171 	movw	r1, #625	; 0x271
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7ff ff16 	bl	800b3d0 <__i2b>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	f04f 0900 	mov.w	r9, #0
 800b5b2:	07eb      	lsls	r3, r5, #31
 800b5b4:	d50a      	bpl.n	800b5cc <__pow5mult+0x84>
 800b5b6:	4639      	mov	r1, r7
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7ff ff1e 	bl	800b3fc <__multiply>
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f7ff fe47 	bl	800b258 <_Bfree>
 800b5ca:	4647      	mov	r7, r8
 800b5cc:	106d      	asrs	r5, r5, #1
 800b5ce:	d00b      	beq.n	800b5e8 <__pow5mult+0xa0>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	b938      	cbnz	r0, 800b5e4 <__pow5mult+0x9c>
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ff0f 	bl	800b3fc <__multiply>
 800b5de:	6020      	str	r0, [r4, #0]
 800b5e0:	f8c0 9000 	str.w	r9, [r0]
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	e7e4      	b.n	800b5b2 <__pow5mult+0x6a>
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ee:	bf00      	nop
 800b5f0:	0800ca98 	.word	0x0800ca98
 800b5f4:	0800c8ba 	.word	0x0800c8ba
 800b5f8:	0800c941 	.word	0x0800c941

0800b5fc <__lshift>:
 800b5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	6849      	ldr	r1, [r1, #4]
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	4607      	mov	r7, r0
 800b60e:	4691      	mov	r9, r2
 800b610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b614:	f108 0601 	add.w	r6, r8, #1
 800b618:	42b3      	cmp	r3, r6
 800b61a:	db0b      	blt.n	800b634 <__lshift+0x38>
 800b61c:	4638      	mov	r0, r7
 800b61e:	f7ff fddb 	bl	800b1d8 <_Balloc>
 800b622:	4605      	mov	r5, r0
 800b624:	b948      	cbnz	r0, 800b63a <__lshift+0x3e>
 800b626:	4602      	mov	r2, r0
 800b628:	4b28      	ldr	r3, [pc, #160]	; (800b6cc <__lshift+0xd0>)
 800b62a:	4829      	ldr	r0, [pc, #164]	; (800b6d0 <__lshift+0xd4>)
 800b62c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b630:	f000 faba 	bl	800bba8 <__assert_func>
 800b634:	3101      	adds	r1, #1
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	e7ee      	b.n	800b618 <__lshift+0x1c>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f100 0114 	add.w	r1, r0, #20
 800b640:	f100 0210 	add.w	r2, r0, #16
 800b644:	4618      	mov	r0, r3
 800b646:	4553      	cmp	r3, sl
 800b648:	db33      	blt.n	800b6b2 <__lshift+0xb6>
 800b64a:	6920      	ldr	r0, [r4, #16]
 800b64c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b650:	f104 0314 	add.w	r3, r4, #20
 800b654:	f019 091f 	ands.w	r9, r9, #31
 800b658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b65c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b660:	d02b      	beq.n	800b6ba <__lshift+0xbe>
 800b662:	f1c9 0e20 	rsb	lr, r9, #32
 800b666:	468a      	mov	sl, r1
 800b668:	2200      	movs	r2, #0
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	fa00 f009 	lsl.w	r0, r0, r9
 800b670:	4302      	orrs	r2, r0
 800b672:	f84a 2b04 	str.w	r2, [sl], #4
 800b676:	f853 2b04 	ldr.w	r2, [r3], #4
 800b67a:	459c      	cmp	ip, r3
 800b67c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b680:	d8f3      	bhi.n	800b66a <__lshift+0x6e>
 800b682:	ebac 0304 	sub.w	r3, ip, r4
 800b686:	3b15      	subs	r3, #21
 800b688:	f023 0303 	bic.w	r3, r3, #3
 800b68c:	3304      	adds	r3, #4
 800b68e:	f104 0015 	add.w	r0, r4, #21
 800b692:	4584      	cmp	ip, r0
 800b694:	bf38      	it	cc
 800b696:	2304      	movcc	r3, #4
 800b698:	50ca      	str	r2, [r1, r3]
 800b69a:	b10a      	cbz	r2, 800b6a0 <__lshift+0xa4>
 800b69c:	f108 0602 	add.w	r6, r8, #2
 800b6a0:	3e01      	subs	r6, #1
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	612e      	str	r6, [r5, #16]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	f7ff fdd6 	bl	800b258 <_Bfree>
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	e7c5      	b.n	800b646 <__lshift+0x4a>
 800b6ba:	3904      	subs	r1, #4
 800b6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c4:	459c      	cmp	ip, r3
 800b6c6:	d8f9      	bhi.n	800b6bc <__lshift+0xc0>
 800b6c8:	e7ea      	b.n	800b6a0 <__lshift+0xa4>
 800b6ca:	bf00      	nop
 800b6cc:	0800c930 	.word	0x0800c930
 800b6d0:	0800c941 	.word	0x0800c941

0800b6d4 <__mcmp>:
 800b6d4:	b530      	push	{r4, r5, lr}
 800b6d6:	6902      	ldr	r2, [r0, #16]
 800b6d8:	690c      	ldr	r4, [r1, #16]
 800b6da:	1b12      	subs	r2, r2, r4
 800b6dc:	d10e      	bne.n	800b6fc <__mcmp+0x28>
 800b6de:	f100 0314 	add.w	r3, r0, #20
 800b6e2:	3114      	adds	r1, #20
 800b6e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6f4:	42a5      	cmp	r5, r4
 800b6f6:	d003      	beq.n	800b700 <__mcmp+0x2c>
 800b6f8:	d305      	bcc.n	800b706 <__mcmp+0x32>
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	bd30      	pop	{r4, r5, pc}
 800b700:	4283      	cmp	r3, r0
 800b702:	d3f3      	bcc.n	800b6ec <__mcmp+0x18>
 800b704:	e7fa      	b.n	800b6fc <__mcmp+0x28>
 800b706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b70a:	e7f7      	b.n	800b6fc <__mcmp+0x28>

0800b70c <__mdiff>:
 800b70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	4606      	mov	r6, r0
 800b714:	4611      	mov	r1, r2
 800b716:	4620      	mov	r0, r4
 800b718:	4617      	mov	r7, r2
 800b71a:	f7ff ffdb 	bl	800b6d4 <__mcmp>
 800b71e:	1e05      	subs	r5, r0, #0
 800b720:	d110      	bne.n	800b744 <__mdiff+0x38>
 800b722:	4629      	mov	r1, r5
 800b724:	4630      	mov	r0, r6
 800b726:	f7ff fd57 	bl	800b1d8 <_Balloc>
 800b72a:	b930      	cbnz	r0, 800b73a <__mdiff+0x2e>
 800b72c:	4b39      	ldr	r3, [pc, #228]	; (800b814 <__mdiff+0x108>)
 800b72e:	4602      	mov	r2, r0
 800b730:	f240 2132 	movw	r1, #562	; 0x232
 800b734:	4838      	ldr	r0, [pc, #224]	; (800b818 <__mdiff+0x10c>)
 800b736:	f000 fa37 	bl	800bba8 <__assert_func>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b744:	bfa4      	itt	ge
 800b746:	463b      	movge	r3, r7
 800b748:	4627      	movge	r7, r4
 800b74a:	4630      	mov	r0, r6
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	bfa6      	itte	ge
 800b750:	461c      	movge	r4, r3
 800b752:	2500      	movge	r5, #0
 800b754:	2501      	movlt	r5, #1
 800b756:	f7ff fd3f 	bl	800b1d8 <_Balloc>
 800b75a:	b920      	cbnz	r0, 800b766 <__mdiff+0x5a>
 800b75c:	4b2d      	ldr	r3, [pc, #180]	; (800b814 <__mdiff+0x108>)
 800b75e:	4602      	mov	r2, r0
 800b760:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b764:	e7e6      	b.n	800b734 <__mdiff+0x28>
 800b766:	693e      	ldr	r6, [r7, #16]
 800b768:	60c5      	str	r5, [r0, #12]
 800b76a:	6925      	ldr	r5, [r4, #16]
 800b76c:	f107 0114 	add.w	r1, r7, #20
 800b770:	f104 0914 	add.w	r9, r4, #20
 800b774:	f100 0e14 	add.w	lr, r0, #20
 800b778:	f107 0210 	add.w	r2, r7, #16
 800b77c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b780:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b784:	46f2      	mov	sl, lr
 800b786:	2700      	movs	r7, #0
 800b788:	f859 3b04 	ldr.w	r3, [r9], #4
 800b78c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b790:	fa1f f883 	uxth.w	r8, r3
 800b794:	fa17 f78b 	uxtah	r7, r7, fp
 800b798:	0c1b      	lsrs	r3, r3, #16
 800b79a:	eba7 0808 	sub.w	r8, r7, r8
 800b79e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7a6:	fa1f f888 	uxth.w	r8, r8
 800b7aa:	141f      	asrs	r7, r3, #16
 800b7ac:	454d      	cmp	r5, r9
 800b7ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7b2:	f84a 3b04 	str.w	r3, [sl], #4
 800b7b6:	d8e7      	bhi.n	800b788 <__mdiff+0x7c>
 800b7b8:	1b2b      	subs	r3, r5, r4
 800b7ba:	3b15      	subs	r3, #21
 800b7bc:	f023 0303 	bic.w	r3, r3, #3
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	3415      	adds	r4, #21
 800b7c4:	42a5      	cmp	r5, r4
 800b7c6:	bf38      	it	cc
 800b7c8:	2304      	movcc	r3, #4
 800b7ca:	4419      	add	r1, r3
 800b7cc:	4473      	add	r3, lr
 800b7ce:	469e      	mov	lr, r3
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	4565      	cmp	r5, ip
 800b7d4:	d30e      	bcc.n	800b7f4 <__mdiff+0xe8>
 800b7d6:	f10c 0203 	add.w	r2, ip, #3
 800b7da:	1a52      	subs	r2, r2, r1
 800b7dc:	f022 0203 	bic.w	r2, r2, #3
 800b7e0:	3903      	subs	r1, #3
 800b7e2:	458c      	cmp	ip, r1
 800b7e4:	bf38      	it	cc
 800b7e6:	2200      	movcc	r2, #0
 800b7e8:	441a      	add	r2, r3
 800b7ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7ee:	b17b      	cbz	r3, 800b810 <__mdiff+0x104>
 800b7f0:	6106      	str	r6, [r0, #16]
 800b7f2:	e7a5      	b.n	800b740 <__mdiff+0x34>
 800b7f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7f8:	fa17 f488 	uxtah	r4, r7, r8
 800b7fc:	1422      	asrs	r2, r4, #16
 800b7fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b802:	b2a4      	uxth	r4, r4
 800b804:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b808:	f84e 4b04 	str.w	r4, [lr], #4
 800b80c:	1417      	asrs	r7, r2, #16
 800b80e:	e7e0      	b.n	800b7d2 <__mdiff+0xc6>
 800b810:	3e01      	subs	r6, #1
 800b812:	e7ea      	b.n	800b7ea <__mdiff+0xde>
 800b814:	0800c930 	.word	0x0800c930
 800b818:	0800c941 	.word	0x0800c941

0800b81c <__d2b>:
 800b81c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b820:	4689      	mov	r9, r1
 800b822:	2101      	movs	r1, #1
 800b824:	ec57 6b10 	vmov	r6, r7, d0
 800b828:	4690      	mov	r8, r2
 800b82a:	f7ff fcd5 	bl	800b1d8 <_Balloc>
 800b82e:	4604      	mov	r4, r0
 800b830:	b930      	cbnz	r0, 800b840 <__d2b+0x24>
 800b832:	4602      	mov	r2, r0
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <__d2b+0xb0>)
 800b836:	4826      	ldr	r0, [pc, #152]	; (800b8d0 <__d2b+0xb4>)
 800b838:	f240 310a 	movw	r1, #778	; 0x30a
 800b83c:	f000 f9b4 	bl	800bba8 <__assert_func>
 800b840:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b844:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b848:	bb35      	cbnz	r5, 800b898 <__d2b+0x7c>
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	d028      	beq.n	800b8a2 <__d2b+0x86>
 800b850:	4668      	mov	r0, sp
 800b852:	9600      	str	r6, [sp, #0]
 800b854:	f7ff fd8c 	bl	800b370 <__lo0bits>
 800b858:	9900      	ldr	r1, [sp, #0]
 800b85a:	b300      	cbz	r0, 800b89e <__d2b+0x82>
 800b85c:	9a01      	ldr	r2, [sp, #4]
 800b85e:	f1c0 0320 	rsb	r3, r0, #32
 800b862:	fa02 f303 	lsl.w	r3, r2, r3
 800b866:	430b      	orrs	r3, r1
 800b868:	40c2      	lsrs	r2, r0
 800b86a:	6163      	str	r3, [r4, #20]
 800b86c:	9201      	str	r2, [sp, #4]
 800b86e:	9b01      	ldr	r3, [sp, #4]
 800b870:	61a3      	str	r3, [r4, #24]
 800b872:	2b00      	cmp	r3, #0
 800b874:	bf14      	ite	ne
 800b876:	2202      	movne	r2, #2
 800b878:	2201      	moveq	r2, #1
 800b87a:	6122      	str	r2, [r4, #16]
 800b87c:	b1d5      	cbz	r5, 800b8b4 <__d2b+0x98>
 800b87e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b882:	4405      	add	r5, r0
 800b884:	f8c9 5000 	str.w	r5, [r9]
 800b888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b88c:	f8c8 0000 	str.w	r0, [r8]
 800b890:	4620      	mov	r0, r4
 800b892:	b003      	add	sp, #12
 800b894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b89c:	e7d5      	b.n	800b84a <__d2b+0x2e>
 800b89e:	6161      	str	r1, [r4, #20]
 800b8a0:	e7e5      	b.n	800b86e <__d2b+0x52>
 800b8a2:	a801      	add	r0, sp, #4
 800b8a4:	f7ff fd64 	bl	800b370 <__lo0bits>
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	6163      	str	r3, [r4, #20]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	6122      	str	r2, [r4, #16]
 800b8b0:	3020      	adds	r0, #32
 800b8b2:	e7e3      	b.n	800b87c <__d2b+0x60>
 800b8b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8bc:	f8c9 0000 	str.w	r0, [r9]
 800b8c0:	6918      	ldr	r0, [r3, #16]
 800b8c2:	f7ff fd35 	bl	800b330 <__hi0bits>
 800b8c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8ca:	e7df      	b.n	800b88c <__d2b+0x70>
 800b8cc:	0800c930 	.word	0x0800c930
 800b8d0:	0800c941 	.word	0x0800c941

0800b8d4 <_calloc_r>:
 800b8d4:	b513      	push	{r0, r1, r4, lr}
 800b8d6:	434a      	muls	r2, r1
 800b8d8:	4611      	mov	r1, r2
 800b8da:	9201      	str	r2, [sp, #4]
 800b8dc:	f7fe f878 	bl	80099d0 <_malloc_r>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	b118      	cbz	r0, 800b8ec <_calloc_r+0x18>
 800b8e4:	9a01      	ldr	r2, [sp, #4]
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	f7fe f81a 	bl	8009920 <memset>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	b002      	add	sp, #8
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <__ssputs_r>:
 800b8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f6:	688e      	ldr	r6, [r1, #8]
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	4682      	mov	sl, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	4690      	mov	r8, r2
 800b900:	461f      	mov	r7, r3
 800b902:	d838      	bhi.n	800b976 <__ssputs_r+0x84>
 800b904:	898a      	ldrh	r2, [r1, #12]
 800b906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b90a:	d032      	beq.n	800b972 <__ssputs_r+0x80>
 800b90c:	6825      	ldr	r5, [r4, #0]
 800b90e:	6909      	ldr	r1, [r1, #16]
 800b910:	eba5 0901 	sub.w	r9, r5, r1
 800b914:	6965      	ldr	r5, [r4, #20]
 800b916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b91a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b91e:	3301      	adds	r3, #1
 800b920:	444b      	add	r3, r9
 800b922:	106d      	asrs	r5, r5, #1
 800b924:	429d      	cmp	r5, r3
 800b926:	bf38      	it	cc
 800b928:	461d      	movcc	r5, r3
 800b92a:	0553      	lsls	r3, r2, #21
 800b92c:	d531      	bpl.n	800b992 <__ssputs_r+0xa0>
 800b92e:	4629      	mov	r1, r5
 800b930:	f7fe f84e 	bl	80099d0 <_malloc_r>
 800b934:	4606      	mov	r6, r0
 800b936:	b950      	cbnz	r0, 800b94e <__ssputs_r+0x5c>
 800b938:	230c      	movs	r3, #12
 800b93a:	f8ca 3000 	str.w	r3, [sl]
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94e:	6921      	ldr	r1, [r4, #16]
 800b950:	464a      	mov	r2, r9
 800b952:	f7fd ffbd 	bl	80098d0 <memcpy>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	6126      	str	r6, [r4, #16]
 800b964:	6165      	str	r5, [r4, #20]
 800b966:	444e      	add	r6, r9
 800b968:	eba5 0509 	sub.w	r5, r5, r9
 800b96c:	6026      	str	r6, [r4, #0]
 800b96e:	60a5      	str	r5, [r4, #8]
 800b970:	463e      	mov	r6, r7
 800b972:	42be      	cmp	r6, r7
 800b974:	d900      	bls.n	800b978 <__ssputs_r+0x86>
 800b976:	463e      	mov	r6, r7
 800b978:	4632      	mov	r2, r6
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	4641      	mov	r1, r8
 800b97e:	f7fd ffb5 	bl	80098ec <memmove>
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	6822      	ldr	r2, [r4, #0]
 800b986:	1b9b      	subs	r3, r3, r6
 800b988:	4432      	add	r2, r6
 800b98a:	60a3      	str	r3, [r4, #8]
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	2000      	movs	r0, #0
 800b990:	e7db      	b.n	800b94a <__ssputs_r+0x58>
 800b992:	462a      	mov	r2, r5
 800b994:	f000 f94d 	bl	800bc32 <_realloc_r>
 800b998:	4606      	mov	r6, r0
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d1e1      	bne.n	800b962 <__ssputs_r+0x70>
 800b99e:	6921      	ldr	r1, [r4, #16]
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	f7fd ffc5 	bl	8009930 <_free_r>
 800b9a6:	e7c7      	b.n	800b938 <__ssputs_r+0x46>

0800b9a8 <_svfiprintf_r>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	4698      	mov	r8, r3
 800b9ae:	898b      	ldrh	r3, [r1, #12]
 800b9b0:	061b      	lsls	r3, r3, #24
 800b9b2:	b09d      	sub	sp, #116	; 0x74
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	d50e      	bpl.n	800b9da <_svfiprintf_r+0x32>
 800b9bc:	690b      	ldr	r3, [r1, #16]
 800b9be:	b963      	cbnz	r3, 800b9da <_svfiprintf_r+0x32>
 800b9c0:	2140      	movs	r1, #64	; 0x40
 800b9c2:	f7fe f805 	bl	80099d0 <_malloc_r>
 800b9c6:	6028      	str	r0, [r5, #0]
 800b9c8:	6128      	str	r0, [r5, #16]
 800b9ca:	b920      	cbnz	r0, 800b9d6 <_svfiprintf_r+0x2e>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d4:	e0d1      	b.n	800bb7a <_svfiprintf_r+0x1d2>
 800b9d6:	2340      	movs	r3, #64	; 0x40
 800b9d8:	616b      	str	r3, [r5, #20]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	2320      	movs	r3, #32
 800b9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e8:	2330      	movs	r3, #48	; 0x30
 800b9ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb94 <_svfiprintf_r+0x1ec>
 800b9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f2:	f04f 0901 	mov.w	r9, #1
 800b9f6:	4623      	mov	r3, r4
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fe:	b10a      	cbz	r2, 800ba04 <_svfiprintf_r+0x5c>
 800ba00:	2a25      	cmp	r2, #37	; 0x25
 800ba02:	d1f9      	bne.n	800b9f8 <_svfiprintf_r+0x50>
 800ba04:	ebba 0b04 	subs.w	fp, sl, r4
 800ba08:	d00b      	beq.n	800ba22 <_svfiprintf_r+0x7a>
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ff6e 	bl	800b8f2 <__ssputs_r>
 800ba16:	3001      	adds	r0, #1
 800ba18:	f000 80aa 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1e:	445a      	add	r2, fp
 800ba20:	9209      	str	r2, [sp, #36]	; 0x24
 800ba22:	f89a 3000 	ldrb.w	r3, [sl]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80a2 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba36:	f10a 0a01 	add.w	sl, sl, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	9307      	str	r3, [sp, #28]
 800ba3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba42:	931a      	str	r3, [sp, #104]	; 0x68
 800ba44:	4654      	mov	r4, sl
 800ba46:	2205      	movs	r2, #5
 800ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4c:	4851      	ldr	r0, [pc, #324]	; (800bb94 <_svfiprintf_r+0x1ec>)
 800ba4e:	f7f4 fbbf 	bl	80001d0 <memchr>
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	b9d8      	cbnz	r0, 800ba8e <_svfiprintf_r+0xe6>
 800ba56:	06d0      	lsls	r0, r2, #27
 800ba58:	bf44      	itt	mi
 800ba5a:	2320      	movmi	r3, #32
 800ba5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba60:	0711      	lsls	r1, r2, #28
 800ba62:	bf44      	itt	mi
 800ba64:	232b      	movmi	r3, #43	; 0x2b
 800ba66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba70:	d015      	beq.n	800ba9e <_svfiprintf_r+0xf6>
 800ba72:	9a07      	ldr	r2, [sp, #28]
 800ba74:	4654      	mov	r4, sl
 800ba76:	2000      	movs	r0, #0
 800ba78:	f04f 0c0a 	mov.w	ip, #10
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba82:	3b30      	subs	r3, #48	; 0x30
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d94e      	bls.n	800bb26 <_svfiprintf_r+0x17e>
 800ba88:	b1b0      	cbz	r0, 800bab8 <_svfiprintf_r+0x110>
 800ba8a:	9207      	str	r2, [sp, #28]
 800ba8c:	e014      	b.n	800bab8 <_svfiprintf_r+0x110>
 800ba8e:	eba0 0308 	sub.w	r3, r0, r8
 800ba92:	fa09 f303 	lsl.w	r3, r9, r3
 800ba96:	4313      	orrs	r3, r2
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	46a2      	mov	sl, r4
 800ba9c:	e7d2      	b.n	800ba44 <_svfiprintf_r+0x9c>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	1d19      	adds	r1, r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	9103      	str	r1, [sp, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfbb      	ittet	lt
 800baaa:	425b      	neglt	r3, r3
 800baac:	f042 0202 	orrlt.w	r2, r2, #2
 800bab0:	9307      	strge	r3, [sp, #28]
 800bab2:	9307      	strlt	r3, [sp, #28]
 800bab4:	bfb8      	it	lt
 800bab6:	9204      	strlt	r2, [sp, #16]
 800bab8:	7823      	ldrb	r3, [r4, #0]
 800baba:	2b2e      	cmp	r3, #46	; 0x2e
 800babc:	d10c      	bne.n	800bad8 <_svfiprintf_r+0x130>
 800babe:	7863      	ldrb	r3, [r4, #1]
 800bac0:	2b2a      	cmp	r3, #42	; 0x2a
 800bac2:	d135      	bne.n	800bb30 <_svfiprintf_r+0x188>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	1d1a      	adds	r2, r3, #4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	9203      	str	r2, [sp, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bfb8      	it	lt
 800bad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bad4:	3402      	adds	r4, #2
 800bad6:	9305      	str	r3, [sp, #20]
 800bad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bba4 <_svfiprintf_r+0x1fc>
 800badc:	7821      	ldrb	r1, [r4, #0]
 800bade:	2203      	movs	r2, #3
 800bae0:	4650      	mov	r0, sl
 800bae2:	f7f4 fb75 	bl	80001d0 <memchr>
 800bae6:	b140      	cbz	r0, 800bafa <_svfiprintf_r+0x152>
 800bae8:	2340      	movs	r3, #64	; 0x40
 800baea:	eba0 000a 	sub.w	r0, r0, sl
 800baee:	fa03 f000 	lsl.w	r0, r3, r0
 800baf2:	9b04      	ldr	r3, [sp, #16]
 800baf4:	4303      	orrs	r3, r0
 800baf6:	3401      	adds	r4, #1
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	4826      	ldr	r0, [pc, #152]	; (800bb98 <_svfiprintf_r+0x1f0>)
 800bb00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb04:	2206      	movs	r2, #6
 800bb06:	f7f4 fb63 	bl	80001d0 <memchr>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d038      	beq.n	800bb80 <_svfiprintf_r+0x1d8>
 800bb0e:	4b23      	ldr	r3, [pc, #140]	; (800bb9c <_svfiprintf_r+0x1f4>)
 800bb10:	bb1b      	cbnz	r3, 800bb5a <_svfiprintf_r+0x1b2>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	3307      	adds	r3, #7
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	9303      	str	r3, [sp, #12]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	4433      	add	r3, r6
 800bb22:	9309      	str	r3, [sp, #36]	; 0x24
 800bb24:	e767      	b.n	800b9f6 <_svfiprintf_r+0x4e>
 800bb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	e7a5      	b.n	800ba7c <_svfiprintf_r+0xd4>
 800bb30:	2300      	movs	r3, #0
 800bb32:	3401      	adds	r4, #1
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	4619      	mov	r1, r3
 800bb38:	f04f 0c0a 	mov.w	ip, #10
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb42:	3a30      	subs	r2, #48	; 0x30
 800bb44:	2a09      	cmp	r2, #9
 800bb46:	d903      	bls.n	800bb50 <_svfiprintf_r+0x1a8>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0c5      	beq.n	800bad8 <_svfiprintf_r+0x130>
 800bb4c:	9105      	str	r1, [sp, #20]
 800bb4e:	e7c3      	b.n	800bad8 <_svfiprintf_r+0x130>
 800bb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb54:	4604      	mov	r4, r0
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7f0      	b.n	800bb3c <_svfiprintf_r+0x194>
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <_svfiprintf_r+0x1f8>)
 800bb62:	a904      	add	r1, sp, #16
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7fe f82d 	bl	8009bc4 <_printf_float>
 800bb6a:	1c42      	adds	r2, r0, #1
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	d1d6      	bne.n	800bb1e <_svfiprintf_r+0x176>
 800bb70:	89ab      	ldrh	r3, [r5, #12]
 800bb72:	065b      	lsls	r3, r3, #25
 800bb74:	f53f af2c 	bmi.w	800b9d0 <_svfiprintf_r+0x28>
 800bb78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7a:	b01d      	add	sp, #116	; 0x74
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	462a      	mov	r2, r5
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <_svfiprintf_r+0x1f8>)
 800bb88:	a904      	add	r1, sp, #16
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f7fe fabe 	bl	800a10c <_printf_i>
 800bb90:	e7eb      	b.n	800bb6a <_svfiprintf_r+0x1c2>
 800bb92:	bf00      	nop
 800bb94:	0800caa4 	.word	0x0800caa4
 800bb98:	0800caae 	.word	0x0800caae
 800bb9c:	08009bc5 	.word	0x08009bc5
 800bba0:	0800b8f3 	.word	0x0800b8f3
 800bba4:	0800caaa 	.word	0x0800caaa

0800bba8 <__assert_func>:
 800bba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbaa:	4614      	mov	r4, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <__assert_func+0x2c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	68d8      	ldr	r0, [r3, #12]
 800bbb6:	b14c      	cbz	r4, 800bbcc <__assert_func+0x24>
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <__assert_func+0x30>)
 800bbba:	9100      	str	r1, [sp, #0]
 800bbbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc0:	4906      	ldr	r1, [pc, #24]	; (800bbdc <__assert_func+0x34>)
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f000 f80e 	bl	800bbe4 <fiprintf>
 800bbc8:	f7fd fe26 	bl	8009818 <abort>
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <__assert_func+0x38>)
 800bbce:	461c      	mov	r4, r3
 800bbd0:	e7f3      	b.n	800bbba <__assert_func+0x12>
 800bbd2:	bf00      	nop
 800bbd4:	20000018 	.word	0x20000018
 800bbd8:	0800cab5 	.word	0x0800cab5
 800bbdc:	0800cac2 	.word	0x0800cac2
 800bbe0:	0800caf0 	.word	0x0800caf0

0800bbe4 <fiprintf>:
 800bbe4:	b40e      	push	{r1, r2, r3}
 800bbe6:	b503      	push	{r0, r1, lr}
 800bbe8:	4601      	mov	r1, r0
 800bbea:	ab03      	add	r3, sp, #12
 800bbec:	4805      	ldr	r0, [pc, #20]	; (800bc04 <fiprintf+0x20>)
 800bbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf2:	6800      	ldr	r0, [r0, #0]
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	f000 f86b 	bl	800bcd0 <_vfiprintf_r>
 800bbfa:	b002      	add	sp, #8
 800bbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc00:	b003      	add	sp, #12
 800bc02:	4770      	bx	lr
 800bc04:	20000018 	.word	0x20000018

0800bc08 <__retarget_lock_init_recursive>:
 800bc08:	4770      	bx	lr

0800bc0a <__retarget_lock_acquire_recursive>:
 800bc0a:	4770      	bx	lr

0800bc0c <__retarget_lock_release_recursive>:
 800bc0c:	4770      	bx	lr

0800bc0e <__ascii_mbtowc>:
 800bc0e:	b082      	sub	sp, #8
 800bc10:	b901      	cbnz	r1, 800bc14 <__ascii_mbtowc+0x6>
 800bc12:	a901      	add	r1, sp, #4
 800bc14:	b142      	cbz	r2, 800bc28 <__ascii_mbtowc+0x1a>
 800bc16:	b14b      	cbz	r3, 800bc2c <__ascii_mbtowc+0x1e>
 800bc18:	7813      	ldrb	r3, [r2, #0]
 800bc1a:	600b      	str	r3, [r1, #0]
 800bc1c:	7812      	ldrb	r2, [r2, #0]
 800bc1e:	1e10      	subs	r0, r2, #0
 800bc20:	bf18      	it	ne
 800bc22:	2001      	movne	r0, #1
 800bc24:	b002      	add	sp, #8
 800bc26:	4770      	bx	lr
 800bc28:	4610      	mov	r0, r2
 800bc2a:	e7fb      	b.n	800bc24 <__ascii_mbtowc+0x16>
 800bc2c:	f06f 0001 	mvn.w	r0, #1
 800bc30:	e7f8      	b.n	800bc24 <__ascii_mbtowc+0x16>

0800bc32 <_realloc_r>:
 800bc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc34:	4607      	mov	r7, r0
 800bc36:	4614      	mov	r4, r2
 800bc38:	460e      	mov	r6, r1
 800bc3a:	b921      	cbnz	r1, 800bc46 <_realloc_r+0x14>
 800bc3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc40:	4611      	mov	r1, r2
 800bc42:	f7fd bec5 	b.w	80099d0 <_malloc_r>
 800bc46:	b922      	cbnz	r2, 800bc52 <_realloc_r+0x20>
 800bc48:	f7fd fe72 	bl	8009930 <_free_r>
 800bc4c:	4625      	mov	r5, r4
 800bc4e:	4628      	mov	r0, r5
 800bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc52:	f000 fc57 	bl	800c504 <_malloc_usable_size_r>
 800bc56:	42a0      	cmp	r0, r4
 800bc58:	d20f      	bcs.n	800bc7a <_realloc_r+0x48>
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7fd feb7 	bl	80099d0 <_malloc_r>
 800bc62:	4605      	mov	r5, r0
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d0f2      	beq.n	800bc4e <_realloc_r+0x1c>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	f7fd fe30 	bl	80098d0 <memcpy>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4638      	mov	r0, r7
 800bc74:	f7fd fe5c 	bl	8009930 <_free_r>
 800bc78:	e7e9      	b.n	800bc4e <_realloc_r+0x1c>
 800bc7a:	4635      	mov	r5, r6
 800bc7c:	e7e7      	b.n	800bc4e <_realloc_r+0x1c>

0800bc7e <__sfputc_r>:
 800bc7e:	6893      	ldr	r3, [r2, #8]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	b410      	push	{r4}
 800bc86:	6093      	str	r3, [r2, #8]
 800bc88:	da08      	bge.n	800bc9c <__sfputc_r+0x1e>
 800bc8a:	6994      	ldr	r4, [r2, #24]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	db01      	blt.n	800bc94 <__sfputc_r+0x16>
 800bc90:	290a      	cmp	r1, #10
 800bc92:	d103      	bne.n	800bc9c <__sfputc_r+0x1e>
 800bc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc98:	f000 b94a 	b.w	800bf30 <__swbuf_r>
 800bc9c:	6813      	ldr	r3, [r2, #0]
 800bc9e:	1c58      	adds	r0, r3, #1
 800bca0:	6010      	str	r0, [r2, #0]
 800bca2:	7019      	strb	r1, [r3, #0]
 800bca4:	4608      	mov	r0, r1
 800bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <__sfputs_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	4614      	mov	r4, r2
 800bcb4:	18d5      	adds	r5, r2, r3
 800bcb6:	42ac      	cmp	r4, r5
 800bcb8:	d101      	bne.n	800bcbe <__sfputs_r+0x12>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e007      	b.n	800bcce <__sfputs_r+0x22>
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff ffda 	bl	800bc7e <__sfputc_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d1f3      	bne.n	800bcb6 <__sfputs_r+0xa>
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4698      	mov	r8, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f000 fb0c 	bl	800c300 <__sinit>
 800bce8:	4b89      	ldr	r3, [pc, #548]	; (800bf10 <_vfiprintf_r+0x240>)
 800bcea:	429d      	cmp	r5, r3
 800bcec:	d11b      	bne.n	800bd26 <_vfiprintf_r+0x56>
 800bcee:	6875      	ldr	r5, [r6, #4]
 800bcf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d405      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	059a      	lsls	r2, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcfe:	f7ff ff84 	bl	800bc0a <__retarget_lock_acquire_recursive>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	071b      	lsls	r3, r3, #28
 800bd06:	d501      	bpl.n	800bd0c <_vfiprintf_r+0x3c>
 800bd08:	692b      	ldr	r3, [r5, #16]
 800bd0a:	b9eb      	cbnz	r3, 800bd48 <_vfiprintf_r+0x78>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f000 f96e 	bl	800bff0 <__swsetup_r>
 800bd14:	b1c0      	cbz	r0, 800bd48 <_vfiprintf_r+0x78>
 800bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd18:	07dc      	lsls	r4, r3, #31
 800bd1a:	d50e      	bpl.n	800bd3a <_vfiprintf_r+0x6a>
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd20:	b01d      	add	sp, #116	; 0x74
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	4b7b      	ldr	r3, [pc, #492]	; (800bf14 <_vfiprintf_r+0x244>)
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	d101      	bne.n	800bd30 <_vfiprintf_r+0x60>
 800bd2c:	68b5      	ldr	r5, [r6, #8]
 800bd2e:	e7df      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd30:	4b79      	ldr	r3, [pc, #484]	; (800bf18 <_vfiprintf_r+0x248>)
 800bd32:	429d      	cmp	r5, r3
 800bd34:	bf08      	it	eq
 800bd36:	68f5      	ldreq	r5, [r6, #12]
 800bd38:	e7da      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd3a:	89ab      	ldrh	r3, [r5, #12]
 800bd3c:	0598      	lsls	r0, r3, #22
 800bd3e:	d4ed      	bmi.n	800bd1c <_vfiprintf_r+0x4c>
 800bd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd42:	f7ff ff63 	bl	800bc0c <__retarget_lock_release_recursive>
 800bd46:	e7e9      	b.n	800bd1c <_vfiprintf_r+0x4c>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd52:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd56:	2330      	movs	r3, #48	; 0x30
 800bd58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf1c <_vfiprintf_r+0x24c>
 800bd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd60:	f04f 0901 	mov.w	r9, #1
 800bd64:	4623      	mov	r3, r4
 800bd66:	469a      	mov	sl, r3
 800bd68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6c:	b10a      	cbz	r2, 800bd72 <_vfiprintf_r+0xa2>
 800bd6e:	2a25      	cmp	r2, #37	; 0x25
 800bd70:	d1f9      	bne.n	800bd66 <_vfiprintf_r+0x96>
 800bd72:	ebba 0b04 	subs.w	fp, sl, r4
 800bd76:	d00b      	beq.n	800bd90 <_vfiprintf_r+0xc0>
 800bd78:	465b      	mov	r3, fp
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff94 	bl	800bcac <__sfputs_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	f000 80aa 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd8c:	445a      	add	r2, fp
 800bd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd90:	f89a 3000 	ldrb.w	r3, [sl]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80a2 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda4:	f10a 0a01 	add.w	sl, sl, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	9307      	str	r3, [sp, #28]
 800bdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdb0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb2:	4654      	mov	r4, sl
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdba:	4858      	ldr	r0, [pc, #352]	; (800bf1c <_vfiprintf_r+0x24c>)
 800bdbc:	f7f4 fa08 	bl	80001d0 <memchr>
 800bdc0:	9a04      	ldr	r2, [sp, #16]
 800bdc2:	b9d8      	cbnz	r0, 800bdfc <_vfiprintf_r+0x12c>
 800bdc4:	06d1      	lsls	r1, r2, #27
 800bdc6:	bf44      	itt	mi
 800bdc8:	2320      	movmi	r3, #32
 800bdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdce:	0713      	lsls	r3, r2, #28
 800bdd0:	bf44      	itt	mi
 800bdd2:	232b      	movmi	r3, #43	; 0x2b
 800bdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bddc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdde:	d015      	beq.n	800be0c <_vfiprintf_r+0x13c>
 800bde0:	9a07      	ldr	r2, [sp, #28]
 800bde2:	4654      	mov	r4, sl
 800bde4:	2000      	movs	r0, #0
 800bde6:	f04f 0c0a 	mov.w	ip, #10
 800bdea:	4621      	mov	r1, r4
 800bdec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf0:	3b30      	subs	r3, #48	; 0x30
 800bdf2:	2b09      	cmp	r3, #9
 800bdf4:	d94e      	bls.n	800be94 <_vfiprintf_r+0x1c4>
 800bdf6:	b1b0      	cbz	r0, 800be26 <_vfiprintf_r+0x156>
 800bdf8:	9207      	str	r2, [sp, #28]
 800bdfa:	e014      	b.n	800be26 <_vfiprintf_r+0x156>
 800bdfc:	eba0 0308 	sub.w	r3, r0, r8
 800be00:	fa09 f303 	lsl.w	r3, r9, r3
 800be04:	4313      	orrs	r3, r2
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	46a2      	mov	sl, r4
 800be0a:	e7d2      	b.n	800bdb2 <_vfiprintf_r+0xe2>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	1d19      	adds	r1, r3, #4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	9103      	str	r1, [sp, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfbb      	ittet	lt
 800be18:	425b      	neglt	r3, r3
 800be1a:	f042 0202 	orrlt.w	r2, r2, #2
 800be1e:	9307      	strge	r3, [sp, #28]
 800be20:	9307      	strlt	r3, [sp, #28]
 800be22:	bfb8      	it	lt
 800be24:	9204      	strlt	r2, [sp, #16]
 800be26:	7823      	ldrb	r3, [r4, #0]
 800be28:	2b2e      	cmp	r3, #46	; 0x2e
 800be2a:	d10c      	bne.n	800be46 <_vfiprintf_r+0x176>
 800be2c:	7863      	ldrb	r3, [r4, #1]
 800be2e:	2b2a      	cmp	r3, #42	; 0x2a
 800be30:	d135      	bne.n	800be9e <_vfiprintf_r+0x1ce>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	1d1a      	adds	r2, r3, #4
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	9203      	str	r2, [sp, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bfb8      	it	lt
 800be3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be42:	3402      	adds	r4, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf2c <_vfiprintf_r+0x25c>
 800be4a:	7821      	ldrb	r1, [r4, #0]
 800be4c:	2203      	movs	r2, #3
 800be4e:	4650      	mov	r0, sl
 800be50:	f7f4 f9be 	bl	80001d0 <memchr>
 800be54:	b140      	cbz	r0, 800be68 <_vfiprintf_r+0x198>
 800be56:	2340      	movs	r3, #64	; 0x40
 800be58:	eba0 000a 	sub.w	r0, r0, sl
 800be5c:	fa03 f000 	lsl.w	r0, r3, r0
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	4303      	orrs	r3, r0
 800be64:	3401      	adds	r4, #1
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	482c      	ldr	r0, [pc, #176]	; (800bf20 <_vfiprintf_r+0x250>)
 800be6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be72:	2206      	movs	r2, #6
 800be74:	f7f4 f9ac 	bl	80001d0 <memchr>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d03f      	beq.n	800befc <_vfiprintf_r+0x22c>
 800be7c:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <_vfiprintf_r+0x254>)
 800be7e:	bb1b      	cbnz	r3, 800bec8 <_vfiprintf_r+0x1f8>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	3307      	adds	r3, #7
 800be84:	f023 0307 	bic.w	r3, r3, #7
 800be88:	3308      	adds	r3, #8
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8e:	443b      	add	r3, r7
 800be90:	9309      	str	r3, [sp, #36]	; 0x24
 800be92:	e767      	b.n	800bd64 <_vfiprintf_r+0x94>
 800be94:	fb0c 3202 	mla	r2, ip, r2, r3
 800be98:	460c      	mov	r4, r1
 800be9a:	2001      	movs	r0, #1
 800be9c:	e7a5      	b.n	800bdea <_vfiprintf_r+0x11a>
 800be9e:	2300      	movs	r3, #0
 800bea0:	3401      	adds	r4, #1
 800bea2:	9305      	str	r3, [sp, #20]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f04f 0c0a 	mov.w	ip, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb0:	3a30      	subs	r2, #48	; 0x30
 800beb2:	2a09      	cmp	r2, #9
 800beb4:	d903      	bls.n	800bebe <_vfiprintf_r+0x1ee>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0c5      	beq.n	800be46 <_vfiprintf_r+0x176>
 800beba:	9105      	str	r1, [sp, #20]
 800bebc:	e7c3      	b.n	800be46 <_vfiprintf_r+0x176>
 800bebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec2:	4604      	mov	r4, r0
 800bec4:	2301      	movs	r3, #1
 800bec6:	e7f0      	b.n	800beaa <_vfiprintf_r+0x1da>
 800bec8:	ab03      	add	r3, sp, #12
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	462a      	mov	r2, r5
 800bece:	4b16      	ldr	r3, [pc, #88]	; (800bf28 <_vfiprintf_r+0x258>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fd fe76 	bl	8009bc4 <_printf_float>
 800bed8:	4607      	mov	r7, r0
 800beda:	1c78      	adds	r0, r7, #1
 800bedc:	d1d6      	bne.n	800be8c <_vfiprintf_r+0x1bc>
 800bede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	d405      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800bee4:	89ab      	ldrh	r3, [r5, #12]
 800bee6:	059a      	lsls	r2, r3, #22
 800bee8:	d402      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800beea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beec:	f7ff fe8e 	bl	800bc0c <__retarget_lock_release_recursive>
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	065b      	lsls	r3, r3, #25
 800bef4:	f53f af12 	bmi.w	800bd1c <_vfiprintf_r+0x4c>
 800bef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800befa:	e711      	b.n	800bd20 <_vfiprintf_r+0x50>
 800befc:	ab03      	add	r3, sp, #12
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4b09      	ldr	r3, [pc, #36]	; (800bf28 <_vfiprintf_r+0x258>)
 800bf04:	a904      	add	r1, sp, #16
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7fe f900 	bl	800a10c <_printf_i>
 800bf0c:	e7e4      	b.n	800bed8 <_vfiprintf_r+0x208>
 800bf0e:	bf00      	nop
 800bf10:	0800cc1c 	.word	0x0800cc1c
 800bf14:	0800cc3c 	.word	0x0800cc3c
 800bf18:	0800cbfc 	.word	0x0800cbfc
 800bf1c:	0800caa4 	.word	0x0800caa4
 800bf20:	0800caae 	.word	0x0800caae
 800bf24:	08009bc5 	.word	0x08009bc5
 800bf28:	0800bcad 	.word	0x0800bcad
 800bf2c:	0800caaa 	.word	0x0800caaa

0800bf30 <__swbuf_r>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	460e      	mov	r6, r1
 800bf34:	4614      	mov	r4, r2
 800bf36:	4605      	mov	r5, r0
 800bf38:	b118      	cbz	r0, 800bf42 <__swbuf_r+0x12>
 800bf3a:	6983      	ldr	r3, [r0, #24]
 800bf3c:	b90b      	cbnz	r3, 800bf42 <__swbuf_r+0x12>
 800bf3e:	f000 f9df 	bl	800c300 <__sinit>
 800bf42:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <__swbuf_r+0x98>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	d12b      	bne.n	800bfa0 <__swbuf_r+0x70>
 800bf48:	686c      	ldr	r4, [r5, #4]
 800bf4a:	69a3      	ldr	r3, [r4, #24]
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	071a      	lsls	r2, r3, #28
 800bf52:	d52f      	bpl.n	800bfb4 <__swbuf_r+0x84>
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b36b      	cbz	r3, 800bfb4 <__swbuf_r+0x84>
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	6820      	ldr	r0, [r4, #0]
 800bf5c:	1ac0      	subs	r0, r0, r3
 800bf5e:	6963      	ldr	r3, [r4, #20]
 800bf60:	b2f6      	uxtb	r6, r6
 800bf62:	4283      	cmp	r3, r0
 800bf64:	4637      	mov	r7, r6
 800bf66:	dc04      	bgt.n	800bf72 <__swbuf_r+0x42>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f934 	bl	800c1d8 <_fflush_r>
 800bf70:	bb30      	cbnz	r0, 800bfc0 <__swbuf_r+0x90>
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	60a3      	str	r3, [r4, #8]
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	6022      	str	r2, [r4, #0]
 800bf7e:	701e      	strb	r6, [r3, #0]
 800bf80:	6963      	ldr	r3, [r4, #20]
 800bf82:	3001      	adds	r0, #1
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d004      	beq.n	800bf92 <__swbuf_r+0x62>
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	07db      	lsls	r3, r3, #31
 800bf8c:	d506      	bpl.n	800bf9c <__swbuf_r+0x6c>
 800bf8e:	2e0a      	cmp	r6, #10
 800bf90:	d104      	bne.n	800bf9c <__swbuf_r+0x6c>
 800bf92:	4621      	mov	r1, r4
 800bf94:	4628      	mov	r0, r5
 800bf96:	f000 f91f 	bl	800c1d8 <_fflush_r>
 800bf9a:	b988      	cbnz	r0, 800bfc0 <__swbuf_r+0x90>
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <__swbuf_r+0x9c>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d101      	bne.n	800bfaa <__swbuf_r+0x7a>
 800bfa6:	68ac      	ldr	r4, [r5, #8]
 800bfa8:	e7cf      	b.n	800bf4a <__swbuf_r+0x1a>
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <__swbuf_r+0xa0>)
 800bfac:	429c      	cmp	r4, r3
 800bfae:	bf08      	it	eq
 800bfb0:	68ec      	ldreq	r4, [r5, #12]
 800bfb2:	e7ca      	b.n	800bf4a <__swbuf_r+0x1a>
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 f81a 	bl	800bff0 <__swsetup_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d0cb      	beq.n	800bf58 <__swbuf_r+0x28>
 800bfc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bfc4:	e7ea      	b.n	800bf9c <__swbuf_r+0x6c>
 800bfc6:	bf00      	nop
 800bfc8:	0800cc1c 	.word	0x0800cc1c
 800bfcc:	0800cc3c 	.word	0x0800cc3c
 800bfd0:	0800cbfc 	.word	0x0800cbfc

0800bfd4 <__ascii_wctomb>:
 800bfd4:	b149      	cbz	r1, 800bfea <__ascii_wctomb+0x16>
 800bfd6:	2aff      	cmp	r2, #255	; 0xff
 800bfd8:	bf85      	ittet	hi
 800bfda:	238a      	movhi	r3, #138	; 0x8a
 800bfdc:	6003      	strhi	r3, [r0, #0]
 800bfde:	700a      	strbls	r2, [r1, #0]
 800bfe0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bfe4:	bf98      	it	ls
 800bfe6:	2001      	movls	r0, #1
 800bfe8:	4770      	bx	lr
 800bfea:	4608      	mov	r0, r1
 800bfec:	4770      	bx	lr
	...

0800bff0 <__swsetup_r>:
 800bff0:	4b32      	ldr	r3, [pc, #200]	; (800c0bc <__swsetup_r+0xcc>)
 800bff2:	b570      	push	{r4, r5, r6, lr}
 800bff4:	681d      	ldr	r5, [r3, #0]
 800bff6:	4606      	mov	r6, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	b125      	cbz	r5, 800c006 <__swsetup_r+0x16>
 800bffc:	69ab      	ldr	r3, [r5, #24]
 800bffe:	b913      	cbnz	r3, 800c006 <__swsetup_r+0x16>
 800c000:	4628      	mov	r0, r5
 800c002:	f000 f97d 	bl	800c300 <__sinit>
 800c006:	4b2e      	ldr	r3, [pc, #184]	; (800c0c0 <__swsetup_r+0xd0>)
 800c008:	429c      	cmp	r4, r3
 800c00a:	d10f      	bne.n	800c02c <__swsetup_r+0x3c>
 800c00c:	686c      	ldr	r4, [r5, #4]
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c014:	0719      	lsls	r1, r3, #28
 800c016:	d42c      	bmi.n	800c072 <__swsetup_r+0x82>
 800c018:	06dd      	lsls	r5, r3, #27
 800c01a:	d411      	bmi.n	800c040 <__swsetup_r+0x50>
 800c01c:	2309      	movs	r3, #9
 800c01e:	6033      	str	r3, [r6, #0]
 800c020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c02a:	e03e      	b.n	800c0aa <__swsetup_r+0xba>
 800c02c:	4b25      	ldr	r3, [pc, #148]	; (800c0c4 <__swsetup_r+0xd4>)
 800c02e:	429c      	cmp	r4, r3
 800c030:	d101      	bne.n	800c036 <__swsetup_r+0x46>
 800c032:	68ac      	ldr	r4, [r5, #8]
 800c034:	e7eb      	b.n	800c00e <__swsetup_r+0x1e>
 800c036:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <__swsetup_r+0xd8>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	bf08      	it	eq
 800c03c:	68ec      	ldreq	r4, [r5, #12]
 800c03e:	e7e6      	b.n	800c00e <__swsetup_r+0x1e>
 800c040:	0758      	lsls	r0, r3, #29
 800c042:	d512      	bpl.n	800c06a <__swsetup_r+0x7a>
 800c044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c046:	b141      	cbz	r1, 800c05a <__swsetup_r+0x6a>
 800c048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c04c:	4299      	cmp	r1, r3
 800c04e:	d002      	beq.n	800c056 <__swsetup_r+0x66>
 800c050:	4630      	mov	r0, r6
 800c052:	f7fd fc6d 	bl	8009930 <_free_r>
 800c056:	2300      	movs	r3, #0
 800c058:	6363      	str	r3, [r4, #52]	; 0x34
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	2300      	movs	r3, #0
 800c064:	6063      	str	r3, [r4, #4]
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f043 0308 	orr.w	r3, r3, #8
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	b94b      	cbnz	r3, 800c08a <__swsetup_r+0x9a>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c080:	d003      	beq.n	800c08a <__swsetup_r+0x9a>
 800c082:	4621      	mov	r1, r4
 800c084:	4630      	mov	r0, r6
 800c086:	f000 f9fd 	bl	800c484 <__smakebuf_r>
 800c08a:	89a0      	ldrh	r0, [r4, #12]
 800c08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c090:	f010 0301 	ands.w	r3, r0, #1
 800c094:	d00a      	beq.n	800c0ac <__swsetup_r+0xbc>
 800c096:	2300      	movs	r3, #0
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6963      	ldr	r3, [r4, #20]
 800c09c:	425b      	negs	r3, r3
 800c09e:	61a3      	str	r3, [r4, #24]
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	b943      	cbnz	r3, 800c0b6 <__swsetup_r+0xc6>
 800c0a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0a8:	d1ba      	bne.n	800c020 <__swsetup_r+0x30>
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	0781      	lsls	r1, r0, #30
 800c0ae:	bf58      	it	pl
 800c0b0:	6963      	ldrpl	r3, [r4, #20]
 800c0b2:	60a3      	str	r3, [r4, #8]
 800c0b4:	e7f4      	b.n	800c0a0 <__swsetup_r+0xb0>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	e7f7      	b.n	800c0aa <__swsetup_r+0xba>
 800c0ba:	bf00      	nop
 800c0bc:	20000018 	.word	0x20000018
 800c0c0:	0800cc1c 	.word	0x0800cc1c
 800c0c4:	0800cc3c 	.word	0x0800cc3c
 800c0c8:	0800cbfc 	.word	0x0800cbfc

0800c0cc <__sflush_r>:
 800c0cc:	898a      	ldrh	r2, [r1, #12]
 800c0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	0710      	lsls	r0, r2, #28
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	d458      	bmi.n	800c18c <__sflush_r+0xc0>
 800c0da:	684b      	ldr	r3, [r1, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dc05      	bgt.n	800c0ec <__sflush_r+0x20>
 800c0e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	dc02      	bgt.n	800c0ec <__sflush_r+0x20>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	d0f9      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0f8:	682f      	ldr	r7, [r5, #0]
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	d032      	beq.n	800c164 <__sflush_r+0x98>
 800c0fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	075a      	lsls	r2, r3, #29
 800c104:	d505      	bpl.n	800c112 <__sflush_r+0x46>
 800c106:	6863      	ldr	r3, [r4, #4]
 800c108:	1ac0      	subs	r0, r0, r3
 800c10a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c10c:	b10b      	cbz	r3, 800c112 <__sflush_r+0x46>
 800c10e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c110:	1ac0      	subs	r0, r0, r3
 800c112:	2300      	movs	r3, #0
 800c114:	4602      	mov	r2, r0
 800c116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c118:	6a21      	ldr	r1, [r4, #32]
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b0      	blx	r6
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	d106      	bne.n	800c132 <__sflush_r+0x66>
 800c124:	6829      	ldr	r1, [r5, #0]
 800c126:	291d      	cmp	r1, #29
 800c128:	d82c      	bhi.n	800c184 <__sflush_r+0xb8>
 800c12a:	4a2a      	ldr	r2, [pc, #168]	; (800c1d4 <__sflush_r+0x108>)
 800c12c:	40ca      	lsrs	r2, r1
 800c12e:	07d6      	lsls	r6, r2, #31
 800c130:	d528      	bpl.n	800c184 <__sflush_r+0xb8>
 800c132:	2200      	movs	r2, #0
 800c134:	6062      	str	r2, [r4, #4]
 800c136:	04d9      	lsls	r1, r3, #19
 800c138:	6922      	ldr	r2, [r4, #16]
 800c13a:	6022      	str	r2, [r4, #0]
 800c13c:	d504      	bpl.n	800c148 <__sflush_r+0x7c>
 800c13e:	1c42      	adds	r2, r0, #1
 800c140:	d101      	bne.n	800c146 <__sflush_r+0x7a>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	b903      	cbnz	r3, 800c148 <__sflush_r+0x7c>
 800c146:	6560      	str	r0, [r4, #84]	; 0x54
 800c148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c14a:	602f      	str	r7, [r5, #0]
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d0ca      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c154:	4299      	cmp	r1, r3
 800c156:	d002      	beq.n	800c15e <__sflush_r+0x92>
 800c158:	4628      	mov	r0, r5
 800c15a:	f7fd fbe9 	bl	8009930 <_free_r>
 800c15e:	2000      	movs	r0, #0
 800c160:	6360      	str	r0, [r4, #52]	; 0x34
 800c162:	e7c1      	b.n	800c0e8 <__sflush_r+0x1c>
 800c164:	6a21      	ldr	r1, [r4, #32]
 800c166:	2301      	movs	r3, #1
 800c168:	4628      	mov	r0, r5
 800c16a:	47b0      	blx	r6
 800c16c:	1c41      	adds	r1, r0, #1
 800c16e:	d1c7      	bne.n	800c100 <__sflush_r+0x34>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0c4      	beq.n	800c100 <__sflush_r+0x34>
 800c176:	2b1d      	cmp	r3, #29
 800c178:	d001      	beq.n	800c17e <__sflush_r+0xb2>
 800c17a:	2b16      	cmp	r3, #22
 800c17c:	d101      	bne.n	800c182 <__sflush_r+0xb6>
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	e7b1      	b.n	800c0e6 <__sflush_r+0x1a>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	e7ad      	b.n	800c0e8 <__sflush_r+0x1c>
 800c18c:	690f      	ldr	r7, [r1, #16]
 800c18e:	2f00      	cmp	r7, #0
 800c190:	d0a9      	beq.n	800c0e6 <__sflush_r+0x1a>
 800c192:	0793      	lsls	r3, r2, #30
 800c194:	680e      	ldr	r6, [r1, #0]
 800c196:	bf08      	it	eq
 800c198:	694b      	ldreq	r3, [r1, #20]
 800c19a:	600f      	str	r7, [r1, #0]
 800c19c:	bf18      	it	ne
 800c19e:	2300      	movne	r3, #0
 800c1a0:	eba6 0807 	sub.w	r8, r6, r7
 800c1a4:	608b      	str	r3, [r1, #8]
 800c1a6:	f1b8 0f00 	cmp.w	r8, #0
 800c1aa:	dd9c      	ble.n	800c0e6 <__sflush_r+0x1a>
 800c1ac:	6a21      	ldr	r1, [r4, #32]
 800c1ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1b0:	4643      	mov	r3, r8
 800c1b2:	463a      	mov	r2, r7
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b0      	blx	r6
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	dc06      	bgt.n	800c1ca <__sflush_r+0xfe>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1c8:	e78e      	b.n	800c0e8 <__sflush_r+0x1c>
 800c1ca:	4407      	add	r7, r0
 800c1cc:	eba8 0800 	sub.w	r8, r8, r0
 800c1d0:	e7e9      	b.n	800c1a6 <__sflush_r+0xda>
 800c1d2:	bf00      	nop
 800c1d4:	20400001 	.word	0x20400001

0800c1d8 <_fflush_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	690b      	ldr	r3, [r1, #16]
 800c1dc:	4605      	mov	r5, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	b913      	cbnz	r3, 800c1e8 <_fflush_r+0x10>
 800c1e2:	2500      	movs	r5, #0
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	b118      	cbz	r0, 800c1f2 <_fflush_r+0x1a>
 800c1ea:	6983      	ldr	r3, [r0, #24]
 800c1ec:	b90b      	cbnz	r3, 800c1f2 <_fflush_r+0x1a>
 800c1ee:	f000 f887 	bl	800c300 <__sinit>
 800c1f2:	4b14      	ldr	r3, [pc, #80]	; (800c244 <_fflush_r+0x6c>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	d11b      	bne.n	800c230 <_fflush_r+0x58>
 800c1f8:	686c      	ldr	r4, [r5, #4]
 800c1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0ef      	beq.n	800c1e2 <_fflush_r+0xa>
 800c202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c204:	07d0      	lsls	r0, r2, #31
 800c206:	d404      	bmi.n	800c212 <_fflush_r+0x3a>
 800c208:	0599      	lsls	r1, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_fflush_r+0x3a>
 800c20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c20e:	f7ff fcfc 	bl	800bc0a <__retarget_lock_acquire_recursive>
 800c212:	4628      	mov	r0, r5
 800c214:	4621      	mov	r1, r4
 800c216:	f7ff ff59 	bl	800c0cc <__sflush_r>
 800c21a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c21c:	07da      	lsls	r2, r3, #31
 800c21e:	4605      	mov	r5, r0
 800c220:	d4e0      	bmi.n	800c1e4 <_fflush_r+0xc>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	059b      	lsls	r3, r3, #22
 800c226:	d4dd      	bmi.n	800c1e4 <_fflush_r+0xc>
 800c228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22a:	f7ff fcef 	bl	800bc0c <__retarget_lock_release_recursive>
 800c22e:	e7d9      	b.n	800c1e4 <_fflush_r+0xc>
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <_fflush_r+0x70>)
 800c232:	429c      	cmp	r4, r3
 800c234:	d101      	bne.n	800c23a <_fflush_r+0x62>
 800c236:	68ac      	ldr	r4, [r5, #8]
 800c238:	e7df      	b.n	800c1fa <_fflush_r+0x22>
 800c23a:	4b04      	ldr	r3, [pc, #16]	; (800c24c <_fflush_r+0x74>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	bf08      	it	eq
 800c240:	68ec      	ldreq	r4, [r5, #12]
 800c242:	e7da      	b.n	800c1fa <_fflush_r+0x22>
 800c244:	0800cc1c 	.word	0x0800cc1c
 800c248:	0800cc3c 	.word	0x0800cc3c
 800c24c:	0800cbfc 	.word	0x0800cbfc

0800c250 <std>:
 800c250:	2300      	movs	r3, #0
 800c252:	b510      	push	{r4, lr}
 800c254:	4604      	mov	r4, r0
 800c256:	e9c0 3300 	strd	r3, r3, [r0]
 800c25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c25e:	6083      	str	r3, [r0, #8]
 800c260:	8181      	strh	r1, [r0, #12]
 800c262:	6643      	str	r3, [r0, #100]	; 0x64
 800c264:	81c2      	strh	r2, [r0, #14]
 800c266:	6183      	str	r3, [r0, #24]
 800c268:	4619      	mov	r1, r3
 800c26a:	2208      	movs	r2, #8
 800c26c:	305c      	adds	r0, #92	; 0x5c
 800c26e:	f7fd fb57 	bl	8009920 <memset>
 800c272:	4b05      	ldr	r3, [pc, #20]	; (800c288 <std+0x38>)
 800c274:	6263      	str	r3, [r4, #36]	; 0x24
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <std+0x3c>)
 800c278:	62a3      	str	r3, [r4, #40]	; 0x28
 800c27a:	4b05      	ldr	r3, [pc, #20]	; (800c290 <std+0x40>)
 800c27c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c27e:	4b05      	ldr	r3, [pc, #20]	; (800c294 <std+0x44>)
 800c280:	6224      	str	r4, [r4, #32]
 800c282:	6323      	str	r3, [r4, #48]	; 0x30
 800c284:	bd10      	pop	{r4, pc}
 800c286:	bf00      	nop
 800c288:	0800c515 	.word	0x0800c515
 800c28c:	0800c537 	.word	0x0800c537
 800c290:	0800c56f 	.word	0x0800c56f
 800c294:	0800c593 	.word	0x0800c593

0800c298 <_cleanup_r>:
 800c298:	4901      	ldr	r1, [pc, #4]	; (800c2a0 <_cleanup_r+0x8>)
 800c29a:	f000 b8af 	b.w	800c3fc <_fwalk_reent>
 800c29e:	bf00      	nop
 800c2a0:	0800c1d9 	.word	0x0800c1d9

0800c2a4 <__sfmoreglue>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	1e4a      	subs	r2, r1, #1
 800c2a8:	2568      	movs	r5, #104	; 0x68
 800c2aa:	4355      	muls	r5, r2
 800c2ac:	460e      	mov	r6, r1
 800c2ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2b2:	f7fd fb8d 	bl	80099d0 <_malloc_r>
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	b140      	cbz	r0, 800c2cc <__sfmoreglue+0x28>
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c2c0:	300c      	adds	r0, #12
 800c2c2:	60a0      	str	r0, [r4, #8]
 800c2c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2c8:	f7fd fb2a 	bl	8009920 <memset>
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}

0800c2d0 <__sfp_lock_acquire>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	; (800c2d8 <__sfp_lock_acquire+0x8>)
 800c2d2:	f7ff bc9a 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	200005ec 	.word	0x200005ec

0800c2dc <__sfp_lock_release>:
 800c2dc:	4801      	ldr	r0, [pc, #4]	; (800c2e4 <__sfp_lock_release+0x8>)
 800c2de:	f7ff bc95 	b.w	800bc0c <__retarget_lock_release_recursive>
 800c2e2:	bf00      	nop
 800c2e4:	200005ec 	.word	0x200005ec

0800c2e8 <__sinit_lock_acquire>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	; (800c2f0 <__sinit_lock_acquire+0x8>)
 800c2ea:	f7ff bc8e 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	200005e7 	.word	0x200005e7

0800c2f4 <__sinit_lock_release>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	; (800c2fc <__sinit_lock_release+0x8>)
 800c2f6:	f7ff bc89 	b.w	800bc0c <__retarget_lock_release_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	200005e7 	.word	0x200005e7

0800c300 <__sinit>:
 800c300:	b510      	push	{r4, lr}
 800c302:	4604      	mov	r4, r0
 800c304:	f7ff fff0 	bl	800c2e8 <__sinit_lock_acquire>
 800c308:	69a3      	ldr	r3, [r4, #24]
 800c30a:	b11b      	cbz	r3, 800c314 <__sinit+0x14>
 800c30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c310:	f7ff bff0 	b.w	800c2f4 <__sinit_lock_release>
 800c314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c318:	6523      	str	r3, [r4, #80]	; 0x50
 800c31a:	4b13      	ldr	r3, [pc, #76]	; (800c368 <__sinit+0x68>)
 800c31c:	4a13      	ldr	r2, [pc, #76]	; (800c36c <__sinit+0x6c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	62a2      	str	r2, [r4, #40]	; 0x28
 800c322:	42a3      	cmp	r3, r4
 800c324:	bf04      	itt	eq
 800c326:	2301      	moveq	r3, #1
 800c328:	61a3      	streq	r3, [r4, #24]
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 f820 	bl	800c370 <__sfp>
 800c330:	6060      	str	r0, [r4, #4]
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f81c 	bl	800c370 <__sfp>
 800c338:	60a0      	str	r0, [r4, #8]
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f818 	bl	800c370 <__sfp>
 800c340:	2200      	movs	r2, #0
 800c342:	60e0      	str	r0, [r4, #12]
 800c344:	2104      	movs	r1, #4
 800c346:	6860      	ldr	r0, [r4, #4]
 800c348:	f7ff ff82 	bl	800c250 <std>
 800c34c:	68a0      	ldr	r0, [r4, #8]
 800c34e:	2201      	movs	r2, #1
 800c350:	2109      	movs	r1, #9
 800c352:	f7ff ff7d 	bl	800c250 <std>
 800c356:	68e0      	ldr	r0, [r4, #12]
 800c358:	2202      	movs	r2, #2
 800c35a:	2112      	movs	r1, #18
 800c35c:	f7ff ff78 	bl	800c250 <std>
 800c360:	2301      	movs	r3, #1
 800c362:	61a3      	str	r3, [r4, #24]
 800c364:	e7d2      	b.n	800c30c <__sinit+0xc>
 800c366:	bf00      	nop
 800c368:	0800c850 	.word	0x0800c850
 800c36c:	0800c299 	.word	0x0800c299

0800c370 <__sfp>:
 800c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c372:	4607      	mov	r7, r0
 800c374:	f7ff ffac 	bl	800c2d0 <__sfp_lock_acquire>
 800c378:	4b1e      	ldr	r3, [pc, #120]	; (800c3f4 <__sfp+0x84>)
 800c37a:	681e      	ldr	r6, [r3, #0]
 800c37c:	69b3      	ldr	r3, [r6, #24]
 800c37e:	b913      	cbnz	r3, 800c386 <__sfp+0x16>
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff ffbd 	bl	800c300 <__sinit>
 800c386:	3648      	adds	r6, #72	; 0x48
 800c388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	d503      	bpl.n	800c398 <__sfp+0x28>
 800c390:	6833      	ldr	r3, [r6, #0]
 800c392:	b30b      	cbz	r3, 800c3d8 <__sfp+0x68>
 800c394:	6836      	ldr	r6, [r6, #0]
 800c396:	e7f7      	b.n	800c388 <__sfp+0x18>
 800c398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c39c:	b9d5      	cbnz	r5, 800c3d4 <__sfp+0x64>
 800c39e:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <__sfp+0x88>)
 800c3a0:	60e3      	str	r3, [r4, #12]
 800c3a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c3a8:	f7ff fc2e 	bl	800bc08 <__retarget_lock_init_recursive>
 800c3ac:	f7ff ff96 	bl	800c2dc <__sfp_lock_release>
 800c3b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3b8:	6025      	str	r5, [r4, #0]
 800c3ba:	61a5      	str	r5, [r4, #24]
 800c3bc:	2208      	movs	r2, #8
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3c4:	f7fd faac 	bl	8009920 <memset>
 800c3c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d4:	3468      	adds	r4, #104	; 0x68
 800c3d6:	e7d9      	b.n	800c38c <__sfp+0x1c>
 800c3d8:	2104      	movs	r1, #4
 800c3da:	4638      	mov	r0, r7
 800c3dc:	f7ff ff62 	bl	800c2a4 <__sfmoreglue>
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	6030      	str	r0, [r6, #0]
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d1d5      	bne.n	800c394 <__sfp+0x24>
 800c3e8:	f7ff ff78 	bl	800c2dc <__sfp_lock_release>
 800c3ec:	230c      	movs	r3, #12
 800c3ee:	603b      	str	r3, [r7, #0]
 800c3f0:	e7ee      	b.n	800c3d0 <__sfp+0x60>
 800c3f2:	bf00      	nop
 800c3f4:	0800c850 	.word	0x0800c850
 800c3f8:	ffff0001 	.word	0xffff0001

0800c3fc <_fwalk_reent>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	4606      	mov	r6, r0
 800c402:	4688      	mov	r8, r1
 800c404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c408:	2700      	movs	r7, #0
 800c40a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c40e:	f1b9 0901 	subs.w	r9, r9, #1
 800c412:	d505      	bpl.n	800c420 <_fwalk_reent+0x24>
 800c414:	6824      	ldr	r4, [r4, #0]
 800c416:	2c00      	cmp	r4, #0
 800c418:	d1f7      	bne.n	800c40a <_fwalk_reent+0xe>
 800c41a:	4638      	mov	r0, r7
 800c41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c420:	89ab      	ldrh	r3, [r5, #12]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d907      	bls.n	800c436 <_fwalk_reent+0x3a>
 800c426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c42a:	3301      	adds	r3, #1
 800c42c:	d003      	beq.n	800c436 <_fwalk_reent+0x3a>
 800c42e:	4629      	mov	r1, r5
 800c430:	4630      	mov	r0, r6
 800c432:	47c0      	blx	r8
 800c434:	4307      	orrs	r7, r0
 800c436:	3568      	adds	r5, #104	; 0x68
 800c438:	e7e9      	b.n	800c40e <_fwalk_reent+0x12>

0800c43a <__swhatbuf_r>:
 800c43a:	b570      	push	{r4, r5, r6, lr}
 800c43c:	460e      	mov	r6, r1
 800c43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c442:	2900      	cmp	r1, #0
 800c444:	b096      	sub	sp, #88	; 0x58
 800c446:	4614      	mov	r4, r2
 800c448:	461d      	mov	r5, r3
 800c44a:	da07      	bge.n	800c45c <__swhatbuf_r+0x22>
 800c44c:	2300      	movs	r3, #0
 800c44e:	602b      	str	r3, [r5, #0]
 800c450:	89b3      	ldrh	r3, [r6, #12]
 800c452:	061a      	lsls	r2, r3, #24
 800c454:	d410      	bmi.n	800c478 <__swhatbuf_r+0x3e>
 800c456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c45a:	e00e      	b.n	800c47a <__swhatbuf_r+0x40>
 800c45c:	466a      	mov	r2, sp
 800c45e:	f000 f8bf 	bl	800c5e0 <_fstat_r>
 800c462:	2800      	cmp	r0, #0
 800c464:	dbf2      	blt.n	800c44c <__swhatbuf_r+0x12>
 800c466:	9a01      	ldr	r2, [sp, #4]
 800c468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c46c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c470:	425a      	negs	r2, r3
 800c472:	415a      	adcs	r2, r3
 800c474:	602a      	str	r2, [r5, #0]
 800c476:	e7ee      	b.n	800c456 <__swhatbuf_r+0x1c>
 800c478:	2340      	movs	r3, #64	; 0x40
 800c47a:	2000      	movs	r0, #0
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	b016      	add	sp, #88	; 0x58
 800c480:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c484 <__smakebuf_r>:
 800c484:	898b      	ldrh	r3, [r1, #12]
 800c486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c488:	079d      	lsls	r5, r3, #30
 800c48a:	4606      	mov	r6, r0
 800c48c:	460c      	mov	r4, r1
 800c48e:	d507      	bpl.n	800c4a0 <__smakebuf_r+0x1c>
 800c490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	6123      	str	r3, [r4, #16]
 800c498:	2301      	movs	r3, #1
 800c49a:	6163      	str	r3, [r4, #20]
 800c49c:	b002      	add	sp, #8
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	ab01      	add	r3, sp, #4
 800c4a2:	466a      	mov	r2, sp
 800c4a4:	f7ff ffc9 	bl	800c43a <__swhatbuf_r>
 800c4a8:	9900      	ldr	r1, [sp, #0]
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7fd fa8f 	bl	80099d0 <_malloc_r>
 800c4b2:	b948      	cbnz	r0, 800c4c8 <__smakebuf_r+0x44>
 800c4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b8:	059a      	lsls	r2, r3, #22
 800c4ba:	d4ef      	bmi.n	800c49c <__smakebuf_r+0x18>
 800c4bc:	f023 0303 	bic.w	r3, r3, #3
 800c4c0:	f043 0302 	orr.w	r3, r3, #2
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	e7e3      	b.n	800c490 <__smakebuf_r+0xc>
 800c4c8:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <__smakebuf_r+0x7c>)
 800c4ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	6020      	str	r0, [r4, #0]
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	9b00      	ldr	r3, [sp, #0]
 800c4d8:	6163      	str	r3, [r4, #20]
 800c4da:	9b01      	ldr	r3, [sp, #4]
 800c4dc:	6120      	str	r0, [r4, #16]
 800c4de:	b15b      	cbz	r3, 800c4f8 <__smakebuf_r+0x74>
 800c4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f000 f88d 	bl	800c604 <_isatty_r>
 800c4ea:	b128      	cbz	r0, 800c4f8 <__smakebuf_r+0x74>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f023 0303 	bic.w	r3, r3, #3
 800c4f2:	f043 0301 	orr.w	r3, r3, #1
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	89a0      	ldrh	r0, [r4, #12]
 800c4fa:	4305      	orrs	r5, r0
 800c4fc:	81a5      	strh	r5, [r4, #12]
 800c4fe:	e7cd      	b.n	800c49c <__smakebuf_r+0x18>
 800c500:	0800c299 	.word	0x0800c299

0800c504 <_malloc_usable_size_r>:
 800c504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c508:	1f18      	subs	r0, r3, #4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bfbc      	itt	lt
 800c50e:	580b      	ldrlt	r3, [r1, r0]
 800c510:	18c0      	addlt	r0, r0, r3
 800c512:	4770      	bx	lr

0800c514 <__sread>:
 800c514:	b510      	push	{r4, lr}
 800c516:	460c      	mov	r4, r1
 800c518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c51c:	f000 f894 	bl	800c648 <_read_r>
 800c520:	2800      	cmp	r0, #0
 800c522:	bfab      	itete	ge
 800c524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c526:	89a3      	ldrhlt	r3, [r4, #12]
 800c528:	181b      	addge	r3, r3, r0
 800c52a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c52e:	bfac      	ite	ge
 800c530:	6563      	strge	r3, [r4, #84]	; 0x54
 800c532:	81a3      	strhlt	r3, [r4, #12]
 800c534:	bd10      	pop	{r4, pc}

0800c536 <__swrite>:
 800c536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53a:	461f      	mov	r7, r3
 800c53c:	898b      	ldrh	r3, [r1, #12]
 800c53e:	05db      	lsls	r3, r3, #23
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4616      	mov	r6, r2
 800c546:	d505      	bpl.n	800c554 <__swrite+0x1e>
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	2302      	movs	r3, #2
 800c54e:	2200      	movs	r2, #0
 800c550:	f000 f868 	bl	800c624 <_lseek_r>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	f000 b817 	b.w	800c59c <_write_r>

0800c56e <__sseek>:
 800c56e:	b510      	push	{r4, lr}
 800c570:	460c      	mov	r4, r1
 800c572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c576:	f000 f855 	bl	800c624 <_lseek_r>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	bf15      	itete	ne
 800c580:	6560      	strne	r0, [r4, #84]	; 0x54
 800c582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c58a:	81a3      	strheq	r3, [r4, #12]
 800c58c:	bf18      	it	ne
 800c58e:	81a3      	strhne	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__sclose>:
 800c592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c596:	f000 b813 	b.w	800c5c0 <_close_r>
	...

0800c59c <_write_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d07      	ldr	r5, [pc, #28]	; (800c5bc <_write_r+0x20>)
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	602a      	str	r2, [r5, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f7f6 ffaf 	bl	800350e <_write>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_write_r+0x1e>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_write_r+0x1e>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	200005e0 	.word	0x200005e0

0800c5c0 <_close_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d06      	ldr	r5, [pc, #24]	; (800c5dc <_close_r+0x1c>)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7f6 ffbb 	bl	8003546 <_close>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_close_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_close_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	200005e0 	.word	0x200005e0

0800c5e0 <_fstat_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d07      	ldr	r5, [pc, #28]	; (800c600 <_fstat_r+0x20>)
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	f7f6 ffb6 	bl	800355e <_fstat>
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d102      	bne.n	800c5fc <_fstat_r+0x1c>
 800c5f6:	682b      	ldr	r3, [r5, #0]
 800c5f8:	b103      	cbz	r3, 800c5fc <_fstat_r+0x1c>
 800c5fa:	6023      	str	r3, [r4, #0]
 800c5fc:	bd38      	pop	{r3, r4, r5, pc}
 800c5fe:	bf00      	nop
 800c600:	200005e0 	.word	0x200005e0

0800c604 <_isatty_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4d06      	ldr	r5, [pc, #24]	; (800c620 <_isatty_r+0x1c>)
 800c608:	2300      	movs	r3, #0
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	f7f6 ffb5 	bl	800357e <_isatty>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_isatty_r+0x1a>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_isatty_r+0x1a>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	200005e0 	.word	0x200005e0

0800c624 <_lseek_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d07      	ldr	r5, [pc, #28]	; (800c644 <_lseek_r+0x20>)
 800c628:	4604      	mov	r4, r0
 800c62a:	4608      	mov	r0, r1
 800c62c:	4611      	mov	r1, r2
 800c62e:	2200      	movs	r2, #0
 800c630:	602a      	str	r2, [r5, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	f7f6 ffae 	bl	8003594 <_lseek>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_lseek_r+0x1e>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_lseek_r+0x1e>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	200005e0 	.word	0x200005e0

0800c648 <_read_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4d07      	ldr	r5, [pc, #28]	; (800c668 <_read_r+0x20>)
 800c64c:	4604      	mov	r4, r0
 800c64e:	4608      	mov	r0, r1
 800c650:	4611      	mov	r1, r2
 800c652:	2200      	movs	r2, #0
 800c654:	602a      	str	r2, [r5, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	f7f6 ff3c 	bl	80034d4 <_read>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_read_r+0x1e>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_read_r+0x1e>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	200005e0 	.word	0x200005e0

0800c66c <_init>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr

0800c678 <_fini>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr
